
C:\Users\Khiem\Atollic\TrueSTUDIO\ARM_workspace_7.0\cppPrintf_v0_2\Debug\cppPrintf_v0_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fe8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002194  08002194  00012194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000030  080021b0  080021b0  000121b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000d8  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  080022b8  080022b8  000122b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080022bc  080022bc  000122bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000000f8  20000000  080022c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  000200f8  2**0
                  CONTENTS
  9 .bss          00000064  200000f8  200000f8  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000015c  2000015c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_line   00002940  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00006475  00000000  00000000  00022a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000143f  00000000  00000000  00028edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000004e8  00000000  00000000  0002a320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000630  00000000  00000000  0002a808  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00002236  00000000  00000000  0002ae38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001ec7  00000000  00000000  0002d06e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007e  00000000  00000000  0002ef35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bb0  00000000  00000000  0002efb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  0002fb64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000f8 	.word	0x200000f8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800217c 	.word	0x0800217c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000fc 	.word	0x200000fc
 80001e8:	0800217c 	.word	0x0800217c

080001ec <selfrel_offset31>:
 80001ec:	6803      	ldr	r3, [r0, #0]
 80001ee:	005a      	lsls	r2, r3, #1
 80001f0:	bf4c      	ite	mi
 80001f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80001f6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80001fa:	4418      	add	r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop

08000200 <search_EIT_table>:
 8000200:	b361      	cbz	r1, 800025c <search_EIT_table+0x5c>
 8000202:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000206:	f101 3aff 	add.w	sl, r1, #4294967295
 800020a:	4690      	mov	r8, r2
 800020c:	4606      	mov	r6, r0
 800020e:	46d1      	mov	r9, sl
 8000210:	2700      	movs	r7, #0
 8000212:	eb07 0409 	add.w	r4, r7, r9
 8000216:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800021a:	1064      	asrs	r4, r4, #1
 800021c:	00e5      	lsls	r5, r4, #3
 800021e:	1971      	adds	r1, r6, r5
 8000220:	4608      	mov	r0, r1
 8000222:	f7ff ffe3 	bl	80001ec <selfrel_offset31>
 8000226:	45a2      	cmp	sl, r4
 8000228:	4683      	mov	fp, r0
 800022a:	f105 0008 	add.w	r0, r5, #8
 800022e:	4430      	add	r0, r6
 8000230:	d009      	beq.n	8000246 <search_EIT_table+0x46>
 8000232:	f7ff ffdb 	bl	80001ec <selfrel_offset31>
 8000236:	45c3      	cmp	fp, r8
 8000238:	f100 30ff 	add.w	r0, r0, #4294967295
 800023c:	d805      	bhi.n	800024a <search_EIT_table+0x4a>
 800023e:	4540      	cmp	r0, r8
 8000240:	d209      	bcs.n	8000256 <search_EIT_table+0x56>
 8000242:	1c67      	adds	r7, r4, #1
 8000244:	e7e5      	b.n	8000212 <search_EIT_table+0x12>
 8000246:	45c3      	cmp	fp, r8
 8000248:	d905      	bls.n	8000256 <search_EIT_table+0x56>
 800024a:	42a7      	cmp	r7, r4
 800024c:	d002      	beq.n	8000254 <search_EIT_table+0x54>
 800024e:	f104 39ff 	add.w	r9, r4, #4294967295
 8000252:	e7de      	b.n	8000212 <search_EIT_table+0x12>
 8000254:	2100      	movs	r1, #0
 8000256:	4608      	mov	r0, r1
 8000258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800025c:	4608      	mov	r0, r1
 800025e:	4770      	bx	lr

08000260 <__gnu_unwind_get_pr_addr>:
 8000260:	2801      	cmp	r0, #1
 8000262:	d007      	beq.n	8000274 <__gnu_unwind_get_pr_addr+0x14>
 8000264:	2802      	cmp	r0, #2
 8000266:	d007      	beq.n	8000278 <__gnu_unwind_get_pr_addr+0x18>
 8000268:	4b04      	ldr	r3, [pc, #16]	; (800027c <__gnu_unwind_get_pr_addr+0x1c>)
 800026a:	2800      	cmp	r0, #0
 800026c:	bf0c      	ite	eq
 800026e:	4618      	moveq	r0, r3
 8000270:	2000      	movne	r0, #0
 8000272:	4770      	bx	lr
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <__gnu_unwind_get_pr_addr+0x20>)
 8000276:	4770      	bx	lr
 8000278:	4802      	ldr	r0, [pc, #8]	; (8000284 <__gnu_unwind_get_pr_addr+0x24>)
 800027a:	4770      	bx	lr
 800027c:	0800096d 	.word	0x0800096d
 8000280:	08000971 	.word	0x08000971
 8000284:	08000975 	.word	0x08000975

08000288 <get_eit_entry>:
 8000288:	b530      	push	{r4, r5, lr}
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <get_eit_entry+0x94>)
 800028c:	b083      	sub	sp, #12
 800028e:	4604      	mov	r4, r0
 8000290:	1e8d      	subs	r5, r1, #2
 8000292:	b37b      	cbz	r3, 80002f4 <get_eit_entry+0x6c>
 8000294:	a901      	add	r1, sp, #4
 8000296:	4628      	mov	r0, r5
 8000298:	f3af 8000 	nop.w
 800029c:	b320      	cbz	r0, 80002e8 <get_eit_entry+0x60>
 800029e:	9901      	ldr	r1, [sp, #4]
 80002a0:	462a      	mov	r2, r5
 80002a2:	f7ff ffad 	bl	8000200 <search_EIT_table>
 80002a6:	4601      	mov	r1, r0
 80002a8:	b1f0      	cbz	r0, 80002e8 <get_eit_entry+0x60>
 80002aa:	f7ff ff9f 	bl	80001ec <selfrel_offset31>
 80002ae:	684b      	ldr	r3, [r1, #4]
 80002b0:	64a0      	str	r0, [r4, #72]	; 0x48
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d012      	beq.n	80002dc <get_eit_entry+0x54>
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	f101 0004 	add.w	r0, r1, #4
 80002bc:	db20      	blt.n	8000300 <get_eit_entry+0x78>
 80002be:	f7ff ff95 	bl	80001ec <selfrel_offset31>
 80002c2:	2300      	movs	r3, #0
 80002c4:	64e0      	str	r0, [r4, #76]	; 0x4c
 80002c6:	6523      	str	r3, [r4, #80]	; 0x50
 80002c8:	6803      	ldr	r3, [r0, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	db1c      	blt.n	8000308 <get_eit_entry+0x80>
 80002ce:	f7ff ff8d 	bl	80001ec <selfrel_offset31>
 80002d2:	2300      	movs	r3, #0
 80002d4:	6120      	str	r0, [r4, #16]
 80002d6:	4618      	mov	r0, r3
 80002d8:	b003      	add	sp, #12
 80002da:	bd30      	pop	{r4, r5, pc}
 80002dc:	2300      	movs	r3, #0
 80002de:	6123      	str	r3, [r4, #16]
 80002e0:	2305      	movs	r3, #5
 80002e2:	4618      	mov	r0, r3
 80002e4:	b003      	add	sp, #12
 80002e6:	bd30      	pop	{r4, r5, pc}
 80002e8:	2300      	movs	r3, #0
 80002ea:	6123      	str	r3, [r4, #16]
 80002ec:	2309      	movs	r3, #9
 80002ee:	4618      	mov	r0, r3
 80002f0:	b003      	add	sp, #12
 80002f2:	bd30      	pop	{r4, r5, pc}
 80002f4:	490a      	ldr	r1, [pc, #40]	; (8000320 <get_eit_entry+0x98>)
 80002f6:	480b      	ldr	r0, [pc, #44]	; (8000324 <get_eit_entry+0x9c>)
 80002f8:	1a09      	subs	r1, r1, r0
 80002fa:	10c9      	asrs	r1, r1, #3
 80002fc:	9101      	str	r1, [sp, #4]
 80002fe:	e7cf      	b.n	80002a0 <get_eit_entry+0x18>
 8000300:	2301      	movs	r3, #1
 8000302:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000304:	6523      	str	r3, [r4, #80]	; 0x50
 8000306:	e7df      	b.n	80002c8 <get_eit_entry+0x40>
 8000308:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800030c:	f7ff ffa8 	bl	8000260 <__gnu_unwind_get_pr_addr>
 8000310:	2800      	cmp	r0, #0
 8000312:	6120      	str	r0, [r4, #16]
 8000314:	bf14      	ite	ne
 8000316:	2300      	movne	r3, #0
 8000318:	2309      	moveq	r3, #9
 800031a:	e7dc      	b.n	80002d6 <get_eit_entry+0x4e>
 800031c:	00000000 	.word	0x00000000
 8000320:	080022b8 	.word	0x080022b8
 8000324:	080021e0 	.word	0x080021e0

08000328 <restore_non_core_regs>:
 8000328:	6803      	ldr	r3, [r0, #0]
 800032a:	07da      	lsls	r2, r3, #31
 800032c:	b510      	push	{r4, lr}
 800032e:	4604      	mov	r4, r0
 8000330:	d406      	bmi.n	8000340 <restore_non_core_regs+0x18>
 8000332:	079b      	lsls	r3, r3, #30
 8000334:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000338:	d509      	bpl.n	800034e <restore_non_core_regs+0x26>
 800033a:	f000 fc59 	bl	8000bf0 <__gnu_Unwind_Restore_VFP_D>
 800033e:	6823      	ldr	r3, [r4, #0]
 8000340:	0759      	lsls	r1, r3, #29
 8000342:	d509      	bpl.n	8000358 <restore_non_core_regs+0x30>
 8000344:	071a      	lsls	r2, r3, #28
 8000346:	d50e      	bpl.n	8000366 <restore_non_core_regs+0x3e>
 8000348:	06db      	lsls	r3, r3, #27
 800034a:	d513      	bpl.n	8000374 <restore_non_core_regs+0x4c>
 800034c:	bd10      	pop	{r4, pc}
 800034e:	f000 fc47 	bl	8000be0 <__gnu_Unwind_Restore_VFP>
 8000352:	6823      	ldr	r3, [r4, #0]
 8000354:	0759      	lsls	r1, r3, #29
 8000356:	d4f5      	bmi.n	8000344 <restore_non_core_regs+0x1c>
 8000358:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800035c:	f000 fc50 	bl	8000c00 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000360:	6823      	ldr	r3, [r4, #0]
 8000362:	071a      	lsls	r2, r3, #28
 8000364:	d4f0      	bmi.n	8000348 <restore_non_core_regs+0x20>
 8000366:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800036a:	f000 fc51 	bl	8000c10 <__gnu_Unwind_Restore_WMMXD>
 800036e:	6823      	ldr	r3, [r4, #0]
 8000370:	06db      	lsls	r3, r3, #27
 8000372:	d4eb      	bmi.n	800034c <restore_non_core_regs+0x24>
 8000374:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800037c:	f000 bc8c 	b.w	8000c98 <__gnu_Unwind_Restore_WMMXC>

08000380 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000380:	6803      	ldr	r3, [r0, #0]
 8000382:	b10b      	cbz	r3, 8000388 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8000384:	4418      	add	r0, r3
 8000386:	4770      	bx	lr
 8000388:	4618      	mov	r0, r3
 800038a:	4770      	bx	lr

0800038c <__gnu_unwind_24bit.isra.1>:
 800038c:	2009      	movs	r0, #9
 800038e:	4770      	bx	lr

08000390 <_Unwind_DebugHook>:
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop

08000394 <unwind_phase2>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	4604      	mov	r4, r0
 8000398:	460d      	mov	r5, r1
 800039a:	e008      	b.n	80003ae <unwind_phase2+0x1a>
 800039c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800039e:	6163      	str	r3, [r4, #20]
 80003a0:	462a      	mov	r2, r5
 80003a2:	6923      	ldr	r3, [r4, #16]
 80003a4:	4621      	mov	r1, r4
 80003a6:	2001      	movs	r0, #1
 80003a8:	4798      	blx	r3
 80003aa:	2808      	cmp	r0, #8
 80003ac:	d108      	bne.n	80003c0 <unwind_phase2+0x2c>
 80003ae:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80003b0:	4620      	mov	r0, r4
 80003b2:	f7ff ff69 	bl	8000288 <get_eit_entry>
 80003b6:	4606      	mov	r6, r0
 80003b8:	2800      	cmp	r0, #0
 80003ba:	d0ef      	beq.n	800039c <unwind_phase2+0x8>
 80003bc:	f001 fe74 	bl	80020a8 <abort>
 80003c0:	2807      	cmp	r0, #7
 80003c2:	d1fb      	bne.n	80003bc <unwind_phase2+0x28>
 80003c4:	4630      	mov	r0, r6
 80003c6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80003c8:	f7ff ffe2 	bl	8000390 <_Unwind_DebugHook>
 80003cc:	1d28      	adds	r0, r5, #4
 80003ce:	f000 fbfb 	bl	8000bc8 <__restore_core_regs>
 80003d2:	bf00      	nop

080003d4 <unwind_phase2_forced>:
 80003d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d8:	1d0c      	adds	r4, r1, #4
 80003da:	4606      	mov	r6, r0
 80003dc:	4617      	mov	r7, r2
 80003de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80003e4:	ad03      	add	r5, sp, #12
 80003e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003f4:	ac02      	add	r4, sp, #8
 80003f6:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80003fa:	f8d6 9018 	ldr.w	r9, [r6, #24]
 80003fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000402:	2300      	movs	r3, #0
 8000404:	4630      	mov	r0, r6
 8000406:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000408:	6023      	str	r3, [r4, #0]
 800040a:	f7ff ff3d 	bl	8000288 <get_eit_entry>
 800040e:	2f00      	cmp	r7, #0
 8000410:	4605      	mov	r5, r0
 8000412:	bf14      	ite	ne
 8000414:	270a      	movne	r7, #10
 8000416:	2709      	moveq	r7, #9
 8000418:	b17d      	cbz	r5, 800043a <unwind_phase2_forced+0x66>
 800041a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800041c:	f047 0110 	orr.w	r1, r7, #16
 8000420:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000424:	4632      	mov	r2, r6
 8000426:	6463      	str	r3, [r4, #68]	; 0x44
 8000428:	2001      	movs	r0, #1
 800042a:	4633      	mov	r3, r6
 800042c:	47c0      	blx	r8
 800042e:	bb78      	cbnz	r0, 8000490 <unwind_phase2_forced+0xbc>
 8000430:	4628      	mov	r0, r5
 8000432:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800043c:	6173      	str	r3, [r6, #20]
 800043e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000442:	4621      	mov	r1, r4
 8000444:	a87a      	add	r0, sp, #488	; 0x1e8
 8000446:	f001 fe36 	bl	80020b6 <memcpy>
 800044a:	6933      	ldr	r3, [r6, #16]
 800044c:	aa7a      	add	r2, sp, #488	; 0x1e8
 800044e:	4631      	mov	r1, r6
 8000450:	4638      	mov	r0, r7
 8000452:	4798      	blx	r3
 8000454:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000456:	4682      	mov	sl, r0
 8000458:	e88d 0210 	stmia.w	sp, {r4, r9}
 800045c:	4639      	mov	r1, r7
 800045e:	6463      	str	r3, [r4, #68]	; 0x44
 8000460:	4632      	mov	r2, r6
 8000462:	4633      	mov	r3, r6
 8000464:	2001      	movs	r0, #1
 8000466:	47c0      	blx	r8
 8000468:	b990      	cbnz	r0, 8000490 <unwind_phase2_forced+0xbc>
 800046a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800046e:	a97a      	add	r1, sp, #488	; 0x1e8
 8000470:	4620      	mov	r0, r4
 8000472:	f001 fe20 	bl	80020b6 <memcpy>
 8000476:	f1ba 0f08 	cmp.w	sl, #8
 800047a:	d106      	bne.n	800048a <unwind_phase2_forced+0xb6>
 800047c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800047e:	4630      	mov	r0, r6
 8000480:	f7ff ff02 	bl	8000288 <get_eit_entry>
 8000484:	2709      	movs	r7, #9
 8000486:	4605      	mov	r5, r0
 8000488:	e7c6      	b.n	8000418 <unwind_phase2_forced+0x44>
 800048a:	f1ba 0f07 	cmp.w	sl, #7
 800048e:	d004      	beq.n	800049a <unwind_phase2_forced+0xc6>
 8000490:	2009      	movs	r0, #9
 8000492:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4628      	mov	r0, r5
 800049c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800049e:	f7ff ff77 	bl	8000390 <_Unwind_DebugHook>
 80004a2:	a803      	add	r0, sp, #12
 80004a4:	f000 fb90 	bl	8000bc8 <__restore_core_regs>

080004a8 <_Unwind_GetCFA>:
 80004a8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80004aa:	4770      	bx	lr

080004ac <__gnu_Unwind_RaiseException>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80004b0:	640b      	str	r3, [r1, #64]	; 0x40
 80004b2:	1d0e      	adds	r6, r1, #4
 80004b4:	460f      	mov	r7, r1
 80004b6:	4604      	mov	r4, r0
 80004b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004ba:	b0f9      	sub	sp, #484	; 0x1e4
 80004bc:	ad01      	add	r5, sp, #4
 80004be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004cc:	f04f 36ff 	mov.w	r6, #4294967295
 80004d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004d4:	9600      	str	r6, [sp, #0]
 80004d6:	e006      	b.n	80004e6 <__gnu_Unwind_RaiseException+0x3a>
 80004d8:	6923      	ldr	r3, [r4, #16]
 80004da:	466a      	mov	r2, sp
 80004dc:	4621      	mov	r1, r4
 80004de:	4798      	blx	r3
 80004e0:	2808      	cmp	r0, #8
 80004e2:	4605      	mov	r5, r0
 80004e4:	d108      	bne.n	80004f8 <__gnu_Unwind_RaiseException+0x4c>
 80004e6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80004e8:	4620      	mov	r0, r4
 80004ea:	f7ff fecd 	bl	8000288 <get_eit_entry>
 80004ee:	2800      	cmp	r0, #0
 80004f0:	d0f2      	beq.n	80004d8 <__gnu_Unwind_RaiseException+0x2c>
 80004f2:	2009      	movs	r0, #9
 80004f4:	b079      	add	sp, #484	; 0x1e4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4668      	mov	r0, sp
 80004fa:	f7ff ff15 	bl	8000328 <restore_non_core_regs>
 80004fe:	2d06      	cmp	r5, #6
 8000500:	d1f7      	bne.n	80004f2 <__gnu_Unwind_RaiseException+0x46>
 8000502:	4639      	mov	r1, r7
 8000504:	4620      	mov	r0, r4
 8000506:	f7ff ff45 	bl	8000394 <unwind_phase2>
 800050a:	bf00      	nop

0800050c <__gnu_Unwind_ForcedUnwind>:
 800050c:	b430      	push	{r4, r5}
 800050e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000510:	60c1      	str	r1, [r0, #12]
 8000512:	6182      	str	r2, [r0, #24]
 8000514:	4619      	mov	r1, r3
 8000516:	641d      	str	r5, [r3, #64]	; 0x40
 8000518:	2200      	movs	r2, #0
 800051a:	bc30      	pop	{r4, r5}
 800051c:	e75a      	b.n	80003d4 <unwind_phase2_forced>
 800051e:	bf00      	nop

08000520 <__gnu_Unwind_Resume>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	68c6      	ldr	r6, [r0, #12]
 8000524:	6943      	ldr	r3, [r0, #20]
 8000526:	640b      	str	r3, [r1, #64]	; 0x40
 8000528:	b126      	cbz	r6, 8000534 <__gnu_Unwind_Resume+0x14>
 800052a:	2201      	movs	r2, #1
 800052c:	f7ff ff52 	bl	80003d4 <unwind_phase2_forced>
 8000530:	f001 fdba 	bl	80020a8 <abort>
 8000534:	6903      	ldr	r3, [r0, #16]
 8000536:	460a      	mov	r2, r1
 8000538:	4604      	mov	r4, r0
 800053a:	460d      	mov	r5, r1
 800053c:	4601      	mov	r1, r0
 800053e:	2002      	movs	r0, #2
 8000540:	4798      	blx	r3
 8000542:	2807      	cmp	r0, #7
 8000544:	d007      	beq.n	8000556 <__gnu_Unwind_Resume+0x36>
 8000546:	2808      	cmp	r0, #8
 8000548:	d103      	bne.n	8000552 <__gnu_Unwind_Resume+0x32>
 800054a:	4629      	mov	r1, r5
 800054c:	4620      	mov	r0, r4
 800054e:	f7ff ff21 	bl	8000394 <unwind_phase2>
 8000552:	f001 fda9 	bl	80020a8 <abort>
 8000556:	4630      	mov	r0, r6
 8000558:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800055a:	f7ff ff19 	bl	8000390 <_Unwind_DebugHook>
 800055e:	1d28      	adds	r0, r5, #4
 8000560:	f000 fb32 	bl	8000bc8 <__restore_core_regs>

08000564 <__gnu_Unwind_Resume_or_Rethrow>:
 8000564:	68c2      	ldr	r2, [r0, #12]
 8000566:	b11a      	cbz	r2, 8000570 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000568:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800056a:	640a      	str	r2, [r1, #64]	; 0x40
 800056c:	2200      	movs	r2, #0
 800056e:	e731      	b.n	80003d4 <unwind_phase2_forced>
 8000570:	e79c      	b.n	80004ac <__gnu_Unwind_RaiseException>
 8000572:	bf00      	nop

08000574 <_Unwind_Complete>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_Unwind_DeleteException>:
 8000578:	6883      	ldr	r3, [r0, #8]
 800057a:	b113      	cbz	r3, 8000582 <_Unwind_DeleteException+0xa>
 800057c:	4601      	mov	r1, r0
 800057e:	2001      	movs	r0, #1
 8000580:	4718      	bx	r3
 8000582:	4770      	bx	lr

08000584 <_Unwind_VRS_Get>:
 8000584:	b500      	push	{lr}
 8000586:	2904      	cmp	r1, #4
 8000588:	d807      	bhi.n	800059a <_Unwind_VRS_Get+0x16>
 800058a:	e8df f001 	tbb	[pc, r1]
 800058e:	0903      	.short	0x0903
 8000590:	0906      	.short	0x0906
 8000592:	09          	.byte	0x09
 8000593:	00          	.byte	0x00
 8000594:	b90b      	cbnz	r3, 800059a <_Unwind_VRS_Get+0x16>
 8000596:	2a0f      	cmp	r2, #15
 8000598:	d905      	bls.n	80005a6 <_Unwind_VRS_Get+0x22>
 800059a:	2002      	movs	r0, #2
 800059c:	f85d fb04 	ldr.w	pc, [sp], #4
 80005a0:	2001      	movs	r0, #1
 80005a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80005a6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80005aa:	4618      	mov	r0, r3
 80005ac:	6853      	ldr	r3, [r2, #4]
 80005ae:	9a01      	ldr	r2, [sp, #4]
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80005b6:	bf00      	nop

080005b8 <_Unwind_GetGR>:
 80005b8:	b510      	push	{r4, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	2300      	movs	r3, #0
 80005be:	ac03      	add	r4, sp, #12
 80005c0:	460a      	mov	r2, r1
 80005c2:	9400      	str	r4, [sp, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f7ff ffdd 	bl	8000584 <_Unwind_VRS_Get>
 80005ca:	9803      	ldr	r0, [sp, #12]
 80005cc:	b004      	add	sp, #16
 80005ce:	bd10      	pop	{r4, pc}

080005d0 <_Unwind_VRS_Set>:
 80005d0:	b500      	push	{lr}
 80005d2:	2904      	cmp	r1, #4
 80005d4:	d807      	bhi.n	80005e6 <_Unwind_VRS_Set+0x16>
 80005d6:	e8df f001 	tbb	[pc, r1]
 80005da:	0903      	.short	0x0903
 80005dc:	0906      	.short	0x0906
 80005de:	09          	.byte	0x09
 80005df:	00          	.byte	0x00
 80005e0:	b90b      	cbnz	r3, 80005e6 <_Unwind_VRS_Set+0x16>
 80005e2:	2a0f      	cmp	r2, #15
 80005e4:	d905      	bls.n	80005f2 <_Unwind_VRS_Set+0x22>
 80005e6:	2002      	movs	r0, #2
 80005e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80005ec:	2001      	movs	r0, #1
 80005ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80005f2:	9901      	ldr	r1, [sp, #4]
 80005f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80005f8:	6809      	ldr	r1, [r1, #0]
 80005fa:	6051      	str	r1, [r2, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000602:	bf00      	nop

08000604 <_Unwind_SetGR>:
 8000604:	b510      	push	{r4, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	ac04      	add	r4, sp, #16
 800060a:	2300      	movs	r3, #0
 800060c:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000610:	460a      	mov	r2, r1
 8000612:	9400      	str	r4, [sp, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f7ff ffdb 	bl	80005d0 <_Unwind_VRS_Set>
 800061a:	b004      	add	sp, #16
 800061c:	bd10      	pop	{r4, pc}
 800061e:	bf00      	nop

08000620 <__gnu_Unwind_Backtrace>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000624:	6413      	str	r3, [r2, #64]	; 0x40
 8000626:	1d15      	adds	r5, r2, #4
 8000628:	4607      	mov	r7, r0
 800062a:	460e      	mov	r6, r1
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000632:	ac17      	add	r4, sp, #92	; 0x5c
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000642:	f04f 35ff 	mov.w	r5, #4294967295
 8000646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800064a:	9516      	str	r5, [sp, #88]	; 0x58
 800064c:	e010      	b.n	8000670 <__gnu_Unwind_Backtrace+0x50>
 800064e:	a816      	add	r0, sp, #88	; 0x58
 8000650:	f7ff ffd8 	bl	8000604 <_Unwind_SetGR>
 8000654:	4631      	mov	r1, r6
 8000656:	a816      	add	r0, sp, #88	; 0x58
 8000658:	47b8      	blx	r7
 800065a:	aa16      	add	r2, sp, #88	; 0x58
 800065c:	4669      	mov	r1, sp
 800065e:	b978      	cbnz	r0, 8000680 <__gnu_Unwind_Backtrace+0x60>
 8000660:	9b04      	ldr	r3, [sp, #16]
 8000662:	2008      	movs	r0, #8
 8000664:	4798      	blx	r3
 8000666:	2805      	cmp	r0, #5
 8000668:	4604      	mov	r4, r0
 800066a:	d00a      	beq.n	8000682 <__gnu_Unwind_Backtrace+0x62>
 800066c:	2809      	cmp	r0, #9
 800066e:	d007      	beq.n	8000680 <__gnu_Unwind_Backtrace+0x60>
 8000670:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000672:	4668      	mov	r0, sp
 8000674:	f7ff fe08 	bl	8000288 <get_eit_entry>
 8000678:	466a      	mov	r2, sp
 800067a:	210c      	movs	r1, #12
 800067c:	2800      	cmp	r0, #0
 800067e:	d0e6      	beq.n	800064e <__gnu_Unwind_Backtrace+0x2e>
 8000680:	2409      	movs	r4, #9
 8000682:	a816      	add	r0, sp, #88	; 0x58
 8000684:	f7ff fe50 	bl	8000328 <restore_non_core_regs>
 8000688:	4620      	mov	r0, r4
 800068a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800068e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000690 <__gnu_unwind_pr_common>:
 8000690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000694:	460d      	mov	r5, r1
 8000696:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000698:	b08b      	sub	sp, #44	; 0x2c
 800069a:	1d0c      	adds	r4, r1, #4
 800069c:	6809      	ldr	r1, [r1, #0]
 800069e:	9107      	str	r1, [sp, #28]
 80006a0:	4691      	mov	r9, r2
 80006a2:	9408      	str	r4, [sp, #32]
 80006a4:	f000 0b03 	and.w	fp, r0, #3
 80006a8:	461e      	mov	r6, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d164      	bne.n	8000778 <__gnu_unwind_pr_common+0xe8>
 80006ae:	0209      	lsls	r1, r1, #8
 80006b0:	2303      	movs	r3, #3
 80006b2:	9107      	str	r1, [sp, #28]
 80006b4:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80006b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80006bc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80006be:	f1bb 0f02 	cmp.w	fp, #2
 80006c2:	bf08      	it	eq
 80006c4:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80006c6:	f013 0301 	ands.w	r3, r3, #1
 80006ca:	d143      	bne.n	8000754 <__gnu_unwind_pr_common+0xc4>
 80006cc:	f000 0008 	and.w	r0, r0, #8
 80006d0:	b2c2      	uxtb	r2, r0
 80006d2:	9203      	str	r2, [sp, #12]
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	6827      	ldr	r7, [r4, #0]
 80006d8:	2f00      	cmp	r7, #0
 80006da:	d03d      	beq.n	8000758 <__gnu_unwind_pr_common+0xc8>
 80006dc:	2e02      	cmp	r6, #2
 80006de:	d047      	beq.n	8000770 <__gnu_unwind_pr_common+0xe0>
 80006e0:	8827      	ldrh	r7, [r4, #0]
 80006e2:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 80006e6:	3404      	adds	r4, #4
 80006e8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80006ea:	f028 0a01 	bic.w	sl, r8, #1
 80006ee:	210f      	movs	r1, #15
 80006f0:	4648      	mov	r0, r9
 80006f2:	449a      	add	sl, r3
 80006f4:	f7ff ff60 	bl	80005b8 <_Unwind_GetGR>
 80006f8:	4582      	cmp	sl, r0
 80006fa:	d837      	bhi.n	800076c <__gnu_unwind_pr_common+0xdc>
 80006fc:	f027 0301 	bic.w	r3, r7, #1
 8000700:	449a      	add	sl, r3
 8000702:	4550      	cmp	r0, sl
 8000704:	bf2c      	ite	cs
 8000706:	2000      	movcs	r0, #0
 8000708:	2001      	movcc	r0, #1
 800070a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800070e:	f008 0802 	and.w	r8, r8, #2
 8000712:	f007 0701 	and.w	r7, r7, #1
 8000716:	ea48 0807 	orr.w	r8, r8, r7
 800071a:	f1b8 0f01 	cmp.w	r8, #1
 800071e:	d041      	beq.n	80007a4 <__gnu_unwind_pr_common+0x114>
 8000720:	d338      	bcc.n	8000794 <__gnu_unwind_pr_common+0x104>
 8000722:	f1b8 0f02 	cmp.w	r8, #2
 8000726:	d11d      	bne.n	8000764 <__gnu_unwind_pr_common+0xd4>
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800072e:	9202      	str	r2, [sp, #8]
 8000730:	f1bb 0f00 	cmp.w	fp, #0
 8000734:	d179      	bne.n	800082a <__gnu_unwind_pr_common+0x19a>
 8000736:	b130      	cbz	r0, 8000746 <__gnu_unwind_pr_common+0xb6>
 8000738:	9903      	ldr	r1, [sp, #12]
 800073a:	2900      	cmp	r1, #0
 800073c:	f000 8081 	beq.w	8000842 <__gnu_unwind_pr_common+0x1b2>
 8000740:	2a00      	cmp	r2, #0
 8000742:	f000 80a8 	beq.w	8000896 <__gnu_unwind_pr_common+0x206>
 8000746:	2b00      	cmp	r3, #0
 8000748:	db79      	blt.n	800083e <__gnu_unwind_pr_common+0x1ae>
 800074a:	9b02      	ldr	r3, [sp, #8]
 800074c:	3301      	adds	r3, #1
 800074e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000752:	e7c0      	b.n	80006d6 <__gnu_unwind_pr_common+0x46>
 8000754:	2300      	movs	r3, #0
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	2e02      	cmp	r6, #2
 800075a:	dd40      	ble.n	80007de <__gnu_unwind_pr_common+0x14e>
 800075c:	f7ff fe16 	bl	800038c <__gnu_unwind_24bit.isra.1>
 8000760:	2800      	cmp	r0, #0
 8000762:	d042      	beq.n	80007ea <__gnu_unwind_pr_common+0x15a>
 8000764:	2009      	movs	r0, #9
 8000766:	b00b      	add	sp, #44	; 0x2c
 8000768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800076c:	2000      	movs	r0, #0
 800076e:	e7cc      	b.n	800070a <__gnu_unwind_pr_common+0x7a>
 8000770:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8000774:	3408      	adds	r4, #8
 8000776:	e7b7      	b.n	80006e8 <__gnu_unwind_pr_common+0x58>
 8000778:	2b02      	cmp	r3, #2
 800077a:	dc9f      	bgt.n	80006bc <__gnu_unwind_pr_common+0x2c>
 800077c:	0c0b      	lsrs	r3, r1, #16
 800077e:	b2da      	uxtb	r2, r3
 8000780:	0409      	lsls	r1, r1, #16
 8000782:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000786:	2302      	movs	r3, #2
 8000788:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800078c:	9107      	str	r1, [sp, #28]
 800078e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000792:	e793      	b.n	80006bc <__gnu_unwind_pr_common+0x2c>
 8000794:	f1bb 0f00 	cmp.w	fp, #0
 8000798:	d002      	beq.n	80007a0 <__gnu_unwind_pr_common+0x110>
 800079a:	2800      	cmp	r0, #0
 800079c:	f040 80b0 	bne.w	8000900 <__gnu_unwind_pr_common+0x270>
 80007a0:	3404      	adds	r4, #4
 80007a2:	e798      	b.n	80006d6 <__gnu_unwind_pr_common+0x46>
 80007a4:	f1bb 0f00 	cmp.w	fp, #0
 80007a8:	d126      	bne.n	80007f8 <__gnu_unwind_pr_common+0x168>
 80007aa:	b1b0      	cbz	r0, 80007da <__gnu_unwind_pr_common+0x14a>
 80007ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80007b0:	1c99      	adds	r1, r3, #2
 80007b2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80007b6:	d0d5      	beq.n	8000764 <__gnu_unwind_pr_common+0xd4>
 80007b8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80007bc:	3301      	adds	r3, #1
 80007be:	9106      	str	r1, [sp, #24]
 80007c0:	f000 8094 	beq.w	80008ec <__gnu_unwind_pr_common+0x25c>
 80007c4:	1d20      	adds	r0, r4, #4
 80007c6:	f7ff fddb 	bl	8000380 <_Unwind_decode_typeinfo_ptr.isra.0>
 80007ca:	ab06      	add	r3, sp, #24
 80007cc:	4601      	mov	r1, r0
 80007ce:	4628      	mov	r0, r5
 80007d0:	f3af 8000 	nop.w
 80007d4:	2800      	cmp	r0, #0
 80007d6:	f040 80b8 	bne.w	800094a <__gnu_unwind_pr_common+0x2ba>
 80007da:	3408      	adds	r4, #8
 80007dc:	e77b      	b.n	80006d6 <__gnu_unwind_pr_common+0x46>
 80007de:	a907      	add	r1, sp, #28
 80007e0:	4648      	mov	r0, r9
 80007e2:	f000 faf3 	bl	8000dcc <__gnu_unwind_execute>
 80007e6:	2800      	cmp	r0, #0
 80007e8:	d1bc      	bne.n	8000764 <__gnu_unwind_pr_common+0xd4>
 80007ea:	9b01      	ldr	r3, [sp, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d15c      	bne.n	80008aa <__gnu_unwind_pr_common+0x21a>
 80007f0:	2008      	movs	r0, #8
 80007f2:	b00b      	add	sp, #44	; 0x2c
 80007f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007f8:	210d      	movs	r1, #13
 80007fa:	4648      	mov	r0, r9
 80007fc:	6a2f      	ldr	r7, [r5, #32]
 80007fe:	f7ff fedb 	bl	80005b8 <_Unwind_GetGR>
 8000802:	4287      	cmp	r7, r0
 8000804:	d1e9      	bne.n	80007da <__gnu_unwind_pr_common+0x14a>
 8000806:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000808:	429c      	cmp	r4, r3
 800080a:	d1e6      	bne.n	80007da <__gnu_unwind_pr_common+0x14a>
 800080c:	4620      	mov	r0, r4
 800080e:	f7ff fced 	bl	80001ec <selfrel_offset31>
 8000812:	210f      	movs	r1, #15
 8000814:	4602      	mov	r2, r0
 8000816:	4648      	mov	r0, r9
 8000818:	f7ff fef4 	bl	8000604 <_Unwind_SetGR>
 800081c:	4648      	mov	r0, r9
 800081e:	462a      	mov	r2, r5
 8000820:	2100      	movs	r1, #0
 8000822:	f7ff feef 	bl	8000604 <_Unwind_SetGR>
 8000826:	2007      	movs	r0, #7
 8000828:	e79d      	b.n	8000766 <__gnu_unwind_pr_common+0xd6>
 800082a:	210d      	movs	r1, #13
 800082c:	4648      	mov	r0, r9
 800082e:	6a2f      	ldr	r7, [r5, #32]
 8000830:	f7ff fec2 	bl	80005b8 <_Unwind_GetGR>
 8000834:	4287      	cmp	r7, r0
 8000836:	d048      	beq.n	80008ca <__gnu_unwind_pr_common+0x23a>
 8000838:	6823      	ldr	r3, [r4, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	da85      	bge.n	800074a <__gnu_unwind_pr_common+0xba>
 800083e:	3404      	adds	r4, #4
 8000840:	e783      	b.n	800074a <__gnu_unwind_pr_common+0xba>
 8000842:	9b02      	ldr	r3, [sp, #8]
 8000844:	b33b      	cbz	r3, 8000896 <__gnu_unwind_pr_common+0x206>
 8000846:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800084a:	1d27      	adds	r7, r4, #4
 800084c:	f8cd b010 	str.w	fp, [sp, #16]
 8000850:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000854:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000858:	9605      	str	r6, [sp, #20]
 800085a:	46a3      	mov	fp, r4
 800085c:	461c      	mov	r4, r3
 800085e:	e002      	b.n	8000866 <__gnu_unwind_pr_common+0x1d6>
 8000860:	45b2      	cmp	sl, r6
 8000862:	46b0      	mov	r8, r6
 8000864:	d016      	beq.n	8000894 <__gnu_unwind_pr_common+0x204>
 8000866:	4638      	mov	r0, r7
 8000868:	9406      	str	r4, [sp, #24]
 800086a:	f7ff fd89 	bl	8000380 <_Unwind_decode_typeinfo_ptr.isra.0>
 800086e:	ab06      	add	r3, sp, #24
 8000870:	4601      	mov	r1, r0
 8000872:	2200      	movs	r2, #0
 8000874:	4628      	mov	r0, r5
 8000876:	f3af 8000 	nop.w
 800087a:	f108 0601 	add.w	r6, r8, #1
 800087e:	3704      	adds	r7, #4
 8000880:	2800      	cmp	r0, #0
 8000882:	d0ed      	beq.n	8000860 <__gnu_unwind_pr_common+0x1d0>
 8000884:	9b02      	ldr	r3, [sp, #8]
 8000886:	9e05      	ldr	r6, [sp, #20]
 8000888:	4543      	cmp	r3, r8
 800088a:	465c      	mov	r4, fp
 800088c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000890:	d1d2      	bne.n	8000838 <__gnu_unwind_pr_common+0x1a8>
 8000892:	e000      	b.n	8000896 <__gnu_unwind_pr_common+0x206>
 8000894:	465c      	mov	r4, fp
 8000896:	4648      	mov	r0, r9
 8000898:	210d      	movs	r1, #13
 800089a:	f7ff fe8d 	bl	80005b8 <_Unwind_GetGR>
 800089e:	9b06      	ldr	r3, [sp, #24]
 80008a0:	6228      	str	r0, [r5, #32]
 80008a2:	62ac      	str	r4, [r5, #40]	; 0x28
 80008a4:	626b      	str	r3, [r5, #36]	; 0x24
 80008a6:	2006      	movs	r0, #6
 80008a8:	e75d      	b.n	8000766 <__gnu_unwind_pr_common+0xd6>
 80008aa:	210f      	movs	r1, #15
 80008ac:	4648      	mov	r0, r9
 80008ae:	f7ff fe83 	bl	80005b8 <_Unwind_GetGR>
 80008b2:	210e      	movs	r1, #14
 80008b4:	4602      	mov	r2, r0
 80008b6:	4648      	mov	r0, r9
 80008b8:	f7ff fea4 	bl	8000604 <_Unwind_SetGR>
 80008bc:	4648      	mov	r0, r9
 80008be:	4a2a      	ldr	r2, [pc, #168]	; (8000968 <__gnu_unwind_pr_common+0x2d8>)
 80008c0:	210f      	movs	r1, #15
 80008c2:	f7ff fe9f 	bl	8000604 <_Unwind_SetGR>
 80008c6:	2007      	movs	r0, #7
 80008c8:	e74d      	b.n	8000766 <__gnu_unwind_pr_common+0xd6>
 80008ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008cc:	429c      	cmp	r4, r3
 80008ce:	d1b3      	bne.n	8000838 <__gnu_unwind_pr_common+0x1a8>
 80008d0:	2204      	movs	r2, #4
 80008d2:	2700      	movs	r7, #0
 80008d4:	18a3      	adds	r3, r4, r2
 80008d6:	9902      	ldr	r1, [sp, #8]
 80008d8:	62a9      	str	r1, [r5, #40]	; 0x28
 80008da:	62ef      	str	r7, [r5, #44]	; 0x2c
 80008dc:	632a      	str	r2, [r5, #48]	; 0x30
 80008de:	636b      	str	r3, [r5, #52]	; 0x34
 80008e0:	6823      	ldr	r3, [r4, #0]
 80008e2:	42bb      	cmp	r3, r7
 80008e4:	db1f      	blt.n	8000926 <__gnu_unwind_pr_common+0x296>
 80008e6:	2301      	movs	r3, #1
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	e72e      	b.n	800074a <__gnu_unwind_pr_common+0xba>
 80008ec:	4648      	mov	r0, r9
 80008ee:	210d      	movs	r1, #13
 80008f0:	f7ff fe62 	bl	80005b8 <_Unwind_GetGR>
 80008f4:	6228      	str	r0, [r5, #32]
 80008f6:	9b06      	ldr	r3, [sp, #24]
 80008f8:	626b      	str	r3, [r5, #36]	; 0x24
 80008fa:	62ac      	str	r4, [r5, #40]	; 0x28
 80008fc:	2006      	movs	r0, #6
 80008fe:	e732      	b.n	8000766 <__gnu_unwind_pr_common+0xd6>
 8000900:	4620      	mov	r0, r4
 8000902:	f7ff fc73 	bl	80001ec <selfrel_offset31>
 8000906:	3404      	adds	r4, #4
 8000908:	4606      	mov	r6, r0
 800090a:	63ac      	str	r4, [r5, #56]	; 0x38
 800090c:	4628      	mov	r0, r5
 800090e:	f3af 8000 	nop.w
 8000912:	2800      	cmp	r0, #0
 8000914:	f43f af26 	beq.w	8000764 <__gnu_unwind_pr_common+0xd4>
 8000918:	4648      	mov	r0, r9
 800091a:	4632      	mov	r2, r6
 800091c:	210f      	movs	r1, #15
 800091e:	f7ff fe71 	bl	8000604 <_Unwind_SetGR>
 8000922:	2007      	movs	r0, #7
 8000924:	e71f      	b.n	8000766 <__gnu_unwind_pr_common+0xd6>
 8000926:	4608      	mov	r0, r1
 8000928:	3001      	adds	r0, #1
 800092a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800092e:	f7ff fc5d 	bl	80001ec <selfrel_offset31>
 8000932:	210f      	movs	r1, #15
 8000934:	4602      	mov	r2, r0
 8000936:	4648      	mov	r0, r9
 8000938:	f7ff fe64 	bl	8000604 <_Unwind_SetGR>
 800093c:	4648      	mov	r0, r9
 800093e:	462a      	mov	r2, r5
 8000940:	4639      	mov	r1, r7
 8000942:	f7ff fe5f 	bl	8000604 <_Unwind_SetGR>
 8000946:	2007      	movs	r0, #7
 8000948:	e70d      	b.n	8000766 <__gnu_unwind_pr_common+0xd6>
 800094a:	4607      	mov	r7, r0
 800094c:	210d      	movs	r1, #13
 800094e:	4648      	mov	r0, r9
 8000950:	f7ff fe32 	bl	80005b8 <_Unwind_GetGR>
 8000954:	2f02      	cmp	r7, #2
 8000956:	6228      	str	r0, [r5, #32]
 8000958:	d1cd      	bne.n	80008f6 <__gnu_unwind_pr_common+0x266>
 800095a:	462b      	mov	r3, r5
 800095c:	9a06      	ldr	r2, [sp, #24]
 800095e:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000962:	626b      	str	r3, [r5, #36]	; 0x24
 8000964:	e7c9      	b.n	80008fa <__gnu_unwind_pr_common+0x26a>
 8000966:	bf00      	nop
 8000968:	00000000 	.word	0x00000000

0800096c <__aeabi_unwind_cpp_pr0>:
 800096c:	2300      	movs	r3, #0
 800096e:	e68f      	b.n	8000690 <__gnu_unwind_pr_common>

08000970 <__aeabi_unwind_cpp_pr1>:
 8000970:	2301      	movs	r3, #1
 8000972:	e68d      	b.n	8000690 <__gnu_unwind_pr_common>

08000974 <__aeabi_unwind_cpp_pr2>:
 8000974:	2302      	movs	r3, #2
 8000976:	e68b      	b.n	8000690 <__gnu_unwind_pr_common>

08000978 <_Unwind_VRS_Pop>:
 8000978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097a:	4604      	mov	r4, r0
 800097c:	b0c5      	sub	sp, #276	; 0x114
 800097e:	2904      	cmp	r1, #4
 8000980:	d80d      	bhi.n	800099e <_Unwind_VRS_Pop+0x26>
 8000982:	e8df f001 	tbb	[pc, r1]
 8000986:	0357      	.short	0x0357
 8000988:	310c      	.short	0x310c
 800098a:	0f          	.byte	0x0f
 800098b:	00          	.byte	0x00
 800098c:	2b01      	cmp	r3, #1
 800098e:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000992:	b295      	uxth	r5, r2
 8000994:	d166      	bne.n	8000a64 <_Unwind_VRS_Pop+0xec>
 8000996:	1972      	adds	r2, r6, r5
 8000998:	2a10      	cmp	r2, #16
 800099a:	f240 809f 	bls.w	8000adc <_Unwind_VRS_Pop+0x164>
 800099e:	2002      	movs	r0, #2
 80009a0:	b045      	add	sp, #276	; 0x114
 80009a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1fa      	bne.n	800099e <_Unwind_VRS_Pop+0x26>
 80009a8:	2a10      	cmp	r2, #16
 80009aa:	d8f8      	bhi.n	800099e <_Unwind_VRS_Pop+0x26>
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	06d8      	lsls	r0, r3, #27
 80009b0:	f100 80c9 	bmi.w	8000b46 <_Unwind_VRS_Pop+0x1ce>
 80009b4:	ae22      	add	r6, sp, #136	; 0x88
 80009b6:	4630      	mov	r0, r6
 80009b8:	9201      	str	r2, [sp, #4]
 80009ba:	f000 f977 	bl	8000cac <__gnu_Unwind_Save_WMMXC>
 80009be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80009c0:	9a01      	ldr	r2, [sp, #4]
 80009c2:	2300      	movs	r3, #0
 80009c4:	2501      	movs	r5, #1
 80009c6:	fa05 f103 	lsl.w	r1, r5, r3
 80009ca:	4211      	tst	r1, r2
 80009cc:	d003      	beq.n	80009d6 <_Unwind_VRS_Pop+0x5e>
 80009ce:	6801      	ldr	r1, [r0, #0]
 80009d0:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80009d4:	3004      	adds	r0, #4
 80009d6:	3301      	adds	r3, #1
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d1f4      	bne.n	80009c6 <_Unwind_VRS_Pop+0x4e>
 80009dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80009de:	4630      	mov	r0, r6
 80009e0:	f000 f95a 	bl	8000c98 <__gnu_Unwind_Restore_WMMXC>
 80009e4:	2000      	movs	r0, #0
 80009e6:	e7db      	b.n	80009a0 <_Unwind_VRS_Pop+0x28>
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d1d8      	bne.n	800099e <_Unwind_VRS_Pop+0x26>
 80009ec:	0c15      	lsrs	r5, r2, #16
 80009ee:	b297      	uxth	r7, r2
 80009f0:	19eb      	adds	r3, r5, r7
 80009f2:	2b10      	cmp	r3, #16
 80009f4:	d8d3      	bhi.n	800099e <_Unwind_VRS_Pop+0x26>
 80009f6:	6823      	ldr	r3, [r4, #0]
 80009f8:	071e      	lsls	r6, r3, #28
 80009fa:	f100 80b8 	bmi.w	8000b6e <_Unwind_VRS_Pop+0x1f6>
 80009fe:	ae22      	add	r6, sp, #136	; 0x88
 8000a00:	4630      	mov	r0, r6
 8000a02:	007f      	lsls	r7, r7, #1
 8000a04:	f000 f926 	bl	8000c54 <__gnu_Unwind_Save_WMMXD>
 8000a08:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8000a0c:	1e7b      	subs	r3, r7, #1
 8000a0e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000a10:	b157      	cbz	r7, 8000a28 <_Unwind_VRS_Pop+0xb0>
 8000a12:	3a04      	subs	r2, #4
 8000a14:	4629      	mov	r1, r5
 8000a16:	f851 0b04 	ldr.w	r0, [r1], #4
 8000a1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	1c58      	adds	r0, r3, #1
 8000a22:	d1f8      	bne.n	8000a16 <_Unwind_VRS_Pop+0x9e>
 8000a24:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8000a28:	4630      	mov	r0, r6
 8000a2a:	63a5      	str	r5, [r4, #56]	; 0x38
 8000a2c:	f000 f8f0 	bl	8000c10 <__gnu_Unwind_Restore_WMMXD>
 8000a30:	2000      	movs	r0, #0
 8000a32:	e7b5      	b.n	80009a0 <_Unwind_VRS_Pop+0x28>
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1b2      	bne.n	800099e <_Unwind_VRS_Pop+0x26>
 8000a38:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000a3a:	b297      	uxth	r7, r2
 8000a3c:	1d20      	adds	r0, r4, #4
 8000a3e:	2601      	movs	r6, #1
 8000a40:	fa06 f103 	lsl.w	r1, r6, r3
 8000a44:	4239      	tst	r1, r7
 8000a46:	f103 0301 	add.w	r3, r3, #1
 8000a4a:	d002      	beq.n	8000a52 <_Unwind_VRS_Pop+0xda>
 8000a4c:	6829      	ldr	r1, [r5, #0]
 8000a4e:	6001      	str	r1, [r0, #0]
 8000a50:	3504      	adds	r5, #4
 8000a52:	2b10      	cmp	r3, #16
 8000a54:	f100 0004 	add.w	r0, r0, #4
 8000a58:	d1f2      	bne.n	8000a40 <_Unwind_VRS_Pop+0xc8>
 8000a5a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000a5e:	d13b      	bne.n	8000ad8 <_Unwind_VRS_Pop+0x160>
 8000a60:	63a5      	str	r5, [r4, #56]	; 0x38
 8000a62:	e79d      	b.n	80009a0 <_Unwind_VRS_Pop+0x28>
 8000a64:	2b05      	cmp	r3, #5
 8000a66:	d19a      	bne.n	800099e <_Unwind_VRS_Pop+0x26>
 8000a68:	1977      	adds	r7, r6, r5
 8000a6a:	2f20      	cmp	r7, #32
 8000a6c:	d897      	bhi.n	800099e <_Unwind_VRS_Pop+0x26>
 8000a6e:	2e0f      	cmp	r6, #15
 8000a70:	d965      	bls.n	8000b3e <_Unwind_VRS_Pop+0x1c6>
 8000a72:	462f      	mov	r7, r5
 8000a74:	2d00      	cmp	r5, #0
 8000a76:	d148      	bne.n	8000b0a <_Unwind_VRS_Pop+0x192>
 8000a78:	462a      	mov	r2, r5
 8000a7a:	2700      	movs	r7, #0
 8000a7c:	2a00      	cmp	r2, #0
 8000a7e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000a80:	dd71      	ble.n	8000b66 <_Unwind_VRS_Pop+0x1ee>
 8000a82:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000a86:	4601      	mov	r1, r0
 8000a88:	a844      	add	r0, sp, #272	; 0x110
 8000a8a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000a8e:	388c      	subs	r0, #140	; 0x8c
 8000a90:	f851 5b04 	ldr.w	r5, [r1], #4
 8000a94:	f840 5f04 	str.w	r5, [r0, #4]!
 8000a98:	4291      	cmp	r1, r2
 8000a9a:	d1f9      	bne.n	8000a90 <_Unwind_VRS_Pop+0x118>
 8000a9c:	4608      	mov	r0, r1
 8000a9e:	b197      	cbz	r7, 8000ac6 <_Unwind_VRS_Pop+0x14e>
 8000aa0:	2e10      	cmp	r6, #16
 8000aa2:	4632      	mov	r2, r6
 8000aa4:	a944      	add	r1, sp, #272	; 0x110
 8000aa6:	bf38      	it	cc
 8000aa8:	2210      	movcc	r2, #16
 8000aaa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000aae:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000ab2:	0079      	lsls	r1, r7, #1
 8000ab4:	3a04      	subs	r2, #4
 8000ab6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000aba:	f850 5b04 	ldr.w	r5, [r0], #4
 8000abe:	f842 5f04 	str.w	r5, [r2, #4]!
 8000ac2:	4281      	cmp	r1, r0
 8000ac4:	d1f9      	bne.n	8000aba <_Unwind_VRS_Pop+0x142>
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d047      	beq.n	8000b5a <_Unwind_VRS_Pop+0x1e2>
 8000aca:	2e0f      	cmp	r6, #15
 8000acc:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ace:	d932      	bls.n	8000b36 <_Unwind_VRS_Pop+0x1be>
 8000ad0:	b117      	cbz	r7, 8000ad8 <_Unwind_VRS_Pop+0x160>
 8000ad2:	a802      	add	r0, sp, #8
 8000ad4:	f000 f894 	bl	8000c00 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ad8:	2000      	movs	r0, #0
 8000ada:	e761      	b.n	80009a0 <_Unwind_VRS_Pop+0x28>
 8000adc:	2e0f      	cmp	r6, #15
 8000ade:	f63f af5e 	bhi.w	800099e <_Unwind_VRS_Pop+0x26>
 8000ae2:	2700      	movs	r7, #0
 8000ae4:	6822      	ldr	r2, [r4, #0]
 8000ae6:	07d1      	lsls	r1, r2, #31
 8000ae8:	d50d      	bpl.n	8000b06 <_Unwind_VRS_Pop+0x18e>
 8000aea:	f022 0101 	bic.w	r1, r2, #1
 8000aee:	2b05      	cmp	r3, #5
 8000af0:	6021      	str	r1, [r4, #0]
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	4620      	mov	r0, r4
 8000af6:	d052      	beq.n	8000b9e <_Unwind_VRS_Pop+0x226>
 8000af8:	f022 0203 	bic.w	r2, r2, #3
 8000afc:	f840 2b48 	str.w	r2, [r0], #72
 8000b00:	f000 f872 	bl	8000be8 <__gnu_Unwind_Save_VFP>
 8000b04:	9b01      	ldr	r3, [sp, #4]
 8000b06:	2f00      	cmp	r7, #0
 8000b08:	d051      	beq.n	8000bae <_Unwind_VRS_Pop+0x236>
 8000b0a:	6822      	ldr	r2, [r4, #0]
 8000b0c:	0751      	lsls	r1, r2, #29
 8000b0e:	d436      	bmi.n	8000b7e <_Unwind_VRS_Pop+0x206>
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d03e      	beq.n	8000b92 <_Unwind_VRS_Pop+0x21a>
 8000b14:	2e0f      	cmp	r6, #15
 8000b16:	d806      	bhi.n	8000b26 <_Unwind_VRS_Pop+0x1ae>
 8000b18:	a822      	add	r0, sp, #136	; 0x88
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	f000 f86c 	bl	8000bf8 <__gnu_Unwind_Save_VFP_D>
 8000b20:	9b01      	ldr	r3, [sp, #4]
 8000b22:	2f00      	cmp	r7, #0
 8000b24:	d0a8      	beq.n	8000a78 <_Unwind_VRS_Pop+0x100>
 8000b26:	a802      	add	r0, sp, #8
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	f000 f86d 	bl	8000c08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b2e:	9b01      	ldr	r3, [sp, #4]
 8000b30:	f1c6 0210 	rsb	r2, r6, #16
 8000b34:	e7a2      	b.n	8000a7c <_Unwind_VRS_Pop+0x104>
 8000b36:	a822      	add	r0, sp, #136	; 0x88
 8000b38:	f000 f85a 	bl	8000bf0 <__gnu_Unwind_Restore_VFP_D>
 8000b3c:	e7c8      	b.n	8000ad0 <_Unwind_VRS_Pop+0x158>
 8000b3e:	2f10      	cmp	r7, #16
 8000b40:	d9cf      	bls.n	8000ae2 <_Unwind_VRS_Pop+0x16a>
 8000b42:	3f10      	subs	r7, #16
 8000b44:	e7ce      	b.n	8000ae4 <_Unwind_VRS_Pop+0x16c>
 8000b46:	f023 0310 	bic.w	r3, r3, #16
 8000b4a:	6023      	str	r3, [r4, #0]
 8000b4c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000b50:	9201      	str	r2, [sp, #4]
 8000b52:	f000 f8ab 	bl	8000cac <__gnu_Unwind_Save_WMMXC>
 8000b56:	9a01      	ldr	r2, [sp, #4]
 8000b58:	e72c      	b.n	80009b4 <_Unwind_VRS_Pop+0x3c>
 8000b5a:	3104      	adds	r1, #4
 8000b5c:	63a1      	str	r1, [r4, #56]	; 0x38
 8000b5e:	a822      	add	r0, sp, #136	; 0x88
 8000b60:	f000 f83e 	bl	8000be0 <__gnu_Unwind_Restore_VFP>
 8000b64:	e7b8      	b.n	8000ad8 <_Unwind_VRS_Pop+0x160>
 8000b66:	2f00      	cmp	r7, #0
 8000b68:	d19a      	bne.n	8000aa0 <_Unwind_VRS_Pop+0x128>
 8000b6a:	4601      	mov	r1, r0
 8000b6c:	e7ab      	b.n	8000ac6 <_Unwind_VRS_Pop+0x14e>
 8000b6e:	f023 0308 	bic.w	r3, r3, #8
 8000b72:	6023      	str	r3, [r4, #0]
 8000b74:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000b78:	f000 f86c 	bl	8000c54 <__gnu_Unwind_Save_WMMXD>
 8000b7c:	e73f      	b.n	80009fe <_Unwind_VRS_Pop+0x86>
 8000b7e:	4620      	mov	r0, r4
 8000b80:	f022 0204 	bic.w	r2, r2, #4
 8000b84:	f840 2bd0 	str.w	r2, [r0], #208
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	f000 f83d 	bl	8000c08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b8e:	9b01      	ldr	r3, [sp, #4]
 8000b90:	e7be      	b.n	8000b10 <_Unwind_VRS_Pop+0x198>
 8000b92:	a822      	add	r0, sp, #136	; 0x88
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	f000 f827 	bl	8000be8 <__gnu_Unwind_Save_VFP>
 8000b9a:	9b01      	ldr	r3, [sp, #4]
 8000b9c:	e7c8      	b.n	8000b30 <_Unwind_VRS_Pop+0x1b8>
 8000b9e:	f041 0102 	orr.w	r1, r1, #2
 8000ba2:	f840 1b48 	str.w	r1, [r0], #72
 8000ba6:	f000 f827 	bl	8000bf8 <__gnu_Unwind_Save_VFP_D>
 8000baa:	9b01      	ldr	r3, [sp, #4]
 8000bac:	e7ab      	b.n	8000b06 <_Unwind_VRS_Pop+0x18e>
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d003      	beq.n	8000bba <_Unwind_VRS_Pop+0x242>
 8000bb2:	2e0f      	cmp	r6, #15
 8000bb4:	f63f af60 	bhi.w	8000a78 <_Unwind_VRS_Pop+0x100>
 8000bb8:	e7ae      	b.n	8000b18 <_Unwind_VRS_Pop+0x1a0>
 8000bba:	a822      	add	r0, sp, #136	; 0x88
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	f000 f813 	bl	8000be8 <__gnu_Unwind_Save_VFP>
 8000bc2:	9b01      	ldr	r3, [sp, #4]
 8000bc4:	e758      	b.n	8000a78 <_Unwind_VRS_Pop+0x100>
 8000bc6:	bf00      	nop

08000bc8 <__restore_core_regs>:
 8000bc8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000bcc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000bd0:	469c      	mov	ip, r3
 8000bd2:	46a6      	mov	lr, r4
 8000bd4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000bd8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000bdc:	46e5      	mov	sp, ip
 8000bde:	bd00      	pop	{pc}

08000be0 <__gnu_Unwind_Restore_VFP>:
 8000be0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__gnu_Unwind_Save_VFP>:
 8000be8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__gnu_Unwind_Restore_VFP_D>:
 8000bf0:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__gnu_Unwind_Save_VFP_D>:
 8000bf8:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000c00:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000c08:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__gnu_Unwind_Restore_WMMXD>:
 8000c10:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c14:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c18:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c1c:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c20:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c24:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c28:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c2c:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c30:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c34:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c38:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c3c:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c40:	ecf0 c102 	ldfp	f4, [r0], #8
 8000c44:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c48:	ecf0 e102 	ldfp	f6, [r0], #8
 8000c4c:	ecf0 f102 	ldfp	f7, [r0], #8
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__gnu_Unwind_Save_WMMXD>:
 8000c54:	ece0 0102 	stfe	f0, [r0], #8
 8000c58:	ece0 1102 	stfe	f1, [r0], #8
 8000c5c:	ece0 2102 	stfe	f2, [r0], #8
 8000c60:	ece0 3102 	stfe	f3, [r0], #8
 8000c64:	ece0 4102 	stfe	f4, [r0], #8
 8000c68:	ece0 5102 	stfe	f5, [r0], #8
 8000c6c:	ece0 6102 	stfe	f6, [r0], #8
 8000c70:	ece0 7102 	stfe	f7, [r0], #8
 8000c74:	ece0 8102 	stfp	f0, [r0], #8
 8000c78:	ece0 9102 	stfp	f1, [r0], #8
 8000c7c:	ece0 a102 	stfp	f2, [r0], #8
 8000c80:	ece0 b102 	stfp	f3, [r0], #8
 8000c84:	ece0 c102 	stfp	f4, [r0], #8
 8000c88:	ece0 d102 	stfp	f5, [r0], #8
 8000c8c:	ece0 e102 	stfp	f6, [r0], #8
 8000c90:	ece0 f102 	stfp	f7, [r0], #8
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__gnu_Unwind_Restore_WMMXC>:
 8000c98:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c9c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000ca0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000ca4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <__gnu_Unwind_Save_WMMXC>:
 8000cac:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000cb0:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000cb4:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000cb8:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <_Unwind_RaiseException>:
 8000cc0:	46ec      	mov	ip, sp
 8000cc2:	b500      	push	{lr}
 8000cc4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cc8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cd4:	a901      	add	r1, sp, #4
 8000cd6:	f7ff fbe9 	bl	80004ac <__gnu_Unwind_RaiseException>
 8000cda:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cde:	b012      	add	sp, #72	; 0x48
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <_Unwind_Resume>:
 8000ce4:	46ec      	mov	ip, sp
 8000ce6:	b500      	push	{lr}
 8000ce8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cf8:	a901      	add	r1, sp, #4
 8000cfa:	f7ff fc11 	bl	8000520 <__gnu_Unwind_Resume>
 8000cfe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d02:	b012      	add	sp, #72	; 0x48
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <_Unwind_Resume_or_Rethrow>:
 8000d08:	46ec      	mov	ip, sp
 8000d0a:	b500      	push	{lr}
 8000d0c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d10:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d1c:	a901      	add	r1, sp, #4
 8000d1e:	f7ff fc21 	bl	8000564 <__gnu_Unwind_Resume_or_Rethrow>
 8000d22:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d26:	b012      	add	sp, #72	; 0x48
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <_Unwind_ForcedUnwind>:
 8000d2c:	46ec      	mov	ip, sp
 8000d2e:	b500      	push	{lr}
 8000d30:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d40:	ab01      	add	r3, sp, #4
 8000d42:	f7ff fbe3 	bl	800050c <__gnu_Unwind_ForcedUnwind>
 8000d46:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d4a:	b012      	add	sp, #72	; 0x48
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <_Unwind_Backtrace>:
 8000d50:	46ec      	mov	ip, sp
 8000d52:	b500      	push	{lr}
 8000d54:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d64:	aa01      	add	r2, sp, #4
 8000d66:	f7ff fc5b 	bl	8000620 <__gnu_Unwind_Backtrace>
 8000d6a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d6e:	b012      	add	sp, #72	; 0x48
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <next_unwind_byte>:
 8000d74:	7a03      	ldrb	r3, [r0, #8]
 8000d76:	b91b      	cbnz	r3, 8000d80 <next_unwind_byte+0xc>
 8000d78:	7a43      	ldrb	r3, [r0, #9]
 8000d7a:	b943      	cbnz	r3, 8000d8e <next_unwind_byte+0x1a>
 8000d7c:	20b0      	movs	r0, #176	; 0xb0
 8000d7e:	4770      	bx	lr
 8000d80:	1e5a      	subs	r2, r3, #1
 8000d82:	6803      	ldr	r3, [r0, #0]
 8000d84:	7202      	strb	r2, [r0, #8]
 8000d86:	021a      	lsls	r2, r3, #8
 8000d88:	6002      	str	r2, [r0, #0]
 8000d8a:	0e18      	lsrs	r0, r3, #24
 8000d8c:	4770      	bx	lr
 8000d8e:	6842      	ldr	r2, [r0, #4]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	b410      	push	{r4}
 8000d94:	7243      	strb	r3, [r0, #9]
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	2103      	movs	r1, #3
 8000d9a:	1d14      	adds	r4, r2, #4
 8000d9c:	7201      	strb	r1, [r0, #8]
 8000d9e:	021a      	lsls	r2, r3, #8
 8000da0:	6044      	str	r4, [r0, #4]
 8000da2:	6002      	str	r2, [r0, #0]
 8000da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000da8:	0e18      	lsrs	r0, r3, #24
 8000daa:	4770      	bx	lr

08000dac <_Unwind_GetGR.constprop.0>:
 8000dac:	b500      	push	{lr}
 8000dae:	b085      	sub	sp, #20
 8000db0:	aa03      	add	r2, sp, #12
 8000db2:	2300      	movs	r3, #0
 8000db4:	9200      	str	r2, [sp, #0]
 8000db6:	4619      	mov	r1, r3
 8000db8:	220c      	movs	r2, #12
 8000dba:	f7ff fbe3 	bl	8000584 <_Unwind_VRS_Get>
 8000dbe:	9803      	ldr	r0, [sp, #12]
 8000dc0:	b005      	add	sp, #20
 8000dc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dc6:	bf00      	nop

08000dc8 <unwind_UCB_from_context>:
 8000dc8:	e7f0      	b.n	8000dac <_Unwind_GetGR.constprop.0>
 8000dca:	bf00      	nop

08000dcc <__gnu_unwind_execute>:
 8000dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dd0:	4606      	mov	r6, r0
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	460d      	mov	r5, r1
 8000dd6:	f04f 0800 	mov.w	r8, #0
 8000dda:	4628      	mov	r0, r5
 8000ddc:	f7ff ffca 	bl	8000d74 <next_unwind_byte>
 8000de0:	28b0      	cmp	r0, #176	; 0xb0
 8000de2:	4604      	mov	r4, r0
 8000de4:	f000 80b4 	beq.w	8000f50 <__gnu_unwind_execute+0x184>
 8000de8:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
 8000dec:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8000df0:	d020      	beq.n	8000e34 <__gnu_unwind_execute+0x68>
 8000df2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000df6:	2b80      	cmp	r3, #128	; 0x80
 8000df8:	d07a      	beq.n	8000ef0 <__gnu_unwind_execute+0x124>
 8000dfa:	2b90      	cmp	r3, #144	; 0x90
 8000dfc:	d035      	beq.n	8000e6a <__gnu_unwind_execute+0x9e>
 8000dfe:	2ba0      	cmp	r3, #160	; 0xa0
 8000e00:	d048      	beq.n	8000e94 <__gnu_unwind_execute+0xc8>
 8000e02:	2bb0      	cmp	r3, #176	; 0xb0
 8000e04:	d05c      	beq.n	8000ec0 <__gnu_unwind_execute+0xf4>
 8000e06:	2bc0      	cmp	r3, #192	; 0xc0
 8000e08:	f000 8089 	beq.w	8000f1e <__gnu_unwind_execute+0x152>
 8000e0c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e10:	2bd0      	cmp	r3, #208	; 0xd0
 8000e12:	d10b      	bne.n	8000e2c <__gnu_unwind_execute+0x60>
 8000e14:	f000 0207 	and.w	r2, r0, #7
 8000e18:	3201      	adds	r2, #1
 8000e1a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e1e:	2305      	movs	r3, #5
 8000e20:	2101      	movs	r1, #1
 8000e22:	4630      	mov	r0, r6
 8000e24:	f7ff fda8 	bl	8000978 <_Unwind_VRS_Pop>
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	d0d6      	beq.n	8000dda <__gnu_unwind_execute+0xe>
 8000e2c:	2009      	movs	r0, #9
 8000e2e:	b005      	add	sp, #20
 8000e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e34:	f10d 090c 	add.w	r9, sp, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	0087      	lsls	r7, r0, #2
 8000e3c:	f8cd 9000 	str.w	r9, [sp]
 8000e40:	220d      	movs	r2, #13
 8000e42:	4630      	mov	r0, r6
 8000e44:	f7ff fb9e 	bl	8000584 <_Unwind_VRS_Get>
 8000e48:	b2ff      	uxtb	r7, r7
 8000e4a:	9b03      	ldr	r3, [sp, #12]
 8000e4c:	f8cd 9000 	str.w	r9, [sp]
 8000e50:	3704      	adds	r7, #4
 8000e52:	0660      	lsls	r0, r4, #25
 8000e54:	bf4c      	ite	mi
 8000e56:	1bdf      	submi	r7, r3, r7
 8000e58:	18ff      	addpl	r7, r7, r3
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	220d      	movs	r2, #13
 8000e60:	4630      	mov	r0, r6
 8000e62:	9703      	str	r7, [sp, #12]
 8000e64:	f7ff fbb4 	bl	80005d0 <_Unwind_VRS_Set>
 8000e68:	e7b7      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8000e6a:	f000 030d 	and.w	r3, r0, #13
 8000e6e:	2b0d      	cmp	r3, #13
 8000e70:	d0dc      	beq.n	8000e2c <__gnu_unwind_execute+0x60>
 8000e72:	af03      	add	r7, sp, #12
 8000e74:	2300      	movs	r3, #0
 8000e76:	f000 020f 	and.w	r2, r0, #15
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	9700      	str	r7, [sp, #0]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	f7ff fb80 	bl	8000584 <_Unwind_VRS_Get>
 8000e84:	2300      	movs	r3, #0
 8000e86:	9700      	str	r7, [sp, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	220d      	movs	r2, #13
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	f7ff fb9f 	bl	80005d0 <_Unwind_VRS_Set>
 8000e92:	e7a2      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8000e94:	43c2      	mvns	r2, r0
 8000e96:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8000e9a:	f002 0207 	and.w	r2, r2, #7
 8000e9e:	fa43 f202 	asr.w	r2, r3, r2
 8000ea2:	0701      	lsls	r1, r0, #28
 8000ea4:	ea02 0203 	and.w	r2, r2, r3
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	bf48      	it	mi
 8000eae:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	f7ff fd5f 	bl	8000978 <_Unwind_VRS_Pop>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	d1b6      	bne.n	8000e2c <__gnu_unwind_execute+0x60>
 8000ebe:	e78c      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8000ec0:	28b1      	cmp	r0, #177	; 0xb1
 8000ec2:	d04a      	beq.n	8000f5a <__gnu_unwind_execute+0x18e>
 8000ec4:	28b2      	cmp	r0, #178	; 0xb2
 8000ec6:	d053      	beq.n	8000f70 <__gnu_unwind_execute+0x1a4>
 8000ec8:	28b3      	cmp	r0, #179	; 0xb3
 8000eca:	f000 8081 	beq.w	8000fd0 <__gnu_unwind_execute+0x204>
 8000ece:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000ed2:	2bb4      	cmp	r3, #180	; 0xb4
 8000ed4:	d0aa      	beq.n	8000e2c <__gnu_unwind_execute+0x60>
 8000ed6:	f000 0207 	and.w	r2, r0, #7
 8000eda:	3201      	adds	r2, #1
 8000edc:	2301      	movs	r3, #1
 8000ede:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	f7ff fd47 	bl	8000978 <_Unwind_VRS_Pop>
 8000eea:	2800      	cmp	r0, #0
 8000eec:	d19e      	bne.n	8000e2c <__gnu_unwind_execute+0x60>
 8000eee:	e774      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f7ff ff3f 	bl	8000d74 <next_unwind_byte>
 8000ef6:	0224      	lsls	r4, r4, #8
 8000ef8:	4320      	orrs	r0, r4
 8000efa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000efe:	d095      	beq.n	8000e2c <__gnu_unwind_execute+0x60>
 8000f00:	0104      	lsls	r4, r0, #4
 8000f02:	2300      	movs	r3, #0
 8000f04:	b2a2      	uxth	r2, r4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4630      	mov	r0, r6
 8000f0a:	f7ff fd35 	bl	8000978 <_Unwind_VRS_Pop>
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d18c      	bne.n	8000e2c <__gnu_unwind_execute+0x60>
 8000f12:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f16:	bf18      	it	ne
 8000f18:	f04f 0801 	movne.w	r8, #1
 8000f1c:	e75d      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8000f1e:	28c6      	cmp	r0, #198	; 0xc6
 8000f20:	d062      	beq.n	8000fe8 <__gnu_unwind_execute+0x21c>
 8000f22:	28c7      	cmp	r0, #199	; 0xc7
 8000f24:	d06c      	beq.n	8001000 <__gnu_unwind_execute+0x234>
 8000f26:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8000f2c:	d07b      	beq.n	8001026 <__gnu_unwind_execute+0x25a>
 8000f2e:	28c8      	cmp	r0, #200	; 0xc8
 8000f30:	f000 8091 	beq.w	8001056 <__gnu_unwind_execute+0x28a>
 8000f34:	28c9      	cmp	r0, #201	; 0xc9
 8000f36:	f47f af79 	bne.w	8000e2c <__gnu_unwind_execute+0x60>
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	f7ff ff1a 	bl	8000d74 <next_unwind_byte>
 8000f40:	0302      	lsls	r2, r0, #12
 8000f42:	f000 000f 	and.w	r0, r0, #15
 8000f46:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000f4a:	3001      	adds	r0, #1
 8000f4c:	4302      	orrs	r2, r0
 8000f4e:	e766      	b.n	8000e1e <__gnu_unwind_execute+0x52>
 8000f50:	f1b8 0f00 	cmp.w	r8, #0
 8000f54:	d06e      	beq.n	8001034 <__gnu_unwind_execute+0x268>
 8000f56:	2000      	movs	r0, #0
 8000f58:	e769      	b.n	8000e2e <__gnu_unwind_execute+0x62>
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	f7ff ff0a 	bl	8000d74 <next_unwind_byte>
 8000f60:	4602      	mov	r2, r0
 8000f62:	2800      	cmp	r0, #0
 8000f64:	f43f af62 	beq.w	8000e2c <__gnu_unwind_execute+0x60>
 8000f68:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f6c:	d0b9      	beq.n	8000ee2 <__gnu_unwind_execute+0x116>
 8000f6e:	e75d      	b.n	8000e2c <__gnu_unwind_execute+0x60>
 8000f70:	2300      	movs	r3, #0
 8000f72:	f10d 090c 	add.w	r9, sp, #12
 8000f76:	220d      	movs	r2, #13
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f8cd 9000 	str.w	r9, [sp]
 8000f7e:	4630      	mov	r0, r6
 8000f80:	f7ff fb00 	bl	8000584 <_Unwind_VRS_Get>
 8000f84:	4628      	mov	r0, r5
 8000f86:	f7ff fef5 	bl	8000d74 <next_unwind_byte>
 8000f8a:	0602      	lsls	r2, r0, #24
 8000f8c:	f04f 0402 	mov.w	r4, #2
 8000f90:	d50c      	bpl.n	8000fac <__gnu_unwind_execute+0x1e0>
 8000f92:	9b03      	ldr	r3, [sp, #12]
 8000f94:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000f98:	40a0      	lsls	r0, r4
 8000f9a:	4403      	add	r3, r0
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	9303      	str	r3, [sp, #12]
 8000fa0:	f7ff fee8 	bl	8000d74 <next_unwind_byte>
 8000fa4:	0603      	lsls	r3, r0, #24
 8000fa6:	f104 0407 	add.w	r4, r4, #7
 8000faa:	d4f2      	bmi.n	8000f92 <__gnu_unwind_execute+0x1c6>
 8000fac:	9b03      	ldr	r3, [sp, #12]
 8000fae:	f8cd 9000 	str.w	r9, [sp]
 8000fb2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000fb6:	fa00 f204 	lsl.w	r2, r0, r4
 8000fba:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	4414      	add	r4, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	220d      	movs	r2, #13
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	9403      	str	r4, [sp, #12]
 8000fca:	f7ff fb01 	bl	80005d0 <_Unwind_VRS_Set>
 8000fce:	e704      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f7ff fecf 	bl	8000d74 <next_unwind_byte>
 8000fd6:	0301      	lsls	r1, r0, #12
 8000fd8:	f000 000f 	and.w	r0, r0, #15
 8000fdc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000fe0:	1c42      	adds	r2, r0, #1
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	e77c      	b.n	8000ee2 <__gnu_unwind_execute+0x116>
 8000fe8:	4628      	mov	r0, r5
 8000fea:	f7ff fec3 	bl	8000d74 <next_unwind_byte>
 8000fee:	0301      	lsls	r1, r0, #12
 8000ff0:	f000 000f 	and.w	r0, r0, #15
 8000ff4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000ff8:	1c42      	adds	r2, r0, #1
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	e770      	b.n	8000ee2 <__gnu_unwind_execute+0x116>
 8001000:	4628      	mov	r0, r5
 8001002:	f7ff feb7 	bl	8000d74 <next_unwind_byte>
 8001006:	4602      	mov	r2, r0
 8001008:	2800      	cmp	r0, #0
 800100a:	f43f af0f 	beq.w	8000e2c <__gnu_unwind_execute+0x60>
 800100e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001012:	f47f af0b 	bne.w	8000e2c <__gnu_unwind_execute+0x60>
 8001016:	2104      	movs	r1, #4
 8001018:	4630      	mov	r0, r6
 800101a:	f7ff fcad 	bl	8000978 <_Unwind_VRS_Pop>
 800101e:	2800      	cmp	r0, #0
 8001020:	f47f af04 	bne.w	8000e2c <__gnu_unwind_execute+0x60>
 8001024:	e6d9      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8001026:	f000 020f 	and.w	r2, r0, #15
 800102a:	3201      	adds	r2, #1
 800102c:	2303      	movs	r3, #3
 800102e:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001032:	e756      	b.n	8000ee2 <__gnu_unwind_execute+0x116>
 8001034:	ac03      	add	r4, sp, #12
 8001036:	4643      	mov	r3, r8
 8001038:	220e      	movs	r2, #14
 800103a:	4641      	mov	r1, r8
 800103c:	9400      	str	r4, [sp, #0]
 800103e:	4630      	mov	r0, r6
 8001040:	f7ff faa0 	bl	8000584 <_Unwind_VRS_Get>
 8001044:	9400      	str	r4, [sp, #0]
 8001046:	4630      	mov	r0, r6
 8001048:	4643      	mov	r3, r8
 800104a:	220f      	movs	r2, #15
 800104c:	4641      	mov	r1, r8
 800104e:	f7ff fabf 	bl	80005d0 <_Unwind_VRS_Set>
 8001052:	4640      	mov	r0, r8
 8001054:	e6eb      	b.n	8000e2e <__gnu_unwind_execute+0x62>
 8001056:	4628      	mov	r0, r5
 8001058:	f7ff fe8c 	bl	8000d74 <next_unwind_byte>
 800105c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001060:	f000 030f 	and.w	r3, r0, #15
 8001064:	3210      	adds	r2, #16
 8001066:	3301      	adds	r3, #1
 8001068:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800106c:	e6d7      	b.n	8000e1e <__gnu_unwind_execute+0x52>
 800106e:	bf00      	nop

08001070 <__gnu_unwind_frame>:
 8001070:	b510      	push	{r4, lr}
 8001072:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001074:	b084      	sub	sp, #16
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	2003      	movs	r0, #3
 800107a:	f88d 000c 	strb.w	r0, [sp, #12]
 800107e:	79dc      	ldrb	r4, [r3, #7]
 8001080:	f88d 400d 	strb.w	r4, [sp, #13]
 8001084:	0212      	lsls	r2, r2, #8
 8001086:	3308      	adds	r3, #8
 8001088:	4608      	mov	r0, r1
 800108a:	a901      	add	r1, sp, #4
 800108c:	9201      	str	r2, [sp, #4]
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	f7ff fe9c 	bl	8000dcc <__gnu_unwind_execute>
 8001094:	b004      	add	sp, #16
 8001096:	bd10      	pop	{r4, pc}

08001098 <_Unwind_GetRegionStart>:
 8001098:	b508      	push	{r3, lr}
 800109a:	f7ff fe95 	bl	8000dc8 <unwind_UCB_from_context>
 800109e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80010a0:	bd08      	pop	{r3, pc}
 80010a2:	bf00      	nop

080010a4 <_Unwind_GetLanguageSpecificData>:
 80010a4:	b508      	push	{r3, lr}
 80010a6:	f7ff fe8f 	bl	8000dc8 <unwind_UCB_from_context>
 80010aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80010ac:	79d8      	ldrb	r0, [r3, #7]
 80010ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80010b2:	3008      	adds	r0, #8
 80010b4:	bd08      	pop	{r3, pc}
 80010b6:	bf00      	nop

080010b8 <_Unwind_GetTextRelBase>:
 80010b8:	b508      	push	{r3, lr}
 80010ba:	f000 fff5 	bl	80020a8 <abort>
 80010be:	bf00      	nop

080010c0 <_Unwind_GetDataRelBase>:
 80010c0:	b508      	push	{r3, lr}
 80010c2:	f7ff fff9 	bl	80010b8 <_Unwind_GetTextRelBase>
 80010c6:	bf00      	nop

080010c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001100 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010ce:	e003      	b.n	80010d8 <LoopCopyDataInit>

080010d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010d6:	3104      	adds	r1, #4

080010d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010d8:	480b      	ldr	r0, [pc, #44]	; (8001108 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010e0:	d3f6      	bcc.n	80010d0 <CopyDataInit>
  ldr  r2, =_sbss
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010e4:	e002      	b.n	80010ec <LoopFillZerobss>

080010e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010e8:	f842 3b04 	str.w	r3, [r2], #4

080010ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010f0:	d3f9      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010f2:	f000 fe8d 	bl	8001e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f6:	f000 ffb1 	bl	800205c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f000 ff23 	bl	8001f44 <main>
  bx  lr    
 80010fe:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001100:	20030000 	.word	0x20030000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001104:	080022c0 	.word	0x080022c0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800110c:	200000f8 	.word	0x200000f8
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001110:	200000f8 	.word	0x200000f8
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001114:	2000015c 	.word	0x2000015c

08001118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC_IRQHandler>
	...

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	fbb0 f0f3 	udiv	r0, r0, r3
 800112c:	f000 f878 	bl	8001220 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001130:	2200      	movs	r2, #0
 8001132:	4621      	mov	r1, r4
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f83e 	bl	80011b8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800113c:	2000      	movs	r0, #0
 800113e:	bd10      	pop	{r4, pc}
 8001140:	20000000 	.word	0x20000000

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_Init+0x30>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800114e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001156:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800115e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 f817 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff ffd8 	bl	800111c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f000 fe10 	bl	8001d90 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001170:	2000      	movs	r0, #0
 8001172:	bd08      	pop	{r3, pc}
 8001174:	40023c00 	.word	0x40023c00

08001178 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001178:	4a02      	ldr	r2, [pc, #8]	; (8001184 <HAL_IncTick+0xc>)
 800117a:	6813      	ldr	r3, [r2, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000114 	.word	0x20000114

08001188 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001188:	4b01      	ldr	r3, [pc, #4]	; (8001190 <HAL_GetTick+0x8>)
 800118a:	6818      	ldr	r0, [r3, #0]
}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000114 	.word	0x20000114

08001194 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001196:	68d3      	ldr	r3, [r2, #12]
 8001198:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800119c:	041b      	lsls	r3, r3, #16
 800119e:	0c1b      	lsrs	r3, r3, #16
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80011a4:	0200      	lsls	r0, r0, #8
 80011a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80011ae:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80011b0:	60d3      	str	r3, [r2, #12]
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_NVIC_SetPriority+0x60>)
 80011ba:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c0:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c2:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	2c04      	cmp	r4, #4
 80011ca:	bf28      	it	cs
 80011cc:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	2d06      	cmp	r5, #6

  return (
 80011d0:	f04f 0501 	mov.w	r5, #1
 80011d4:	fa05 f404 	lsl.w	r4, r5, r4
 80011d8:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011dc:	bf8c      	ite	hi
 80011de:	3b03      	subhi	r3, #3
 80011e0:	2300      	movls	r3, #0

  return (
 80011e2:	400c      	ands	r4, r1
 80011e4:	409c      	lsls	r4, r3
 80011e6:	fa05 f303 	lsl.w	r3, r5, r3
 80011ea:	3b01      	subs	r3, #1
 80011ec:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80011ee:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80011f0:	ea42 0204 	orr.w	r2, r2, r4
 80011f4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	bfaf      	iteee	ge
 80011fa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	f000 000f 	andlt.w	r0, r0, #15
 8001202:	4b06      	ldrlt	r3, [pc, #24]	; (800121c <HAL_NVIC_SetPriority+0x64>)
 8001204:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	bfa5      	ittet	ge
 8001208:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800120c:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001214:	bd30      	pop	{r4, r5, pc}
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	e000ed14 	.word	0xe000ed14

08001220 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	3801      	subs	r0, #1
 8001222:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001226:	d20a      	bcs.n	800123e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122c:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	21f0      	movs	r1, #240	; 0xf0
 8001230:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800124e:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001250:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001252:	bf0c      	ite	eq
 8001254:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001258:	f022 0204 	bicne.w	r2, r2, #4
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	4770      	bx	lr
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001264:	4770      	bx	lr

08001266 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001266:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001268:	f7ff fffc 	bl	8001264 <HAL_SYSTICK_Callback>
 800126c:	bd08      	pop	{r3, pc}
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	4f70      	ldr	r7, [pc, #448]	; (8001438 <HAL_GPIO_Init+0x1c8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001276:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001278:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8001440 <HAL_GPIO_Init+0x1d0>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001444 <HAL_GPIO_Init+0x1d4>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8001288:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800128a:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 800128c:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800128e:	ea34 0303 	bics.w	r3, r4, r3
 8001292:	f040 80c9 	bne.w	8001428 <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001296:	684d      	ldr	r5, [r1, #4]
 8001298:	f025 0a10 	bic.w	sl, r5, #16
 800129c:	f1ba 0f02 	cmp.w	sl, #2
 80012a0:	d114      	bne.n	80012cc <HAL_GPIO_Init+0x5c>
 80012a2:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 80012a6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80012aa:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ae:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80012b2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80012b6:	230f      	movs	r3, #15
 80012b8:	fa03 f30b 	lsl.w	r3, r3, fp
 80012bc:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80012c0:	690b      	ldr	r3, [r1, #16]
 80012c2:	fa03 f30b 	lsl.w	r3, r3, fp
 80012c6:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 80012c8:	f8c9 3020 	str.w	r3, [r9, #32]
 80012cc:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d0:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	fa09 f90b 	lsl.w	r9, r9, fp
 80012da:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012de:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e2:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e6:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ea:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ee:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f0:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 80012f4:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f6:	d80f      	bhi.n	8001318 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012f8:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fa:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012fc:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001300:	fa06 f60b 	lsl.w	r6, r6, fp
 8001304:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8001306:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001308:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800130a:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130e:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001312:	4096      	lsls	r6, r2
 8001314:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001316:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001318:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131a:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131e:	688b      	ldr	r3, [r1, #8]
 8001320:	fa03 f30b 	lsl.w	r3, r3, fp
 8001324:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8001328:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800132a:	00eb      	lsls	r3, r5, #3
 800132c:	d57c      	bpl.n	8001428 <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	9303      	str	r3, [sp, #12]
 8001332:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001336:	4b41      	ldr	r3, [pc, #260]	; (800143c <HAL_GPIO_Init+0x1cc>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001338:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800133c:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8001340:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8001344:	f022 0903 	bic.w	r9, r2, #3
 8001348:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 800134c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001350:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8001354:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001356:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135c:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001360:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001364:	260f      	movs	r6, #15
 8001366:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800136a:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800136c:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001370:	d024      	beq.n	80013bc <HAL_GPIO_Init+0x14c>
 8001372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001376:	4298      	cmp	r0, r3
 8001378:	d022      	beq.n	80013c0 <HAL_GPIO_Init+0x150>
 800137a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800137e:	4298      	cmp	r0, r3
 8001380:	d020      	beq.n	80013c4 <HAL_GPIO_Init+0x154>
 8001382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001386:	4298      	cmp	r0, r3
 8001388:	d01e      	beq.n	80013c8 <HAL_GPIO_Init+0x158>
 800138a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800138e:	4298      	cmp	r0, r3
 8001390:	d01c      	beq.n	80013cc <HAL_GPIO_Init+0x15c>
 8001392:	4540      	cmp	r0, r8
 8001394:	d01c      	beq.n	80013d0 <HAL_GPIO_Init+0x160>
 8001396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800139a:	4298      	cmp	r0, r3
 800139c:	d01a      	beq.n	80013d4 <HAL_GPIO_Init+0x164>
 800139e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013a2:	4298      	cmp	r0, r3
 80013a4:	d018      	beq.n	80013d8 <HAL_GPIO_Init+0x168>
 80013a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013aa:	4298      	cmp	r0, r3
 80013ac:	d016      	beq.n	80013dc <HAL_GPIO_Init+0x16c>
 80013ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013b2:	4298      	cmp	r0, r3
 80013b4:	bf14      	ite	ne
 80013b6:	230a      	movne	r3, #10
 80013b8:	2309      	moveq	r3, #9
 80013ba:	e010      	b.n	80013de <HAL_GPIO_Init+0x16e>
 80013bc:	2300      	movs	r3, #0
 80013be:	e00e      	b.n	80013de <HAL_GPIO_Init+0x16e>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e00c      	b.n	80013de <HAL_GPIO_Init+0x16e>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e00a      	b.n	80013de <HAL_GPIO_Init+0x16e>
 80013c8:	2303      	movs	r3, #3
 80013ca:	e008      	b.n	80013de <HAL_GPIO_Init+0x16e>
 80013cc:	2304      	movs	r3, #4
 80013ce:	e006      	b.n	80013de <HAL_GPIO_Init+0x16e>
 80013d0:	2305      	movs	r3, #5
 80013d2:	e004      	b.n	80013de <HAL_GPIO_Init+0x16e>
 80013d4:	2306      	movs	r3, #6
 80013d6:	e002      	b.n	80013de <HAL_GPIO_Init+0x16e>
 80013d8:	2307      	movs	r3, #7
 80013da:	e000      	b.n	80013de <HAL_GPIO_Init+0x16e>
 80013dc:	2308      	movs	r3, #8
 80013de:	fa03 f30a 	lsl.w	r3, r3, sl
 80013e2:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e4:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e8:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ec:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80013f0:	bf0c      	ite	eq
 80013f2:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80013f4:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 80013f6:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80013fa:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013fe:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8001402:	bf0c      	ite	eq
 8001404:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001406:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8001408:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140a:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800140c:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001410:	bf0c      	ite	eq
 8001412:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001414:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8001416:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800141a:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800141e:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001420:	bf54      	ite	pl
 8001422:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001424:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8001426:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001428:	3201      	adds	r2, #1
 800142a:	2a10      	cmp	r2, #16
 800142c:	f47f af2c 	bne.w	8001288 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001430:	b005      	add	sp, #20
 8001432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001436:	bf00      	nop
 8001438:	40013c00 	.word	0x40013c00
 800143c:	40020000 	.word	0x40020000
 8001440:	40023800 	.word	0x40023800
 8001444:	40021400 	.word	0x40021400

08001448 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001448:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800144a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800144e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001450:	07d8      	lsls	r0, r3, #31
 8001452:	d403      	bmi.n	800145c <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	0799      	lsls	r1, r3, #30
 8001458:	d44b      	bmi.n	80014f2 <HAL_RCC_OscConfig+0xaa>
 800145a:	e09b      	b.n	8001594 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145c:	4b8c      	ldr	r3, [pc, #560]	; (8001690 <HAL_RCC_OscConfig+0x248>)
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	f002 020c 	and.w	r2, r2, #12
 8001464:	2a04      	cmp	r2, #4
 8001466:	d007      	beq.n	8001478 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001468:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800146a:	f002 020c 	and.w	r2, r2, #12
 800146e:	2a08      	cmp	r2, #8
 8001470:	d10b      	bne.n	800148a <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	025a      	lsls	r2, r3, #9
 8001476:	d508      	bpl.n	800148a <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	4b85      	ldr	r3, [pc, #532]	; (8001690 <HAL_RCC_OscConfig+0x248>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	039b      	lsls	r3, r3, #14
 800147e:	d5e9      	bpl.n	8001454 <HAL_RCC_OscConfig+0xc>
 8001480:	6863      	ldr	r3, [r4, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1e6      	bne.n	8001454 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8001486:	2001      	movs	r0, #1
 8001488:	e164      	b.n	8001754 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148a:	6863      	ldr	r3, [r4, #4]
 800148c:	4d80      	ldr	r5, [pc, #512]	; (8001690 <HAL_RCC_OscConfig+0x248>)
 800148e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001492:	d006      	beq.n	80014a2 <HAL_RCC_OscConfig+0x5a>
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001498:	d108      	bne.n	80014ac <HAL_RCC_OscConfig+0x64>
 800149a:	682b      	ldr	r3, [r5, #0]
 800149c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a0:	602b      	str	r3, [r5, #0]
 80014a2:	682b      	ldr	r3, [r5, #0]
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	602b      	str	r3, [r5, #0]
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x76>
 80014ac:	682a      	ldr	r2, [r5, #0]
 80014ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014b2:	602a      	str	r2, [r5, #0]
 80014b4:	682a      	ldr	r2, [r5, #0]
 80014b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014ba:	602a      	str	r2, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014bc:	b16b      	cbz	r3, 80014da <HAL_RCC_OscConfig+0x92>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014be:	f7ff fe63 	bl	8001188 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4d73      	ldr	r5, [pc, #460]	; (8001690 <HAL_RCC_OscConfig+0x248>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	039f      	lsls	r7, r3, #14
 80014ca:	d4c3      	bmi.n	8001454 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fe5c 	bl	8001188 <HAL_GetTick>
 80014d0:	1b80      	subs	r0, r0, r6
 80014d2:	2864      	cmp	r0, #100	; 0x64
 80014d4:	d9f7      	bls.n	80014c6 <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_TIMEOUT;
 80014d6:	2003      	movs	r0, #3
 80014d8:	e13c      	b.n	8001754 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014da:	f7ff fe55 	bl	8001188 <HAL_GetTick>
 80014de:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e0:	682b      	ldr	r3, [r5, #0]
 80014e2:	0398      	lsls	r0, r3, #14
 80014e4:	d5b6      	bpl.n	8001454 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e6:	f7ff fe4f 	bl	8001188 <HAL_GetTick>
 80014ea:	1b80      	subs	r0, r0, r6
 80014ec:	2864      	cmp	r0, #100	; 0x64
 80014ee:	d9f7      	bls.n	80014e0 <HAL_RCC_OscConfig+0x98>
 80014f0:	e7f1      	b.n	80014d6 <HAL_RCC_OscConfig+0x8e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f2:	4b67      	ldr	r3, [pc, #412]	; (8001690 <HAL_RCC_OscConfig+0x248>)
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	f012 0f0c 	tst.w	r2, #12
 80014fa:	d007      	beq.n	800150c <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fc:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014fe:	f002 020c 	and.w	r2, r2, #12
 8001502:	2a08      	cmp	r2, #8
 8001504:	d117      	bne.n	8001536 <HAL_RCC_OscConfig+0xee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	0259      	lsls	r1, r3, #9
 800150a:	d414      	bmi.n	8001536 <HAL_RCC_OscConfig+0xee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150c:	4b60      	ldr	r3, [pc, #384]	; (8001690 <HAL_RCC_OscConfig+0x248>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	0792      	lsls	r2, r2, #30
 8001512:	d502      	bpl.n	800151a <HAL_RCC_OscConfig+0xd2>
 8001514:	68e2      	ldr	r2, [r4, #12]
 8001516:	2a01      	cmp	r2, #1
 8001518:	d1b5      	bne.n	8001486 <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151a:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	21f8      	movs	r1, #248	; 0xf8
 800151e:	fa91 f1a1 	rbit	r1, r1
 8001522:	6920      	ldr	r0, [r4, #16]
 8001524:	fab1 f181 	clz	r1, r1
 8001528:	fa00 f101 	lsl.w	r1, r0, r1
 800152c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001534:	e02e      	b.n	8001594 <HAL_RCC_OscConfig+0x14c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001536:	68e2      	ldr	r2, [r4, #12]
 8001538:	4b56      	ldr	r3, [pc, #344]	; (8001694 <HAL_RCC_OscConfig+0x24c>)
 800153a:	b1ea      	cbz	r2, 8001578 <HAL_RCC_OscConfig+0x130>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fe22 	bl	8001188 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001544:	4d52      	ldr	r5, [pc, #328]	; (8001690 <HAL_RCC_OscConfig+0x248>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001548:	682b      	ldr	r3, [r5, #0]
 800154a:	4851      	ldr	r0, [pc, #324]	; (8001690 <HAL_RCC_OscConfig+0x248>)
 800154c:	079b      	lsls	r3, r3, #30
 800154e:	d405      	bmi.n	800155c <HAL_RCC_OscConfig+0x114>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001550:	f7ff fe1a 	bl	8001188 <HAL_GetTick>
 8001554:	1b80      	subs	r0, r0, r6
 8001556:	2802      	cmp	r0, #2
 8001558:	d9f6      	bls.n	8001548 <HAL_RCC_OscConfig+0x100>
 800155a:	e7bc      	b.n	80014d6 <HAL_RCC_OscConfig+0x8e>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	6803      	ldr	r3, [r0, #0]
 800155e:	22f8      	movs	r2, #248	; 0xf8
 8001560:	fa92 f2a2 	rbit	r2, r2
 8001564:	6921      	ldr	r1, [r4, #16]
 8001566:	fab2 f282 	clz	r2, r2
 800156a:	fa01 f202 	lsl.w	r2, r1, r2
 800156e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001572:	4313      	orrs	r3, r2
 8001574:	6003      	str	r3, [r0, #0]
 8001576:	e00d      	b.n	8001594 <HAL_RCC_OscConfig+0x14c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fe05 	bl	8001188 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	4d44      	ldr	r5, [pc, #272]	; (8001690 <HAL_RCC_OscConfig+0x248>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	682b      	ldr	r3, [r5, #0]
 8001584:	079f      	lsls	r7, r3, #30
 8001586:	d505      	bpl.n	8001594 <HAL_RCC_OscConfig+0x14c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff fdfe 	bl	8001188 <HAL_GetTick>
 800158c:	1b80      	subs	r0, r0, r6
 800158e:	2802      	cmp	r0, #2
 8001590:	d9f7      	bls.n	8001582 <HAL_RCC_OscConfig+0x13a>
 8001592:	e7a0      	b.n	80014d6 <HAL_RCC_OscConfig+0x8e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	071e      	lsls	r6, r3, #28
 8001598:	d403      	bmi.n	80015a2 <HAL_RCC_OscConfig+0x15a>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	075d      	lsls	r5, r3, #29
 800159e:	d548      	bpl.n	8001632 <HAL_RCC_OscConfig+0x1ea>
 80015a0:	e01f      	b.n	80015e2 <HAL_RCC_OscConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015a2:	6962      	ldr	r2, [r4, #20]
 80015a4:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <HAL_RCC_OscConfig+0x250>)
 80015a6:	b172      	cbz	r2, 80015c6 <HAL_RCC_OscConfig+0x17e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fdec 	bl	8001188 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b0:	4d37      	ldr	r5, [pc, #220]	; (8001690 <HAL_RCC_OscConfig+0x248>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b2:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015b6:	0798      	lsls	r0, r3, #30
 80015b8:	d4ef      	bmi.n	800159a <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff fde5 	bl	8001188 <HAL_GetTick>
 80015be:	1b80      	subs	r0, r0, r6
 80015c0:	2802      	cmp	r0, #2
 80015c2:	d9f7      	bls.n	80015b4 <HAL_RCC_OscConfig+0x16c>
 80015c4:	e787      	b.n	80014d6 <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fdde 	bl	8001188 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	4d30      	ldr	r5, [pc, #192]	; (8001690 <HAL_RCC_OscConfig+0x248>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ce:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015d2:	0799      	lsls	r1, r3, #30
 80015d4:	d5e1      	bpl.n	800159a <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fdd7 	bl	8001188 <HAL_GetTick>
 80015da:	1b80      	subs	r0, r0, r6
 80015dc:	2802      	cmp	r0, #2
 80015de:	d9f7      	bls.n	80015d0 <HAL_RCC_OscConfig+0x188>
 80015e0:	e779      	b.n	80014d6 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_RCC_OscConfig+0x248>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80015e8:	4d2c      	ldr	r5, [pc, #176]	; (800169c <HAL_RCC_OscConfig+0x254>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80015fc:	682b      	ldr	r3, [r5, #0]
 80015fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001602:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001604:	f7ff fdc0 	bl	8001188 <HAL_GetTick>
 8001608:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800160a:	682b      	ldr	r3, [r5, #0]
 800160c:	05da      	lsls	r2, r3, #23
 800160e:	d513      	bpl.n	8001638 <HAL_RCC_OscConfig+0x1f0>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001610:	68a3      	ldr	r3, [r4, #8]
 8001612:	4d1f      	ldr	r5, [pc, #124]	; (8001690 <HAL_RCC_OscConfig+0x248>)
 8001614:	2b01      	cmp	r3, #1
 8001616:	d115      	bne.n	8001644 <HAL_RCC_OscConfig+0x1fc>
 8001618:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fdb2 	bl	8001188 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001624:	4d1a      	ldr	r5, [pc, #104]	; (8001690 <HAL_RCC_OscConfig+0x248>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001626:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800162e:	079b      	lsls	r3, r3, #30
 8001630:	d519      	bpl.n	8001666 <HAL_RCC_OscConfig+0x21e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001632:	69a2      	ldr	r2, [r4, #24]
 8001634:	bba2      	cbnz	r2, 80016a0 <HAL_RCC_OscConfig+0x258>
 8001636:	e072      	b.n	800171e <HAL_RCC_OscConfig+0x2d6>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001638:	f7ff fda6 	bl	8001188 <HAL_GetTick>
 800163c:	1b80      	subs	r0, r0, r6
 800163e:	2802      	cmp	r0, #2
 8001640:	d9e3      	bls.n	800160a <HAL_RCC_OscConfig+0x1c2>
 8001642:	e748      	b.n	80014d6 <HAL_RCC_OscConfig+0x8e>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001644:	2b05      	cmp	r3, #5
 8001646:	d104      	bne.n	8001652 <HAL_RCC_OscConfig+0x20a>
 8001648:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	672b      	str	r3, [r5, #112]	; 0x70
 8001650:	e7e2      	b.n	8001618 <HAL_RCC_OscConfig+0x1d0>
 8001652:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	672a      	str	r2, [r5, #112]	; 0x70
 800165a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800165c:	f022 0204 	bic.w	r2, r2, #4
 8001660:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001662:	b133      	cbz	r3, 8001672 <HAL_RCC_OscConfig+0x22a>
 8001664:	e7dc      	b.n	8001620 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff fd8f 	bl	8001188 <HAL_GetTick>
 800166a:	1b80      	subs	r0, r0, r6
 800166c:	42b8      	cmp	r0, r7
 800166e:	d9dd      	bls.n	800162c <HAL_RCC_OscConfig+0x1e4>
 8001670:	e731      	b.n	80014d6 <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff fd89 	bl	8001188 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167a:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800167e:	0798      	lsls	r0, r3, #30
 8001680:	d5d7      	bpl.n	8001632 <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff fd81 	bl	8001188 <HAL_GetTick>
 8001686:	1b80      	subs	r0, r0, r6
 8001688:	42b8      	cmp	r0, r7
 800168a:	d9f7      	bls.n	800167c <HAL_RCC_OscConfig+0x234>
 800168c:	e723      	b.n	80014d6 <HAL_RCC_OscConfig+0x8e>
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	42470000 	.word	0x42470000
 8001698:	42470e80 	.word	0x42470e80
 800169c:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016a0:	4d2e      	ldr	r5, [pc, #184]	; (800175c <HAL_RCC_OscConfig+0x314>)
 80016a2:	68ab      	ldr	r3, [r5, #8]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	f43f aeec 	beq.w	8001486 <HAL_RCC_OscConfig+0x3e>
 80016ae:	4e2c      	ldr	r6, [pc, #176]	; (8001760 <HAL_RCC_OscConfig+0x318>)
 80016b0:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b2:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b4:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b6:	d141      	bne.n	800173c <HAL_RCC_OscConfig+0x2f4>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fd66 	bl	8001188 <HAL_GetTick>
 80016bc:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016be:	682b      	ldr	r3, [r5, #0]
 80016c0:	4f26      	ldr	r7, [pc, #152]	; (800175c <HAL_RCC_OscConfig+0x314>)
 80016c2:	0199      	lsls	r1, r3, #6
 80016c4:	d42d      	bmi.n	8001722 <HAL_RCC_OscConfig+0x2da>
 80016c6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80016ca:	fa92 f2a2 	rbit	r2, r2
 80016ce:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d2:	fab2 fe82 	clz	lr, r2
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80016de:	fab3 f583 	clz	r5, r3
 80016e2:	fa92 f2a2 	rbit	r2, r2
 80016e6:	69e0      	ldr	r0, [r4, #28]
 80016e8:	6a23      	ldr	r3, [r4, #32]
 80016ea:	fab2 f182 	clz	r1, r2
 80016ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016f0:	4303      	orrs	r3, r0
 80016f2:	fa02 f20e 	lsl.w	r2, r2, lr
 80016f6:	ea43 0002 	orr.w	r0, r3, r2
 80016fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016fc:	085a      	lsrs	r2, r3, #1
 80016fe:	3a01      	subs	r2, #1
 8001700:	fa02 f305 	lsl.w	r3, r2, r5
 8001704:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001706:	4303      	orrs	r3, r0
 8001708:	408a      	lsls	r2, r1
 800170a:	4313      	orrs	r3, r2
 800170c:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170e:	2301      	movs	r3, #1
 8001710:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fd39 	bl	8001188 <HAL_GetTick>
 8001716:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	019a      	lsls	r2, r3, #6
 800171c:	d508      	bpl.n	8001730 <HAL_RCC_OscConfig+0x2e8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800171e:	2000      	movs	r0, #0
 8001720:	e018      	b.n	8001754 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001722:	f7ff fd31 	bl	8001188 <HAL_GetTick>
 8001726:	ebc8 0000 	rsb	r0, r8, r0
 800172a:	2802      	cmp	r0, #2
 800172c:	d9c7      	bls.n	80016be <HAL_RCC_OscConfig+0x276>
 800172e:	e6d2      	b.n	80014d6 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001730:	f7ff fd2a 	bl	8001188 <HAL_GetTick>
 8001734:	1b00      	subs	r0, r0, r4
 8001736:	2802      	cmp	r0, #2
 8001738:	d9ee      	bls.n	8001718 <HAL_RCC_OscConfig+0x2d0>
 800173a:	e6cc      	b.n	80014d6 <HAL_RCC_OscConfig+0x8e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fd24 	bl	8001188 <HAL_GetTick>
 8001740:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001742:	682b      	ldr	r3, [r5, #0]
 8001744:	019b      	lsls	r3, r3, #6
 8001746:	d5ea      	bpl.n	800171e <HAL_RCC_OscConfig+0x2d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001748:	f7ff fd1e 	bl	8001188 <HAL_GetTick>
 800174c:	1b00      	subs	r0, r0, r4
 800174e:	2802      	cmp	r0, #2
 8001750:	d9f7      	bls.n	8001742 <HAL_RCC_OscConfig+0x2fa>
 8001752:	e6c0      	b.n	80014d6 <HAL_RCC_OscConfig+0x8e>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001754:	b002      	add	sp, #8
 8001756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	42470060 	.word	0x42470060

08001764 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001764:	491b      	ldr	r1, [pc, #108]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x70>)
 8001766:	688b      	ldr	r3, [r1, #8]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b04      	cmp	r3, #4
 800176e:	d02c      	beq.n	80017ca <HAL_RCC_GetSysClockFreq+0x66>
 8001770:	2b08      	cmp	r3, #8
 8001772:	d12c      	bne.n	80017ce <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001774:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001776:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001778:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800177c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001780:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001784:	684b      	ldr	r3, [r1, #4]
 8001786:	fa92 f2a2 	rbit	r2, r2
 800178a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800178e:	fab2 f282 	clz	r2, r2
 8001792:	ea01 0103 	and.w	r1, r1, r3
 8001796:	fa21 f102 	lsr.w	r1, r1, r2
 800179a:	bf14      	ite	ne
 800179c:	4a0e      	ldrne	r2, [pc, #56]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800179e:	4a0f      	ldreq	r2, [pc, #60]	; (80017dc <HAL_RCC_GetSysClockFreq+0x78>)
 80017a0:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80017a6:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80017aa:	6852      	ldr	r2, [r2, #4]
 80017ac:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80017b0:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80017b4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80017b8:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80017bc:	fa22 f000 	lsr.w	r0, r2, r0
 80017c0:	3001      	adds	r0, #1
 80017c2:	0040      	lsls	r0, r0, #1
 80017c4:	fbb3 f0f0 	udiv	r0, r3, r0
 80017c8:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ca:	4803      	ldr	r0, [pc, #12]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x74>)
 80017cc:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ce:	4803      	ldr	r0, [pc, #12]	; (80017dc <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	016e3600 	.word	0x016e3600
 80017dc:	00f42400 	.word	0x00f42400

080017e0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017e0:	4b55      	ldr	r3, [pc, #340]	; (8001938 <HAL_RCC_ClockConfig+0x158>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	f002 020f 	and.w	r2, r2, #15
 80017e8:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ee:	4605      	mov	r5, r0
 80017f0:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017f2:	d30a      	bcc.n	800180a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	6829      	ldr	r1, [r5, #0]
 80017f6:	0788      	lsls	r0, r1, #30
 80017f8:	d511      	bpl.n	800181e <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fa:	4850      	ldr	r0, [pc, #320]	; (800193c <HAL_RCC_ClockConfig+0x15c>)
 80017fc:	6883      	ldr	r3, [r0, #8]
 80017fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001802:	68ab      	ldr	r3, [r5, #8]
 8001804:	4313      	orrs	r3, r2
 8001806:	6083      	str	r3, [r0, #8]
 8001808:	e009      	b.n	800181e <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	4299      	cmp	r1, r3
 8001816:	d0ed      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
 800181a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	07c9      	lsls	r1, r1, #31
 8001820:	d406      	bmi.n	8001830 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001822:	4b45      	ldr	r3, [pc, #276]	; (8001938 <HAL_RCC_ClockConfig+0x158>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	f002 020f 	and.w	r2, r2, #15
 800182a:	4296      	cmp	r6, r2
 800182c:	d351      	bcc.n	80018d2 <HAL_RCC_ClockConfig+0xf2>
 800182e:	e057      	b.n	80018e0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001830:	686b      	ldr	r3, [r5, #4]
 8001832:	4a42      	ldr	r2, [pc, #264]	; (800193c <HAL_RCC_ClockConfig+0x15c>)
 8001834:	2b01      	cmp	r3, #1
 8001836:	d103      	bne.n	8001840 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800183e:	e008      	b.n	8001852 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001840:	1e99      	subs	r1, r3, #2
 8001842:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001844:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001846:	d802      	bhi.n	800184e <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001848:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800184c:	e001      	b.n	8001852 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184e:	f012 0f02 	tst.w	r2, #2
 8001852:	d0e1      	beq.n	8001818 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001854:	4c39      	ldr	r4, [pc, #228]	; (800193c <HAL_RCC_ClockConfig+0x15c>)
 8001856:	68a2      	ldr	r2, [r4, #8]
 8001858:	f022 0203 	bic.w	r2, r2, #3
 800185c:	4313      	orrs	r3, r2
 800185e:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001860:	f7ff fc92 	bl	8001188 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001864:	686b      	ldr	r3, [r5, #4]
 8001866:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001868:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186a:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186e:	d10c      	bne.n	800188a <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001870:	68a3      	ldr	r3, [r4, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b04      	cmp	r3, #4
 8001878:	d0d3      	beq.n	8001822 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187a:	f7ff fc85 	bl	8001188 <HAL_GetTick>
 800187e:	1bc0      	subs	r0, r0, r7
 8001880:	4540      	cmp	r0, r8
 8001882:	d9f5      	bls.n	8001870 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8001884:	2003      	movs	r0, #3
 8001886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188a:	2b02      	cmp	r3, #2
 800188c:	d10a      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800188e:	68a3      	ldr	r3, [r4, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d0c4      	beq.n	8001822 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001898:	f7ff fc76 	bl	8001188 <HAL_GetTick>
 800189c:	1bc0      	subs	r0, r0, r7
 800189e:	4540      	cmp	r0, r8
 80018a0:	d9f5      	bls.n	800188e <HAL_RCC_ClockConfig+0xae>
 80018a2:	e7ef      	b.n	8001884 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d10f      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80018a8:	68a3      	ldr	r3, [r4, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	d0b7      	beq.n	8001822 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b2:	f7ff fc69 	bl	8001188 <HAL_GetTick>
 80018b6:	1bc0      	subs	r0, r0, r7
 80018b8:	4540      	cmp	r0, r8
 80018ba:	d9f5      	bls.n	80018a8 <HAL_RCC_ClockConfig+0xc8>
 80018bc:	e7e2      	b.n	8001884 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018be:	f7ff fc63 	bl	8001188 <HAL_GetTick>
 80018c2:	1bc0      	subs	r0, r0, r7
 80018c4:	4540      	cmp	r0, r8
 80018c6:	d8dd      	bhi.n	8001884 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018c8:	68a3      	ldr	r3, [r4, #8]
 80018ca:	f013 0f0c 	tst.w	r3, #12
 80018ce:	d1f6      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
 80018d0:	e7a7      	b.n	8001822 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	b2f2      	uxtb	r2, r6
 80018d4:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	429e      	cmp	r6, r3
 80018de:	d19b      	bne.n	8001818 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	6829      	ldr	r1, [r5, #0]
 80018e2:	074a      	lsls	r2, r1, #29
 80018e4:	d506      	bpl.n	80018f4 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e6:	4815      	ldr	r0, [pc, #84]	; (800193c <HAL_RCC_ClockConfig+0x15c>)
 80018e8:	6883      	ldr	r3, [r0, #8]
 80018ea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ee:	68eb      	ldr	r3, [r5, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f4:	070b      	lsls	r3, r1, #28
 80018f6:	d507      	bpl.n	8001908 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f8:	4a10      	ldr	r2, [pc, #64]	; (800193c <HAL_RCC_ClockConfig+0x15c>)
 80018fa:	6929      	ldr	r1, [r5, #16]
 80018fc:	6893      	ldr	r3, [r2, #8]
 80018fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001902:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001906:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001908:	f7ff ff2c 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_ClockConfig+0x15c>)
 800190e:	22f0      	movs	r2, #240	; 0xf0
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	fa92 f2a2 	rbit	r2, r2
 8001916:	fab2 f282 	clz	r2, r2
 800191a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800191e:	40d3      	lsrs	r3, r2
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_RCC_ClockConfig+0x160>)
 8001922:	5cd3      	ldrb	r3, [r2, r3]
 8001924:	40d8      	lsrs	r0, r3
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <HAL_RCC_ClockConfig+0x164>)
 8001928:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff fbf6 	bl	800111c <HAL_InitTick>
  
  return HAL_OK;
 8001930:	2000      	movs	r0, #0
}
 8001932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00
 800193c:	40023800 	.word	0x40023800
 8001940:	0800219c 	.word	0x0800219c
 8001944:	20000000 	.word	0x20000000

08001948 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001948:	4b01      	ldr	r3, [pc, #4]	; (8001950 <HAL_RCC_GetHCLKFreq+0x8>)
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000000 	.word	0x20000000

08001954 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001956:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	fa92 f2a2 	rbit	r2, r2
 8001960:	fab2 f282 	clz	r2, r2
 8001964:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001968:	40d3      	lsrs	r3, r2
 800196a:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_RCC_GetPCLK1Freq+0x28>)
 800196c:	5cd3      	ldrb	r3, [r2, r3]
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001970:	6810      	ldr	r0, [r2, #0]
}
 8001972:	40d8      	lsrs	r0, r3
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	0800219c 	.word	0x0800219c
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001986:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	fa92 f2a2 	rbit	r2, r2
 8001990:	fab2 f282 	clz	r2, r2
 8001994:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001998:	40d3      	lsrs	r3, r2
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800199c:	5cd3      	ldrb	r3, [r2, r3]
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80019a0:	6810      	ldr	r0, [r2, #0]
} 
 80019a2:	40d8      	lsrs	r0, r3
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	0800219c 	.word	0x0800219c
 80019b0:	20000000 	.word	0x20000000

080019b4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80019b8:	6807      	ldr	r7, [r0, #0]
 80019ba:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019bc:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80019be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80019c2:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019c4:	68a1      	ldr	r1, [r4, #8]
 80019c6:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80019c8:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019ca:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80019cc:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80019ce:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019d0:	4311      	orrs	r1, r2
 80019d2:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80019d4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019d8:	430a      	orrs	r2, r1
 80019da:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80019dc:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019e0:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80019e2:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80019e4:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80019e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80019ea:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80019f0:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	4b7c      	ldr	r3, [pc, #496]	; (8001be8 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019f8:	d17c      	bne.n	8001af4 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80019fa:	429f      	cmp	r7, r3
 80019fc:	d003      	beq.n	8001a06 <UART_SetConfig+0x52>
 80019fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a02:	429f      	cmp	r7, r3
 8001a04:	d131      	bne.n	8001a6a <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001a06:	f7ff ffbd 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8001a0a:	6863      	ldr	r3, [r4, #4]
 8001a0c:	2519      	movs	r5, #25
 8001a0e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001a12:	4368      	muls	r0, r5
 8001a14:	fbb0 f8f8 	udiv	r8, r0, r8
 8001a18:	f7ff ffb4 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8001a1c:	6866      	ldr	r6, [r4, #4]
 8001a1e:	4368      	muls	r0, r5
 8001a20:	0076      	lsls	r6, r6, #1
 8001a22:	fbb0 f6f6 	udiv	r6, r0, r6
 8001a26:	f7ff ffad 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8001a2a:	6863      	ldr	r3, [r4, #4]
 8001a2c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4368      	muls	r0, r5
 8001a34:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a38:	fbb0 f0f9 	udiv	r0, r0, r9
 8001a3c:	fb09 6610 	mls	r6, r9, r0, r6
 8001a40:	f7ff ffa0 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8001a44:	fbb8 f8f9 	udiv	r8, r8, r9
 8001a48:	6861      	ldr	r1, [r4, #4]
 8001a4a:	00f6      	lsls	r6, r6, #3
 8001a4c:	3632      	adds	r6, #50	; 0x32
 8001a4e:	fbb6 f6f9 	udiv	r6, r6, r9
 8001a52:	0076      	lsls	r6, r6, #1
 8001a54:	4368      	muls	r0, r5
 8001a56:	0049      	lsls	r1, r1, #1
 8001a58:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001a5c:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001a60:	fbb0 faf1 	udiv	sl, r0, r1
 8001a64:	f7ff ff8e 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8001a68:	e030      	b.n	8001acc <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a6a:	f7ff ff73 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001a6e:	6863      	ldr	r3, [r4, #4]
 8001a70:	2519      	movs	r5, #25
 8001a72:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001a76:	4368      	muls	r0, r5
 8001a78:	fbb0 f8f8 	udiv	r8, r0, r8
 8001a7c:	f7ff ff6a 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001a80:	6866      	ldr	r6, [r4, #4]
 8001a82:	4368      	muls	r0, r5
 8001a84:	0076      	lsls	r6, r6, #1
 8001a86:	fbb0 f6f6 	udiv	r6, r0, r6
 8001a8a:	f7ff ff63 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001a8e:	6863      	ldr	r3, [r4, #4]
 8001a90:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4368      	muls	r0, r5
 8001a98:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a9c:	fbb0 f0f9 	udiv	r0, r0, r9
 8001aa0:	fb09 6610 	mls	r6, r9, r0, r6
 8001aa4:	f7ff ff56 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001aa8:	fbb8 f8f9 	udiv	r8, r8, r9
 8001aac:	00f6      	lsls	r6, r6, #3
 8001aae:	6861      	ldr	r1, [r4, #4]
 8001ab0:	3632      	adds	r6, #50	; 0x32
 8001ab2:	fbb6 f6f9 	udiv	r6, r6, r9
 8001ab6:	0076      	lsls	r6, r6, #1
 8001ab8:	4368      	muls	r0, r5
 8001aba:	0049      	lsls	r1, r1, #1
 8001abc:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001ac0:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001ac4:	fbb0 faf1 	udiv	sl, r0, r1
 8001ac8:	f7ff ff44 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001acc:	4345      	muls	r5, r0
 8001ace:	6860      	ldr	r0, [r4, #4]
 8001ad0:	0040      	lsls	r0, r0, #1
 8001ad2:	fbb5 f0f0 	udiv	r0, r5, r0
 8001ad6:	fbb0 f0f9 	udiv	r0, r0, r9
 8001ada:	fb09 a210 	mls	r2, r9, r0, sl
 8001ade:	00d2      	lsls	r2, r2, #3
 8001ae0:	3232      	adds	r2, #50	; 0x32
 8001ae2:	fbb2 f3f9 	udiv	r3, r2, r9
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	4443      	add	r3, r8
 8001aec:	441e      	add	r6, r3
 8001aee:	60be      	str	r6, [r7, #8]
 8001af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001af4:	429f      	cmp	r7, r3
 8001af6:	d002      	beq.n	8001afe <UART_SetConfig+0x14a>
 8001af8:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <UART_SetConfig+0x238>)
 8001afa:	429f      	cmp	r7, r3
 8001afc:	d130      	bne.n	8001b60 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001afe:	f7ff ff41 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8001b02:	6863      	ldr	r3, [r4, #4]
 8001b04:	2519      	movs	r5, #25
 8001b06:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001b0a:	4368      	muls	r0, r5
 8001b0c:	fbb0 f8f8 	udiv	r8, r0, r8
 8001b10:	f7ff ff38 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8001b14:	6866      	ldr	r6, [r4, #4]
 8001b16:	4368      	muls	r0, r5
 8001b18:	00b6      	lsls	r6, r6, #2
 8001b1a:	fbb0 f6f6 	udiv	r6, r0, r6
 8001b1e:	f7ff ff31 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8001b22:	6863      	ldr	r3, [r4, #4]
 8001b24:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4368      	muls	r0, r5
 8001b2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b30:	fbb0 f0f9 	udiv	r0, r0, r9
 8001b34:	fb09 6610 	mls	r6, r9, r0, r6
 8001b38:	f7ff ff24 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8001b3c:	fbb8 f8f9 	udiv	r8, r8, r9
 8001b40:	6861      	ldr	r1, [r4, #4]
 8001b42:	0136      	lsls	r6, r6, #4
 8001b44:	4368      	muls	r0, r5
 8001b46:	0089      	lsls	r1, r1, #2
 8001b48:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001b4c:	3632      	adds	r6, #50	; 0x32
 8001b4e:	fbb0 faf1 	udiv	sl, r0, r1
 8001b52:	fbb6 f6f9 	udiv	r6, r6, r9
 8001b56:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001b5a:	f7ff ff13 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8001b5e:	e02f      	b.n	8001bc0 <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b60:	f7ff fef8 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001b64:	6863      	ldr	r3, [r4, #4]
 8001b66:	2519      	movs	r5, #25
 8001b68:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001b6c:	4368      	muls	r0, r5
 8001b6e:	fbb0 f8f8 	udiv	r8, r0, r8
 8001b72:	f7ff feef 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001b76:	6866      	ldr	r6, [r4, #4]
 8001b78:	4368      	muls	r0, r5
 8001b7a:	00b6      	lsls	r6, r6, #2
 8001b7c:	fbb0 f6f6 	udiv	r6, r0, r6
 8001b80:	f7ff fee8 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001b84:	6863      	ldr	r3, [r4, #4]
 8001b86:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4368      	muls	r0, r5
 8001b8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b92:	fbb0 f0f9 	udiv	r0, r0, r9
 8001b96:	fb09 6610 	mls	r6, r9, r0, r6
 8001b9a:	f7ff fedb 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001b9e:	fbb8 f8f9 	udiv	r8, r8, r9
 8001ba2:	6861      	ldr	r1, [r4, #4]
 8001ba4:	0136      	lsls	r6, r6, #4
 8001ba6:	3632      	adds	r6, #50	; 0x32
 8001ba8:	4368      	muls	r0, r5
 8001baa:	fbb6 f6f9 	udiv	r6, r6, r9
 8001bae:	0089      	lsls	r1, r1, #2
 8001bb0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001bb4:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001bb8:	fbb0 faf1 	udiv	sl, r0, r1
 8001bbc:	f7ff feca 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001bc0:	4345      	muls	r5, r0
 8001bc2:	6860      	ldr	r0, [r4, #4]
 8001bc4:	0080      	lsls	r0, r0, #2
 8001bc6:	fbb5 f0f0 	udiv	r0, r5, r0
 8001bca:	fbb0 f0f9 	udiv	r0, r0, r9
 8001bce:	fb09 a210 	mls	r2, r9, r0, sl
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	3232      	adds	r2, #50	; 0x32
 8001bd6:	fbb2 f3f9 	udiv	r3, r2, r9
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	4433      	add	r3, r6
 8001be0:	4443      	add	r3, r8
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001be8:	40011000 	.word	0x40011000
 8001bec:	40011400 	.word	0x40011400

08001bf0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	460e      	mov	r6, r1
 8001bf6:	4617      	mov	r7, r2
 8001bf8:	461d      	mov	r5, r3
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001bfa:	6821      	ldr	r1, [r4, #0]
 8001bfc:	680b      	ldr	r3, [r1, #0]
 8001bfe:	ea36 0303 	bics.w	r3, r6, r3
 8001c02:	d01b      	beq.n	8001c3c <UART_WaitOnFlagUntilTimeout.constprop.3+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001c04:	1c6b      	adds	r3, r5, #1
 8001c06:	d0f9      	beq.n	8001bfc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c08:	b995      	cbnz	r5, 8001c30 <UART_WaitOnFlagUntilTimeout.constprop.3+0x40>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c22:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c26:	2300      	movs	r3, #0
 8001c28:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c30:	f7ff faaa 	bl	8001188 <HAL_GetTick>
 8001c34:	1bc0      	subs	r0, r0, r7
 8001c36:	4285      	cmp	r5, r0
 8001c38:	d2df      	bcs.n	8001bfa <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001c3a:	e7e6      	b.n	8001c0a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 8001c3c:	2000      	movs	r0, #0
}
 8001c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c40 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c40:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001c42:	4604      	mov	r4, r0
 8001c44:	b340      	cbz	r0, 8001c98 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c4e:	b91b      	cbnz	r3, 8001c58 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c50:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001c54:	f000 f91e 	bl	8001e94 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c58:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c5a:	2324      	movs	r3, #36	; 0x24
 8001c5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c60:	68d3      	ldr	r3, [r2, #12]
 8001c62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c66:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7ff fea3 	bl	80019b4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c76:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c7e:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c86:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c88:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001c8a:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c8c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001c8e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001c92:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8001c96:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001c98:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8001c9a:	bd10      	pop	{r4, pc}

08001c9c <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ca0:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8001ca2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ca6:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca8:	4604      	mov	r4, r0
 8001caa:	460d      	mov	r5, r1
 8001cac:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8001cae:	d150      	bne.n	8001d52 <HAL_UART_Transmit+0xb6>
  {
    if((pData == NULL ) || (Size == 0U)) 
 8001cb0:	2900      	cmp	r1, #0
 8001cb2:	d04b      	beq.n	8001d4c <HAL_UART_Transmit+0xb0>
 8001cb4:	2a00      	cmp	r2, #0
 8001cb6:	d049      	beq.n	8001d4c <HAL_UART_Transmit+0xb0>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001cb8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d048      	beq.n	8001d52 <HAL_UART_Transmit+0xb6>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cca:	2321      	movs	r3, #33	; 0x21
 8001ccc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001cd0:	f7ff fa5a 	bl	8001188 <HAL_GetTick>

    huart->TxXferSize = Size;
 8001cd4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001cd8:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8001cda:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001cde:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	b323      	cbz	r3, 8001d2e <HAL_UART_Transmit+0x92>
    {
      huart->TxXferCount--;
 8001ce4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cec:	68a3      	ldr	r3, [r4, #8]
 8001cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cf2:	4632      	mov	r2, r6
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001cfa:	4620      	mov	r0, r4
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cfc:	d10e      	bne.n	8001d1c <HAL_UART_Transmit+0x80>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cfe:	f7ff ff77 	bl	8001bf0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d02:	b110      	cbz	r0, 8001d0a <HAL_UART_Transmit+0x6e>
        { 
          return HAL_TIMEOUT;
 8001d04:	2003      	movs	r0, #3
 8001d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 8001d0a:	882b      	ldrh	r3, [r5, #0]
 8001d0c:	6822      	ldr	r2, [r4, #0]
 8001d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d12:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001d14:	6923      	ldr	r3, [r4, #16]
 8001d16:	b943      	cbnz	r3, 8001d2a <HAL_UART_Transmit+0x8e>
        {
          pData +=2U;
 8001d18:	3502      	adds	r5, #2
 8001d1a:	e7e0      	b.n	8001cde <HAL_UART_Transmit+0x42>
          pData +=1U;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d1c:	f7ff ff68 	bl	8001bf0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d20:	2800      	cmp	r0, #0
 8001d22:	d1ef      	bne.n	8001d04 <HAL_UART_Transmit+0x68>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	782a      	ldrb	r2, [r5, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	3501      	adds	r5, #1
 8001d2c:	e7d7      	b.n	8001cde <HAL_UART_Transmit+0x42>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	4632      	mov	r2, r6
 8001d32:	2140      	movs	r1, #64	; 0x40
 8001d34:	4620      	mov	r0, r4
 8001d36:	f7ff ff5b 	bl	8001bf0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d1e2      	bne.n	8001d04 <HAL_UART_Transmit+0x68>
    { 
      return HAL_TIMEOUT;
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d44:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    
    return HAL_OK;
 8001d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return  HAL_ERROR;
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001d52:	2002      	movs	r0, #2
  }
}
 8001d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d58:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_GPIO_Init+0x34>)
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	9100      	str	r1, [sp, #0]
 8001d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
 8001d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d6a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	9101      	str	r1, [sp, #4]
 8001d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	9b01      	ldr	r3, [sp, #4]

}
 8001d86:	b002      	add	sp, #8
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800

08001d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d92:	2003      	movs	r0, #3
 8001d94:	f7ff f9fe 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	f06f 000b 	mvn.w	r0, #11
 8001da0:	f7ff fa0a 	bl	80011b8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	4611      	mov	r1, r2
 8001da8:	f06f 000a 	mvn.w	r0, #10
 8001dac:	f7ff fa04 	bl	80011b8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	4611      	mov	r1, r2
 8001db4:	f06f 0009 	mvn.w	r0, #9
 8001db8:	f7ff f9fe 	bl	80011b8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	f06f 0004 	mvn.w	r0, #4
 8001dc4:	f7ff f9f8 	bl	80011b8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	4611      	mov	r1, r2
 8001dcc:	f06f 0003 	mvn.w	r0, #3
 8001dd0:	f7ff f9f2 	bl	80011b8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	f06f 0001 	mvn.w	r0, #1
 8001ddc:	f7ff f9ec 	bl	80011b8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	4611      	mov	r1, r2
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001dec:	f7ff b9e4 	b.w	80011b8 <HAL_NVIC_SetPriority>

08001df0 <NMI_Handler>:
 8001df0:	4770      	bx	lr

08001df2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001df2:	e7fe      	b.n	8001df2 <HardFault_Handler>

08001df4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001df4:	e7fe      	b.n	8001df4 <MemManage_Handler>

08001df6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001df6:	e7fe      	b.n	8001df6 <BusFault_Handler>

08001df8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001df8:	e7fe      	b.n	8001df8 <UsageFault_Handler>

08001dfa <SVC_Handler>:
 8001dfa:	4770      	bx	lr

08001dfc <DebugMon_Handler>:
 8001dfc:	4770      	bx	lr

08001dfe <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001e00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e02:	f7ff f9b9 	bl	8001178 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8001e0a:	f7ff ba2c 	b.w	8001266 <HAL_SYSTICK_IRQHandler>
	...

08001e10 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e10:	490f      	ldr	r1, [pc, #60]	; (8001e50 <SystemInit+0x40>)
 8001e12:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <SystemInit+0x44>)
 8001e20:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e22:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e2a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001e32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e36:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001e38:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <SystemInit+0x48>)
 8001e3a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e42:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e44:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e4a:	608b      	str	r3, [r1, #8]
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000ed00 	.word	0xe000ed00
 8001e54:	40023800 	.word	0x40023800
 8001e58:	24003010 	.word	0x24003010

08001e5c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e5c:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 8001e5e:	480b      	ldr	r0, [pc, #44]	; (8001e8c <MX_UART4_Init+0x30>)
  huart4.Init.BaudRate = 115200;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_UART4_Init+0x34>)
 8001e62:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001e66:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e6a:	220c      	movs	r2, #12
void MX_UART4_Init(void)
{

  huart4.Instance = UART4;
  huart4.Init.BaudRate = 115200;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e70:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e72:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e74:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e76:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e78:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e7a:	f7ff fee1 	bl	8001c40 <HAL_UART_Init>
 8001e7e:	b118      	cbz	r0, 8001e88 <MX_UART4_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001e80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart4) != HAL_OK)
  {
    Error_Handler();
 8001e84:	f000 b8e6 	b.w	8002054 <Error_Handler>
 8001e88:	bd08      	pop	{r3, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000118 	.word	0x20000118
 8001e90:	40004c00 	.word	0x40004c00

08001e94 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 8001e96:	6802      	ldr	r2, [r0, #0]
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_UART_MspInit+0x44>)
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d118      	bne.n	8001ed0 <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	480e      	ldr	r0, [pc, #56]	; (8001ee0 <HAL_UART_MspInit+0x4c>)
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb4:	9300      	str	r3, [sp, #0]
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2202      	movs	r2, #2
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001eb8:	9b00      	ldr	r3, [sp, #0]
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	9202      	str	r2, [sp, #8]
  
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec0:	2201      	movs	r2, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ec6:	2308      	movs	r3, #8
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec8:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001eca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f7ff f9d0 	bl	8001270 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001ed0:	b007      	add	sp, #28
 8001ed2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ed6:	bf00      	nop
 8001ed8:	40004c00 	.word	0x40004c00
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <_Z9TestPrinfv>:
extern UART_HandleTypeDef huart4;

void SystemClock_Config(void);
void Error_Handler(void);

void TestPrinf() {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
	UART_HandleTypeDef* huart = &huart4;
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <_Z9TestPrinfv+0x58>)
 8001eec:	613b      	str	r3, [r7, #16]
	uint8_t mystring[] = "hello\r\n";
 8001eee:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <_Z9TestPrinfv+0x5c>)
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ef6:	e883 0003 	stmia.w	r3, {r0, r1}
	__HAL_UART_ENABLE(huart);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	68d2      	ldr	r2, [r2, #12]
 8001f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f08:	60da      	str	r2, [r3, #12]

	uint32_t lastTime = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]

	while (1) {
		uint32_t currentTime = HAL_GetTick();
 8001f0e:	f7ff f93b 	bl	8001188 <HAL_GetTick>
 8001f12:	4603      	mov	r3, r0
 8001f14:	60fb      	str	r3, [r7, #12]
		int32_t deltaTime = currentTime - lastTime;
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	60bb      	str	r3, [r7, #8]
		if (deltaTime > 1000) {
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f24:	ddf3      	ble.n	8001f0e <_Z9TestPrinfv+0x2a>
			HAL_UART_Transmit(huart, mystring, NELEM(mystring), 1000);
 8001f26:	2308      	movs	r3, #8
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4639      	mov	r1, r7
 8001f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f30:	6938      	ldr	r0, [r7, #16]
 8001f32:	f7ff feb3 	bl	8001c9c <HAL_UART_Transmit>
			lastTime = currentTime;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	617b      	str	r3, [r7, #20]
	uint8_t mystring[] = "hello\r\n";
	__HAL_UART_ENABLE(huart);

	uint32_t lastTime = 0;

	while (1) {
 8001f3a:	e7e8      	b.n	8001f0e <_Z9TestPrinfv+0x2a>
 8001f3c:	20000118 	.word	0x20000118
 8001f40:	08002194 	.word	0x08002194

08001f44 <main>:
			lastTime = currentTime;
		}
	}
}

int main(void) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	HAL_Init();
 8001f48:	f7ff f8fc 	bl	8001144 <HAL_Init>
	SystemClock_Config();
 8001f4c:	f000 f808 	bl	8001f60 <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 8001f50:	f7ff ff02 	bl	8001d58 <MX_GPIO_Init>
	MX_UART4_Init();
 8001f54:	f7ff ff82 	bl	8001e5c <MX_UART4_Init>
	while (1) {
		TestPrinf();
 8001f58:	f7ff ffc4 	bl	8001ee4 <_Z9TestPrinfv>
int main(void) {
	HAL_Init();
	SystemClock_Config();
	MX_GPIO_Init();
	MX_UART4_Init();
	while (1) {
 8001f5c:	e7fc      	b.n	8001f58 <main+0x14>
 8001f5e:	bf00      	nop

08001f60 <_Z18SystemClock_Configv>:
		TestPrinf();
	}
}

void SystemClock_Config(void) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b094      	sub	sp, #80	; 0x50
 8001f64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE()
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4a37      	ldr	r2, [pc, #220]	; (8002048 <_Z18SystemClock_Configv+0xe8>)
 8001f6c:	4b36      	ldr	r3, [pc, #216]	; (8002048 <_Z18SystemClock_Configv+0xe8>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b34      	ldr	r3, [pc, #208]	; (8002048 <_Z18SystemClock_Configv+0xe8>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4a31      	ldr	r2, [pc, #196]	; (800204c <_Z18SystemClock_Configv+0xec>)
 8001f88:	4b30      	ldr	r3, [pc, #192]	; (800204c <_Z18SystemClock_Configv+0xec>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <_Z18SystemClock_Configv+0xec>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 24;
 8001fb2:	2318      	movs	r3, #24
 8001fb4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001fb6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001fba:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001fc4:	f107 0320 	add.w	r3, r7, #32
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fa3d 	bl	8001448 <HAL_RCC_OscConfig>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf14      	ite	ne
 8001fd4:	2301      	movne	r3, #1
 8001fd6:	2300      	moveq	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <_Z18SystemClock_Configv+0x82>
		Error_Handler();
 8001fde:	f000 f839 	bl	8002054 <Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ff2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	2105      	movs	r1, #5
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fbed 	bl	80017e0 <HAL_RCC_ClockConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <_Z18SystemClock_Configv+0xba>
		Error_Handler();
 8002016:	f000 f81d 	bl	8002054 <Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800201a:	f7ff fc95 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 800201e:	4602      	mov	r2, r0
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <_Z18SystemClock_Configv+0xf0>)
 8002022:	fba3 2302 	umull	r2, r3, r3, r2
 8002026:	099b      	lsrs	r3, r3, #6
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff f8f9 	bl	8001220 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800202e:	2004      	movs	r0, #4
 8002030:	f7ff f90c 	bl	800124c <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002034:	2200      	movs	r2, #0
 8002036:	2100      	movs	r1, #0
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff f8bc 	bl	80011b8 <HAL_NVIC_SetPriority>
}
 8002040:	bf00      	nop
 8002042:	3750      	adds	r7, #80	; 0x50
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	40007000 	.word	0x40007000
 8002050:	10624dd3 	.word	0x10624dd3

08002054 <Error_Handler>:


void Error_Handler(void) {
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
	while (1) {
 8002058:	e7fe      	b.n	8002058 <Error_Handler+0x4>
 800205a:	bf00      	nop

0800205c <__libc_init_array>:
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <__libc_init_array+0x3c>)
 8002060:	4c0e      	ldr	r4, [pc, #56]	; (800209c <__libc_init_array+0x40>)
 8002062:	1ae4      	subs	r4, r4, r3
 8002064:	10a4      	asrs	r4, r4, #2
 8002066:	2500      	movs	r5, #0
 8002068:	461e      	mov	r6, r3
 800206a:	42a5      	cmp	r5, r4
 800206c:	d004      	beq.n	8002078 <__libc_init_array+0x1c>
 800206e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002072:	4798      	blx	r3
 8002074:	3501      	adds	r5, #1
 8002076:	e7f8      	b.n	800206a <__libc_init_array+0xe>
 8002078:	f000 f880 	bl	800217c <_init>
 800207c:	4c08      	ldr	r4, [pc, #32]	; (80020a0 <__libc_init_array+0x44>)
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <__libc_init_array+0x48>)
 8002080:	1ae4      	subs	r4, r4, r3
 8002082:	10a4      	asrs	r4, r4, #2
 8002084:	2500      	movs	r5, #0
 8002086:	461e      	mov	r6, r3
 8002088:	42a5      	cmp	r5, r4
 800208a:	d004      	beq.n	8002096 <__libc_init_array+0x3a>
 800208c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002090:	4798      	blx	r3
 8002092:	3501      	adds	r5, #1
 8002094:	e7f8      	b.n	8002088 <__libc_init_array+0x2c>
 8002096:	bd70      	pop	{r4, r5, r6, pc}
 8002098:	080022b8 	.word	0x080022b8
 800209c:	080022b8 	.word	0x080022b8
 80020a0:	080022bc 	.word	0x080022bc
 80020a4:	080022b8 	.word	0x080022b8

080020a8 <abort>:
 80020a8:	b508      	push	{r3, lr}
 80020aa:	2006      	movs	r0, #6
 80020ac:	f000 f838 	bl	8002120 <raise>
 80020b0:	2001      	movs	r0, #1
 80020b2:	f000 f861 	bl	8002178 <_exit>

080020b6 <memcpy>:
 80020b6:	b510      	push	{r4, lr}
 80020b8:	1e43      	subs	r3, r0, #1
 80020ba:	440a      	add	r2, r1
 80020bc:	4291      	cmp	r1, r2
 80020be:	d004      	beq.n	80020ca <memcpy+0x14>
 80020c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020c8:	e7f8      	b.n	80020bc <memcpy+0x6>
 80020ca:	bd10      	pop	{r4, pc}

080020cc <_raise_r>:
 80020cc:	291f      	cmp	r1, #31
 80020ce:	b538      	push	{r3, r4, r5, lr}
 80020d0:	4604      	mov	r4, r0
 80020d2:	460d      	mov	r5, r1
 80020d4:	d904      	bls.n	80020e0 <_raise_r+0x14>
 80020d6:	2316      	movs	r3, #22
 80020d8:	6003      	str	r3, [r0, #0]
 80020da:	f04f 30ff 	mov.w	r0, #4294967295
 80020de:	bd38      	pop	{r3, r4, r5, pc}
 80020e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80020e2:	b112      	cbz	r2, 80020ea <_raise_r+0x1e>
 80020e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80020e8:	b94b      	cbnz	r3, 80020fe <_raise_r+0x32>
 80020ea:	4620      	mov	r0, r4
 80020ec:	f000 f832 	bl	8002154 <_getpid_r>
 80020f0:	462a      	mov	r2, r5
 80020f2:	4601      	mov	r1, r0
 80020f4:	4620      	mov	r0, r4
 80020f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020fa:	f000 b819 	b.w	8002130 <_kill_r>
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d00c      	beq.n	800211c <_raise_r+0x50>
 8002102:	1c59      	adds	r1, r3, #1
 8002104:	d103      	bne.n	800210e <_raise_r+0x42>
 8002106:	2316      	movs	r3, #22
 8002108:	6003      	str	r3, [r0, #0]
 800210a:	2001      	movs	r0, #1
 800210c:	bd38      	pop	{r3, r4, r5, pc}
 800210e:	2400      	movs	r4, #0
 8002110:	4628      	mov	r0, r5
 8002112:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002116:	4798      	blx	r3
 8002118:	4620      	mov	r0, r4
 800211a:	bd38      	pop	{r3, r4, r5, pc}
 800211c:	2000      	movs	r0, #0
 800211e:	bd38      	pop	{r3, r4, r5, pc}

08002120 <raise>:
 8002120:	4b02      	ldr	r3, [pc, #8]	; (800212c <raise+0xc>)
 8002122:	4601      	mov	r1, r0
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	f7ff bfd1 	b.w	80020cc <_raise_r>
 800212a:	bf00      	nop
 800212c:	200000f4 	.word	0x200000f4

08002130 <_kill_r>:
 8002130:	b538      	push	{r3, r4, r5, lr}
 8002132:	4c07      	ldr	r4, [pc, #28]	; (8002150 <_kill_r+0x20>)
 8002134:	2300      	movs	r3, #0
 8002136:	4605      	mov	r5, r0
 8002138:	4608      	mov	r0, r1
 800213a:	4611      	mov	r1, r2
 800213c:	6023      	str	r3, [r4, #0]
 800213e:	f000 f813 	bl	8002168 <_kill>
 8002142:	1c43      	adds	r3, r0, #1
 8002144:	d102      	bne.n	800214c <_kill_r+0x1c>
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	b103      	cbz	r3, 800214c <_kill_r+0x1c>
 800214a:	602b      	str	r3, [r5, #0]
 800214c:	bd38      	pop	{r3, r4, r5, pc}
 800214e:	bf00      	nop
 8002150:	20000158 	.word	0x20000158

08002154 <_getpid_r>:
 8002154:	f000 b800 	b.w	8002158 <_getpid>

08002158 <_getpid>:
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <_getpid+0xc>)
 800215a:	2258      	movs	r2, #88	; 0x58
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f04f 30ff 	mov.w	r0, #4294967295
 8002162:	4770      	bx	lr
 8002164:	20000158 	.word	0x20000158

08002168 <_kill>:
 8002168:	4b02      	ldr	r3, [pc, #8]	; (8002174 <_kill+0xc>)
 800216a:	2258      	movs	r2, #88	; 0x58
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f04f 30ff 	mov.w	r0, #4294967295
 8002172:	4770      	bx	lr
 8002174:	20000158 	.word	0x20000158

08002178 <_exit>:
 8002178:	e7fe      	b.n	8002178 <_exit>
	...

0800217c <_init>:
 800217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217e:	bf00      	nop
 8002180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002182:	bc08      	pop	{r3}
 8002184:	469e      	mov	lr, r3
 8002186:	4770      	bx	lr

08002188 <_fini>:
 8002188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218a:	bf00      	nop
 800218c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218e:	bc08      	pop	{r3}
 8002190:	469e      	mov	lr, r3
 8002192:	4770      	bx	lr
