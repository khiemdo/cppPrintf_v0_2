
C:\Users\Khiem\Atollic\TrueSTUDIO\ARM_workspace_7.0\cppPrintf_v0_2\Debug\cppPrintf_v0_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e60  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800100c  0800100c  0001100c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800101c  0800101c  0001101c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001020  08001020  00011020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000060  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000064  20000064  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   000025d5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00006119  00000000  00000000  00022609  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000134d  00000000  00000000  00028722  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000004a0  00000000  00000000  00029a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000670  00000000  00000000  00029f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002236  00000000  00000000  0002a580  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001d22  00000000  00000000  0002c7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0002e4d8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000b28  00000000  00000000  0002e558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000ff4 	.word	0x08000ff4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	08000ff4 	.word	0x08000ff4

080001ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80001ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000224 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001f2:	e003      	b.n	80001fc <LoopCopyDataInit>

080001f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80001f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001fa:	3104      	adds	r1, #4

080001fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001fc:	480b      	ldr	r0, [pc, #44]	; (800022c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80001fe:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000200:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000202:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000204:	d3f6      	bcc.n	80001f4 <CopyDataInit>
  ldr  r2, =_sbss
 8000206:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000208:	e002      	b.n	8000210 <LoopFillZerobss>

0800020a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800020a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800020c:	f842 3b04 	str.w	r3, [r2], #4

08000210 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000212:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000214:	d3f9      	bcc.n	800020a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000216:	f000 fea1 	bl	8000f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800021a:	f000 fec5 	bl	8000fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800021e:	f000 fdff 	bl	8000e20 <main>
  bx  lr    
 8000222:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000224:	20030000 	.word	0x20030000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000228:	08001024 	.word	0x08001024
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800022c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000230:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000234:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000238:	20000064 	.word	0x20000064

0800023c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800023c:	e7fe      	b.n	800023c <ADC_IRQHandler>
	...

08000240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000240:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000244:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000246:	6818      	ldr	r0, [r3, #0]
 8000248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000250:	f000 f878 	bl	8000344 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000254:	2200      	movs	r2, #0
 8000256:	4621      	mov	r1, r4
 8000258:	f04f 30ff 	mov.w	r0, #4294967295
 800025c:	f000 f83e 	bl	80002dc <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000260:	2000      	movs	r0, #0
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000000 	.word	0x20000000

08000268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000268:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <HAL_Init+0x30>)
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000272:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800027a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000282:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000284:	2003      	movs	r0, #3
 8000286:	f000 f817 	bl	80002b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800028a:	2000      	movs	r0, #0
 800028c:	f7ff ffd8 	bl	8000240 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000290:	f000 fdfa 	bl	8000e88 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000294:	2000      	movs	r0, #0
 8000296:	bd08      	pop	{r3, pc}
 8000298:	40023c00 	.word	0x40023c00

0800029c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800029c:	4a02      	ldr	r2, [pc, #8]	; (80002a8 <HAL_IncTick+0xc>)
 800029e:	6813      	ldr	r3, [r2, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	6013      	str	r3, [r2, #0]
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000020 	.word	0x20000020

080002ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002ac:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <HAL_GetTick+0x8>)
 80002ae:	6818      	ldr	r0, [r3, #0]
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20000020 	.word	0x20000020

080002b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80002ba:	68d3      	ldr	r3, [r2, #12]
 80002bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002c0:	041b      	lsls	r3, r3, #16
 80002c2:	0c1b      	lsrs	r3, r3, #16
 80002c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80002c8:	0200      	lsls	r0, r0, #8
 80002ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80002d2:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002d4:	60d3      	str	r3, [r2, #12]
 80002d6:	4770      	bx	lr
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <HAL_NVIC_SetPriority+0x60>)
 80002de:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002e4:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002e6:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ea:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ec:	2c04      	cmp	r4, #4
 80002ee:	bf28      	it	cs
 80002f0:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f2:	2d06      	cmp	r5, #6

  return (
 80002f4:	f04f 0501 	mov.w	r5, #1
 80002f8:	fa05 f404 	lsl.w	r4, r5, r4
 80002fc:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000300:	bf8c      	ite	hi
 8000302:	3b03      	subhi	r3, #3
 8000304:	2300      	movls	r3, #0

  return (
 8000306:	400c      	ands	r4, r1
 8000308:	409c      	lsls	r4, r3
 800030a:	fa05 f303 	lsl.w	r3, r5, r3
 800030e:	3b01      	subs	r3, #1
 8000310:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000312:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000314:	ea42 0204 	orr.w	r2, r2, r4
 8000318:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031c:	bfaf      	iteee	ge
 800031e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000322:	f000 000f 	andlt.w	r0, r0, #15
 8000326:	4b06      	ldrlt	r3, [pc, #24]	; (8000340 <HAL_NVIC_SetPriority+0x64>)
 8000328:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032a:	bfa5      	ittet	ge
 800032c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000330:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000332:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000334:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	bf00      	nop
 800033c:	e000ed00 	.word	0xe000ed00
 8000340:	e000ed14 	.word	0xe000ed14

08000344 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000344:	3801      	subs	r0, #1
 8000346:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800034a:	d20a      	bcs.n	8000362 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034e:	4a07      	ldr	r2, [pc, #28]	; (800036c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000350:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000352:	21f0      	movs	r1, #240	; 0xf0
 8000354:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000358:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800035c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000362:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e010 	.word	0xe000e010
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000372:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000374:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000376:	bf0c      	ite	eq
 8000378:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800037c:	f022 0204 	bicne.w	r2, r2, #4
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	4770      	bx	lr
 8000384:	e000e010 	.word	0xe000e010

08000388 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000388:	4770      	bx	lr

0800038a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800038a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800038c:	f7ff fffc 	bl	8000388 <HAL_SYSTICK_Callback>
 8000390:	bd08      	pop	{r3, pc}
	...

08000394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000398:	4f70      	ldr	r7, [pc, #448]	; (800055c <HAL_GPIO_Init+0x1c8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800039a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039c:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8000564 <HAL_GPIO_Init+0x1d0>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003a0:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000568 <HAL_GPIO_Init+0x1d4>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003a4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80003a6:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003ac:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80003ae:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003b0:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80003b2:	ea34 0303 	bics.w	r3, r4, r3
 80003b6:	f040 80c9 	bne.w	800054c <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003ba:	684d      	ldr	r5, [r1, #4]
 80003bc:	f025 0a10 	bic.w	sl, r5, #16
 80003c0:	f1ba 0f02 	cmp.w	sl, #2
 80003c4:	d114      	bne.n	80003f0 <HAL_GPIO_Init+0x5c>
 80003c6:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 80003ca:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003ce:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80003d2:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003d6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003da:	230f      	movs	r3, #15
 80003dc:	fa03 f30b 	lsl.w	r3, r3, fp
 80003e0:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80003e4:	690b      	ldr	r3, [r1, #16]
 80003e6:	fa03 f30b 	lsl.w	r3, r3, fp
 80003ea:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 80003ec:	f8c9 3020 	str.w	r3, [r9, #32]
 80003f0:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003f4:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80003f8:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003fa:	fa09 f90b 	lsl.w	r9, r9, fp
 80003fe:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000402:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000406:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800040a:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800040e:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000412:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000414:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000418:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800041a:	d80f      	bhi.n	800043c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800041c:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 800041e:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000420:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000424:	fa06 f60b 	lsl.w	r6, r6, fp
 8000428:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 800042a:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800042c:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800042e:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000432:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000436:	4096      	lsls	r6, r2
 8000438:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800043a:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800043c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800043e:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000442:	688b      	ldr	r3, [r1, #8]
 8000444:	fa03 f30b 	lsl.w	r3, r3, fp
 8000448:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 800044c:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800044e:	00eb      	lsls	r3, r5, #3
 8000450:	d57c      	bpl.n	800054c <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	2300      	movs	r3, #0
 8000454:	9303      	str	r3, [sp, #12]
 8000456:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800045a:	4b41      	ldr	r3, [pc, #260]	; (8000560 <HAL_GPIO_Init+0x1cc>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000460:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000464:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8000468:	f022 0903 	bic.w	r9, r2, #3
 800046c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000470:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000474:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8000478:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800047a:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000480:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000484:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000488:	260f      	movs	r6, #15
 800048a:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800048e:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000490:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000494:	d024      	beq.n	80004e0 <HAL_GPIO_Init+0x14c>
 8000496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800049a:	4298      	cmp	r0, r3
 800049c:	d022      	beq.n	80004e4 <HAL_GPIO_Init+0x150>
 800049e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004a2:	4298      	cmp	r0, r3
 80004a4:	d020      	beq.n	80004e8 <HAL_GPIO_Init+0x154>
 80004a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d01e      	beq.n	80004ec <HAL_GPIO_Init+0x158>
 80004ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004b2:	4298      	cmp	r0, r3
 80004b4:	d01c      	beq.n	80004f0 <HAL_GPIO_Init+0x15c>
 80004b6:	4540      	cmp	r0, r8
 80004b8:	d01c      	beq.n	80004f4 <HAL_GPIO_Init+0x160>
 80004ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80004be:	4298      	cmp	r0, r3
 80004c0:	d01a      	beq.n	80004f8 <HAL_GPIO_Init+0x164>
 80004c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d018      	beq.n	80004fc <HAL_GPIO_Init+0x168>
 80004ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004ce:	4298      	cmp	r0, r3
 80004d0:	d016      	beq.n	8000500 <HAL_GPIO_Init+0x16c>
 80004d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004d6:	4298      	cmp	r0, r3
 80004d8:	bf14      	ite	ne
 80004da:	230a      	movne	r3, #10
 80004dc:	2309      	moveq	r3, #9
 80004de:	e010      	b.n	8000502 <HAL_GPIO_Init+0x16e>
 80004e0:	2300      	movs	r3, #0
 80004e2:	e00e      	b.n	8000502 <HAL_GPIO_Init+0x16e>
 80004e4:	2301      	movs	r3, #1
 80004e6:	e00c      	b.n	8000502 <HAL_GPIO_Init+0x16e>
 80004e8:	2302      	movs	r3, #2
 80004ea:	e00a      	b.n	8000502 <HAL_GPIO_Init+0x16e>
 80004ec:	2303      	movs	r3, #3
 80004ee:	e008      	b.n	8000502 <HAL_GPIO_Init+0x16e>
 80004f0:	2304      	movs	r3, #4
 80004f2:	e006      	b.n	8000502 <HAL_GPIO_Init+0x16e>
 80004f4:	2305      	movs	r3, #5
 80004f6:	e004      	b.n	8000502 <HAL_GPIO_Init+0x16e>
 80004f8:	2306      	movs	r3, #6
 80004fa:	e002      	b.n	8000502 <HAL_GPIO_Init+0x16e>
 80004fc:	2307      	movs	r3, #7
 80004fe:	e000      	b.n	8000502 <HAL_GPIO_Init+0x16e>
 8000500:	2308      	movs	r3, #8
 8000502:	fa03 f30a 	lsl.w	r3, r3, sl
 8000506:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000508:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800050c:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 800050e:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000510:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000514:	bf0c      	ite	eq
 8000516:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000518:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 800051a:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800051e:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000522:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000526:	bf0c      	ite	eq
 8000528:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800052a:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 800052c:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800052e:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000530:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000534:	bf0c      	ite	eq
 8000536:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000538:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 800053a:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800053e:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000542:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000544:	bf54      	ite	pl
 8000546:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000548:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 800054a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800054c:	3201      	adds	r2, #1
 800054e:	2a10      	cmp	r2, #16
 8000550:	f47f af2c 	bne.w	80003ac <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000554:	b005      	add	sp, #20
 8000556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800055a:	bf00      	nop
 800055c:	40013c00 	.word	0x40013c00
 8000560:	40020000 	.word	0x40020000
 8000564:	40023800 	.word	0x40023800
 8000568:	40021400 	.word	0x40021400

0800056c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800056c:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800056e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000572:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000574:	07d8      	lsls	r0, r3, #31
 8000576:	d403      	bmi.n	8000580 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000578:	6823      	ldr	r3, [r4, #0]
 800057a:	0799      	lsls	r1, r3, #30
 800057c:	d44b      	bmi.n	8000616 <HAL_RCC_OscConfig+0xaa>
 800057e:	e09b      	b.n	80006b8 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000580:	4b8c      	ldr	r3, [pc, #560]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	f002 020c 	and.w	r2, r2, #12
 8000588:	2a04      	cmp	r2, #4
 800058a:	d007      	beq.n	800059c <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800058c:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800058e:	f002 020c 	and.w	r2, r2, #12
 8000592:	2a08      	cmp	r2, #8
 8000594:	d10b      	bne.n	80005ae <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	025a      	lsls	r2, r3, #9
 800059a:	d508      	bpl.n	80005ae <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800059c:	4b85      	ldr	r3, [pc, #532]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	039b      	lsls	r3, r3, #14
 80005a2:	d5e9      	bpl.n	8000578 <HAL_RCC_OscConfig+0xc>
 80005a4:	6863      	ldr	r3, [r4, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1e6      	bne.n	8000578 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80005aa:	2001      	movs	r0, #1
 80005ac:	e164      	b.n	8000878 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ae:	6863      	ldr	r3, [r4, #4]
 80005b0:	4d80      	ldr	r5, [pc, #512]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
 80005b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005b6:	d006      	beq.n	80005c6 <HAL_RCC_OscConfig+0x5a>
 80005b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005bc:	d108      	bne.n	80005d0 <HAL_RCC_OscConfig+0x64>
 80005be:	682b      	ldr	r3, [r5, #0]
 80005c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c4:	602b      	str	r3, [r5, #0]
 80005c6:	682b      	ldr	r3, [r5, #0]
 80005c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005cc:	602b      	str	r3, [r5, #0]
 80005ce:	e008      	b.n	80005e2 <HAL_RCC_OscConfig+0x76>
 80005d0:	682a      	ldr	r2, [r5, #0]
 80005d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005d6:	602a      	str	r2, [r5, #0]
 80005d8:	682a      	ldr	r2, [r5, #0]
 80005da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005de:	602a      	str	r2, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80005e0:	b16b      	cbz	r3, 80005fe <HAL_RCC_OscConfig+0x92>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80005e2:	f7ff fe63 	bl	80002ac <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005e6:	4d73      	ldr	r5, [pc, #460]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80005e8:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005ea:	682b      	ldr	r3, [r5, #0]
 80005ec:	039f      	lsls	r7, r3, #14
 80005ee:	d4c3      	bmi.n	8000578 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005f0:	f7ff fe5c 	bl	80002ac <HAL_GetTick>
 80005f4:	1b80      	subs	r0, r0, r6
 80005f6:	2864      	cmp	r0, #100	; 0x64
 80005f8:	d9f7      	bls.n	80005ea <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_TIMEOUT;
 80005fa:	2003      	movs	r0, #3
 80005fc:	e13c      	b.n	8000878 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80005fe:	f7ff fe55 	bl	80002ac <HAL_GetTick>
 8000602:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000604:	682b      	ldr	r3, [r5, #0]
 8000606:	0398      	lsls	r0, r3, #14
 8000608:	d5b6      	bpl.n	8000578 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800060a:	f7ff fe4f 	bl	80002ac <HAL_GetTick>
 800060e:	1b80      	subs	r0, r0, r6
 8000610:	2864      	cmp	r0, #100	; 0x64
 8000612:	d9f7      	bls.n	8000604 <HAL_RCC_OscConfig+0x98>
 8000614:	e7f1      	b.n	80005fa <HAL_RCC_OscConfig+0x8e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000616:	4b67      	ldr	r3, [pc, #412]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
 8000618:	689a      	ldr	r2, [r3, #8]
 800061a:	f012 0f0c 	tst.w	r2, #12
 800061e:	d007      	beq.n	8000630 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000620:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000622:	f002 020c 	and.w	r2, r2, #12
 8000626:	2a08      	cmp	r2, #8
 8000628:	d117      	bne.n	800065a <HAL_RCC_OscConfig+0xee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	0259      	lsls	r1, r3, #9
 800062e:	d414      	bmi.n	800065a <HAL_RCC_OscConfig+0xee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000630:	4b60      	ldr	r3, [pc, #384]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	0792      	lsls	r2, r2, #30
 8000636:	d502      	bpl.n	800063e <HAL_RCC_OscConfig+0xd2>
 8000638:	68e2      	ldr	r2, [r4, #12]
 800063a:	2a01      	cmp	r2, #1
 800063c:	d1b5      	bne.n	80005aa <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800063e:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000640:	21f8      	movs	r1, #248	; 0xf8
 8000642:	fa91 f1a1 	rbit	r1, r1
 8000646:	6920      	ldr	r0, [r4, #16]
 8000648:	fab1 f181 	clz	r1, r1
 800064c:	fa00 f101 	lsl.w	r1, r0, r1
 8000650:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000654:	430a      	orrs	r2, r1
 8000656:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000658:	e02e      	b.n	80006b8 <HAL_RCC_OscConfig+0x14c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800065a:	68e2      	ldr	r2, [r4, #12]
 800065c:	4b56      	ldr	r3, [pc, #344]	; (80007b8 <HAL_RCC_OscConfig+0x24c>)
 800065e:	b1ea      	cbz	r2, 800069c <HAL_RCC_OscConfig+0x130>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000664:	f7ff fe22 	bl	80002ac <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000668:	4d52      	ldr	r5, [pc, #328]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800066a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800066c:	682b      	ldr	r3, [r5, #0]
 800066e:	4851      	ldr	r0, [pc, #324]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
 8000670:	079b      	lsls	r3, r3, #30
 8000672:	d405      	bmi.n	8000680 <HAL_RCC_OscConfig+0x114>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000674:	f7ff fe1a 	bl	80002ac <HAL_GetTick>
 8000678:	1b80      	subs	r0, r0, r6
 800067a:	2802      	cmp	r0, #2
 800067c:	d9f6      	bls.n	800066c <HAL_RCC_OscConfig+0x100>
 800067e:	e7bc      	b.n	80005fa <HAL_RCC_OscConfig+0x8e>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000680:	6803      	ldr	r3, [r0, #0]
 8000682:	22f8      	movs	r2, #248	; 0xf8
 8000684:	fa92 f2a2 	rbit	r2, r2
 8000688:	6921      	ldr	r1, [r4, #16]
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	fa01 f202 	lsl.w	r2, r1, r2
 8000692:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000696:	4313      	orrs	r3, r2
 8000698:	6003      	str	r3, [r0, #0]
 800069a:	e00d      	b.n	80006b8 <HAL_RCC_OscConfig+0x14c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800069c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800069e:	f7ff fe05 	bl	80002ac <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006a2:	4d44      	ldr	r5, [pc, #272]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80006a4:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006a6:	682b      	ldr	r3, [r5, #0]
 80006a8:	079f      	lsls	r7, r3, #30
 80006aa:	d505      	bpl.n	80006b8 <HAL_RCC_OscConfig+0x14c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ac:	f7ff fdfe 	bl	80002ac <HAL_GetTick>
 80006b0:	1b80      	subs	r0, r0, r6
 80006b2:	2802      	cmp	r0, #2
 80006b4:	d9f7      	bls.n	80006a6 <HAL_RCC_OscConfig+0x13a>
 80006b6:	e7a0      	b.n	80005fa <HAL_RCC_OscConfig+0x8e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006b8:	6823      	ldr	r3, [r4, #0]
 80006ba:	071e      	lsls	r6, r3, #28
 80006bc:	d403      	bmi.n	80006c6 <HAL_RCC_OscConfig+0x15a>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006be:	6823      	ldr	r3, [r4, #0]
 80006c0:	075d      	lsls	r5, r3, #29
 80006c2:	d548      	bpl.n	8000756 <HAL_RCC_OscConfig+0x1ea>
 80006c4:	e01f      	b.n	8000706 <HAL_RCC_OscConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80006c6:	6962      	ldr	r2, [r4, #20]
 80006c8:	4b3c      	ldr	r3, [pc, #240]	; (80007bc <HAL_RCC_OscConfig+0x250>)
 80006ca:	b172      	cbz	r2, 80006ea <HAL_RCC_OscConfig+0x17e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80006cc:	2201      	movs	r2, #1
 80006ce:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80006d0:	f7ff fdec 	bl	80002ac <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006d4:	4d37      	ldr	r5, [pc, #220]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80006d6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006d8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006da:	0798      	lsls	r0, r3, #30
 80006dc:	d4ef      	bmi.n	80006be <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006de:	f7ff fde5 	bl	80002ac <HAL_GetTick>
 80006e2:	1b80      	subs	r0, r0, r6
 80006e4:	2802      	cmp	r0, #2
 80006e6:	d9f7      	bls.n	80006d8 <HAL_RCC_OscConfig+0x16c>
 80006e8:	e787      	b.n	80005fa <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80006ea:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80006ec:	f7ff fdde 	bl	80002ac <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006f0:	4d30      	ldr	r5, [pc, #192]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80006f2:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006f6:	0799      	lsls	r1, r3, #30
 80006f8:	d5e1      	bpl.n	80006be <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006fa:	f7ff fdd7 	bl	80002ac <HAL_GetTick>
 80006fe:	1b80      	subs	r0, r0, r6
 8000700:	2802      	cmp	r0, #2
 8000702:	d9f7      	bls.n	80006f4 <HAL_RCC_OscConfig+0x188>
 8000704:	e779      	b.n	80005fa <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800070c:	4d2c      	ldr	r5, [pc, #176]	; (80007c0 <HAL_RCC_OscConfig+0x254>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000710:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000720:	682b      	ldr	r3, [r5, #0]
 8000722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000726:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000728:	f7ff fdc0 	bl	80002ac <HAL_GetTick>
 800072c:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800072e:	682b      	ldr	r3, [r5, #0]
 8000730:	05da      	lsls	r2, r3, #23
 8000732:	d513      	bpl.n	800075c <HAL_RCC_OscConfig+0x1f0>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000734:	68a3      	ldr	r3, [r4, #8]
 8000736:	4d1f      	ldr	r5, [pc, #124]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
 8000738:	2b01      	cmp	r3, #1
 800073a:	d115      	bne.n	8000768 <HAL_RCC_OscConfig+0x1fc>
 800073c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000744:	f7ff fdb2 	bl	80002ac <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000748:	4d1a      	ldr	r5, [pc, #104]	; (80007b4 <HAL_RCC_OscConfig+0x248>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800074a:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800074c:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000750:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000752:	079b      	lsls	r3, r3, #30
 8000754:	d519      	bpl.n	800078a <HAL_RCC_OscConfig+0x21e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000756:	69a2      	ldr	r2, [r4, #24]
 8000758:	bba2      	cbnz	r2, 80007c4 <HAL_RCC_OscConfig+0x258>
 800075a:	e072      	b.n	8000842 <HAL_RCC_OscConfig+0x2d6>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800075c:	f7ff fda6 	bl	80002ac <HAL_GetTick>
 8000760:	1b80      	subs	r0, r0, r6
 8000762:	2802      	cmp	r0, #2
 8000764:	d9e3      	bls.n	800072e <HAL_RCC_OscConfig+0x1c2>
 8000766:	e748      	b.n	80005fa <HAL_RCC_OscConfig+0x8e>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000768:	2b05      	cmp	r3, #5
 800076a:	d104      	bne.n	8000776 <HAL_RCC_OscConfig+0x20a>
 800076c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	672b      	str	r3, [r5, #112]	; 0x70
 8000774:	e7e2      	b.n	800073c <HAL_RCC_OscConfig+0x1d0>
 8000776:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000778:	f022 0201 	bic.w	r2, r2, #1
 800077c:	672a      	str	r2, [r5, #112]	; 0x70
 800077e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000780:	f022 0204 	bic.w	r2, r2, #4
 8000784:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000786:	b133      	cbz	r3, 8000796 <HAL_RCC_OscConfig+0x22a>
 8000788:	e7dc      	b.n	8000744 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800078a:	f7ff fd8f 	bl	80002ac <HAL_GetTick>
 800078e:	1b80      	subs	r0, r0, r6
 8000790:	42b8      	cmp	r0, r7
 8000792:	d9dd      	bls.n	8000750 <HAL_RCC_OscConfig+0x1e4>
 8000794:	e731      	b.n	80005fa <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000796:	f7ff fd89 	bl	80002ac <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800079a:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800079e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80007a2:	0798      	lsls	r0, r3, #30
 80007a4:	d5d7      	bpl.n	8000756 <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007a6:	f7ff fd81 	bl	80002ac <HAL_GetTick>
 80007aa:	1b80      	subs	r0, r0, r6
 80007ac:	42b8      	cmp	r0, r7
 80007ae:	d9f7      	bls.n	80007a0 <HAL_RCC_OscConfig+0x234>
 80007b0:	e723      	b.n	80005fa <HAL_RCC_OscConfig+0x8e>
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	42470000 	.word	0x42470000
 80007bc:	42470e80 	.word	0x42470e80
 80007c0:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80007c4:	4d2e      	ldr	r5, [pc, #184]	; (8000880 <HAL_RCC_OscConfig+0x314>)
 80007c6:	68ab      	ldr	r3, [r5, #8]
 80007c8:	f003 030c 	and.w	r3, r3, #12
 80007cc:	2b08      	cmp	r3, #8
 80007ce:	f43f aeec 	beq.w	80005aa <HAL_RCC_OscConfig+0x3e>
 80007d2:	4e2c      	ldr	r6, [pc, #176]	; (8000884 <HAL_RCC_OscConfig+0x318>)
 80007d4:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007d6:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80007d8:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007da:	d141      	bne.n	8000860 <HAL_RCC_OscConfig+0x2f4>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007dc:	f7ff fd66 	bl	80002ac <HAL_GetTick>
 80007e0:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007e2:	682b      	ldr	r3, [r5, #0]
 80007e4:	4f26      	ldr	r7, [pc, #152]	; (8000880 <HAL_RCC_OscConfig+0x314>)
 80007e6:	0199      	lsls	r1, r3, #6
 80007e8:	d42d      	bmi.n	8000846 <HAL_RCC_OscConfig+0x2da>
 80007ea:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80007ee:	fa92 f2a2 	rbit	r2, r2
 80007f2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007f6:	fab2 fe82 	clz	lr, r2
 80007fa:	fa93 f3a3 	rbit	r3, r3
 80007fe:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8000802:	fab3 f583 	clz	r5, r3
 8000806:	fa92 f2a2 	rbit	r2, r2
 800080a:	69e0      	ldr	r0, [r4, #28]
 800080c:	6a23      	ldr	r3, [r4, #32]
 800080e:	fab2 f182 	clz	r1, r2
 8000812:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000814:	4303      	orrs	r3, r0
 8000816:	fa02 f20e 	lsl.w	r2, r2, lr
 800081a:	ea43 0002 	orr.w	r0, r3, r2
 800081e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000820:	085a      	lsrs	r2, r3, #1
 8000822:	3a01      	subs	r2, #1
 8000824:	fa02 f305 	lsl.w	r3, r2, r5
 8000828:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800082a:	4303      	orrs	r3, r0
 800082c:	408a      	lsls	r2, r1
 800082e:	4313      	orrs	r3, r2
 8000830:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000832:	2301      	movs	r3, #1
 8000834:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000836:	f7ff fd39 	bl	80002ac <HAL_GetTick>
 800083a:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	019a      	lsls	r2, r3, #6
 8000840:	d508      	bpl.n	8000854 <HAL_RCC_OscConfig+0x2e8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000842:	2000      	movs	r0, #0
 8000844:	e018      	b.n	8000878 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000846:	f7ff fd31 	bl	80002ac <HAL_GetTick>
 800084a:	ebc8 0000 	rsb	r0, r8, r0
 800084e:	2802      	cmp	r0, #2
 8000850:	d9c7      	bls.n	80007e2 <HAL_RCC_OscConfig+0x276>
 8000852:	e6d2      	b.n	80005fa <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000854:	f7ff fd2a 	bl	80002ac <HAL_GetTick>
 8000858:	1b00      	subs	r0, r0, r4
 800085a:	2802      	cmp	r0, #2
 800085c:	d9ee      	bls.n	800083c <HAL_RCC_OscConfig+0x2d0>
 800085e:	e6cc      	b.n	80005fa <HAL_RCC_OscConfig+0x8e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000860:	f7ff fd24 	bl	80002ac <HAL_GetTick>
 8000864:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000866:	682b      	ldr	r3, [r5, #0]
 8000868:	019b      	lsls	r3, r3, #6
 800086a:	d5ea      	bpl.n	8000842 <HAL_RCC_OscConfig+0x2d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800086c:	f7ff fd1e 	bl	80002ac <HAL_GetTick>
 8000870:	1b00      	subs	r0, r0, r4
 8000872:	2802      	cmp	r0, #2
 8000874:	d9f7      	bls.n	8000866 <HAL_RCC_OscConfig+0x2fa>
 8000876:	e6c0      	b.n	80005fa <HAL_RCC_OscConfig+0x8e>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000878:	b002      	add	sp, #8
 800087a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	42470060 	.word	0x42470060

08000888 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000888:	491b      	ldr	r1, [pc, #108]	; (80008f8 <HAL_RCC_GetSysClockFreq+0x70>)
 800088a:	688b      	ldr	r3, [r1, #8]
 800088c:	f003 030c 	and.w	r3, r3, #12
 8000890:	2b04      	cmp	r3, #4
 8000892:	d02c      	beq.n	80008ee <HAL_RCC_GetSysClockFreq+0x66>
 8000894:	2b08      	cmp	r3, #8
 8000896:	d12c      	bne.n	80008f2 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000898:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800089a:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800089c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80008a0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80008a4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80008a8:	684b      	ldr	r3, [r1, #4]
 80008aa:	fa92 f2a2 	rbit	r2, r2
 80008ae:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80008b2:	fab2 f282 	clz	r2, r2
 80008b6:	ea01 0103 	and.w	r1, r1, r3
 80008ba:	fa21 f102 	lsr.w	r1, r1, r2
 80008be:	bf14      	ite	ne
 80008c0:	4a0e      	ldrne	r2, [pc, #56]	; (80008fc <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80008c2:	4a0f      	ldreq	r2, [pc, #60]	; (8000900 <HAL_RCC_GetSysClockFreq+0x78>)
 80008c4:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80008c8:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80008ca:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80008ce:	6852      	ldr	r2, [r2, #4]
 80008d0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80008d4:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80008d8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80008dc:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80008e0:	fa22 f000 	lsr.w	r0, r2, r0
 80008e4:	3001      	adds	r0, #1
 80008e6:	0040      	lsls	r0, r0, #1
 80008e8:	fbb3 f0f0 	udiv	r0, r3, r0
 80008ec:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80008ee:	4803      	ldr	r0, [pc, #12]	; (80008fc <HAL_RCC_GetSysClockFreq+0x74>)
 80008f0:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80008f2:	4803      	ldr	r0, [pc, #12]	; (8000900 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	016e3600 	.word	0x016e3600
 8000900:	00f42400 	.word	0x00f42400

08000904 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000904:	4b55      	ldr	r3, [pc, #340]	; (8000a5c <HAL_RCC_ClockConfig+0x158>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	f002 020f 	and.w	r2, r2, #15
 800090c:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800090e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000912:	4605      	mov	r5, r0
 8000914:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000916:	d30a      	bcc.n	800092e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000918:	6829      	ldr	r1, [r5, #0]
 800091a:	0788      	lsls	r0, r1, #30
 800091c:	d511      	bpl.n	8000942 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800091e:	4850      	ldr	r0, [pc, #320]	; (8000a60 <HAL_RCC_ClockConfig+0x15c>)
 8000920:	6883      	ldr	r3, [r0, #8]
 8000922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000926:	68ab      	ldr	r3, [r5, #8]
 8000928:	4313      	orrs	r3, r2
 800092a:	6083      	str	r3, [r0, #8]
 800092c:	e009      	b.n	8000942 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800092e:	b2ca      	uxtb	r2, r1
 8000930:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f003 030f 	and.w	r3, r3, #15
 8000938:	4299      	cmp	r1, r3
 800093a:	d0ed      	beq.n	8000918 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800093c:	2001      	movs	r0, #1
 800093e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000942:	07c9      	lsls	r1, r1, #31
 8000944:	d406      	bmi.n	8000954 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000946:	4b45      	ldr	r3, [pc, #276]	; (8000a5c <HAL_RCC_ClockConfig+0x158>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	f002 020f 	and.w	r2, r2, #15
 800094e:	4296      	cmp	r6, r2
 8000950:	d351      	bcc.n	80009f6 <HAL_RCC_ClockConfig+0xf2>
 8000952:	e057      	b.n	8000a04 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000954:	686b      	ldr	r3, [r5, #4]
 8000956:	4a42      	ldr	r2, [pc, #264]	; (8000a60 <HAL_RCC_ClockConfig+0x15c>)
 8000958:	2b01      	cmp	r3, #1
 800095a:	d103      	bne.n	8000964 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095c:	6812      	ldr	r2, [r2, #0]
 800095e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000962:	e008      	b.n	8000976 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000964:	1e99      	subs	r1, r3, #2
 8000966:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000968:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800096a:	d802      	bhi.n	8000972 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800096c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000970:	e001      	b.n	8000976 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000972:	f012 0f02 	tst.w	r2, #2
 8000976:	d0e1      	beq.n	800093c <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000978:	4c39      	ldr	r4, [pc, #228]	; (8000a60 <HAL_RCC_ClockConfig+0x15c>)
 800097a:	68a2      	ldr	r2, [r4, #8]
 800097c:	f022 0203 	bic.w	r2, r2, #3
 8000980:	4313      	orrs	r3, r2
 8000982:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000984:	f7ff fc92 	bl	80002ac <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000988:	686b      	ldr	r3, [r5, #4]
 800098a:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800098c:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800098e:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000992:	d10c      	bne.n	80009ae <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000994:	68a3      	ldr	r3, [r4, #8]
 8000996:	f003 030c 	and.w	r3, r3, #12
 800099a:	2b04      	cmp	r3, #4
 800099c:	d0d3      	beq.n	8000946 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800099e:	f7ff fc85 	bl	80002ac <HAL_GetTick>
 80009a2:	1bc0      	subs	r0, r0, r7
 80009a4:	4540      	cmp	r0, r8
 80009a6:	d9f5      	bls.n	8000994 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 80009a8:	2003      	movs	r0, #3
 80009aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d10a      	bne.n	80009c8 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009b2:	68a3      	ldr	r3, [r4, #8]
 80009b4:	f003 030c 	and.w	r3, r3, #12
 80009b8:	2b08      	cmp	r3, #8
 80009ba:	d0c4      	beq.n	8000946 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009bc:	f7ff fc76 	bl	80002ac <HAL_GetTick>
 80009c0:	1bc0      	subs	r0, r0, r7
 80009c2:	4540      	cmp	r0, r8
 80009c4:	d9f5      	bls.n	80009b2 <HAL_RCC_ClockConfig+0xae>
 80009c6:	e7ef      	b.n	80009a8 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d10f      	bne.n	80009ec <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80009cc:	68a3      	ldr	r3, [r4, #8]
 80009ce:	f003 030c 	and.w	r3, r3, #12
 80009d2:	2b0c      	cmp	r3, #12
 80009d4:	d0b7      	beq.n	8000946 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009d6:	f7ff fc69 	bl	80002ac <HAL_GetTick>
 80009da:	1bc0      	subs	r0, r0, r7
 80009dc:	4540      	cmp	r0, r8
 80009de:	d9f5      	bls.n	80009cc <HAL_RCC_ClockConfig+0xc8>
 80009e0:	e7e2      	b.n	80009a8 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009e2:	f7ff fc63 	bl	80002ac <HAL_GetTick>
 80009e6:	1bc0      	subs	r0, r0, r7
 80009e8:	4540      	cmp	r0, r8
 80009ea:	d8dd      	bhi.n	80009a8 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009ec:	68a3      	ldr	r3, [r4, #8]
 80009ee:	f013 0f0c 	tst.w	r3, #12
 80009f2:	d1f6      	bne.n	80009e2 <HAL_RCC_ClockConfig+0xde>
 80009f4:	e7a7      	b.n	8000946 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009f6:	b2f2      	uxtb	r2, r6
 80009f8:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 030f 	and.w	r3, r3, #15
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d19b      	bne.n	800093c <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a04:	6829      	ldr	r1, [r5, #0]
 8000a06:	074a      	lsls	r2, r1, #29
 8000a08:	d506      	bpl.n	8000a18 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a0a:	4815      	ldr	r0, [pc, #84]	; (8000a60 <HAL_RCC_ClockConfig+0x15c>)
 8000a0c:	6883      	ldr	r3, [r0, #8]
 8000a0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000a12:	68eb      	ldr	r3, [r5, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a18:	070b      	lsls	r3, r1, #28
 8000a1a:	d507      	bpl.n	8000a2c <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a1c:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <HAL_RCC_ClockConfig+0x15c>)
 8000a1e:	6929      	ldr	r1, [r5, #16]
 8000a20:	6893      	ldr	r3, [r2, #8]
 8000a22:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000a26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a2a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000a2c:	f7ff ff2c 	bl	8000888 <HAL_RCC_GetSysClockFreq>
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_RCC_ClockConfig+0x15c>)
 8000a32:	22f0      	movs	r2, #240	; 0xf0
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	fa92 f2a2 	rbit	r2, r2
 8000a3a:	fab2 f282 	clz	r2, r2
 8000a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a42:	40d3      	lsrs	r3, r2
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_RCC_ClockConfig+0x160>)
 8000a46:	5cd3      	ldrb	r3, [r2, r3]
 8000a48:	40d8      	lsrs	r0, r3
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <HAL_RCC_ClockConfig+0x164>)
 8000a4c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff fbf6 	bl	8000240 <HAL_InitTick>
  
  return HAL_OK;
 8000a54:	2000      	movs	r0, #0
}
 8000a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023c00 	.word	0x40023c00
 8000a60:	40023800 	.word	0x40023800
 8000a64:	0800100c 	.word	0x0800100c
 8000a68:	20000000 	.word	0x20000000

08000a6c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000a6c:	4b01      	ldr	r3, [pc, #4]	; (8000a74 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000000 	.word	0x20000000

08000a78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000a7a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	fa92 f2a2 	rbit	r2, r2
 8000a84:	fab2 f282 	clz	r2, r2
 8000a88:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a8c:	40d3      	lsrs	r3, r2
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000a90:	5cd3      	ldrb	r3, [r2, r3]
 8000a92:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000a94:	6810      	ldr	r0, [r2, #0]
}
 8000a96:	40d8      	lsrs	r0, r3
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	0800100c 	.word	0x0800100c
 8000aa4:	20000000 	.word	0x20000000

08000aa8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8000aaa:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	fa92 f2a2 	rbit	r2, r2
 8000ab4:	fab2 f282 	clz	r2, r2
 8000ab8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000abc:	40d3      	lsrs	r3, r2
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000ac0:	5cd3      	ldrb	r3, [r2, r3]
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000ac4:	6810      	ldr	r0, [r2, #0]
} 
 8000ac6:	40d8      	lsrs	r0, r3
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	0800100c 	.word	0x0800100c
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000adc:	6807      	ldr	r7, [r0, #0]
 8000ade:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ae0:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000ae2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000ae6:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ae8:	68a1      	ldr	r1, [r4, #8]
 8000aea:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000aec:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000aee:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000af0:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8000af2:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000af4:	4311      	orrs	r1, r2
 8000af6:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000af8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000afc:	430a      	orrs	r2, r1
 8000afe:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000b00:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000b04:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000b06:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000b08:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000b0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000b0e:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000b10:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000b14:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	4b7c      	ldr	r3, [pc, #496]	; (8000d0c <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000b1c:	d17c      	bne.n	8000c18 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000b1e:	429f      	cmp	r7, r3
 8000b20:	d003      	beq.n	8000b2a <UART_SetConfig+0x52>
 8000b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b26:	429f      	cmp	r7, r3
 8000b28:	d131      	bne.n	8000b8e <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000b2a:	f7ff ffbd 	bl	8000aa8 <HAL_RCC_GetPCLK2Freq>
 8000b2e:	6863      	ldr	r3, [r4, #4]
 8000b30:	2519      	movs	r5, #25
 8000b32:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8000b36:	4368      	muls	r0, r5
 8000b38:	fbb0 f8f8 	udiv	r8, r0, r8
 8000b3c:	f7ff ffb4 	bl	8000aa8 <HAL_RCC_GetPCLK2Freq>
 8000b40:	6866      	ldr	r6, [r4, #4]
 8000b42:	4368      	muls	r0, r5
 8000b44:	0076      	lsls	r6, r6, #1
 8000b46:	fbb0 f6f6 	udiv	r6, r0, r6
 8000b4a:	f7ff ffad 	bl	8000aa8 <HAL_RCC_GetPCLK2Freq>
 8000b4e:	6863      	ldr	r3, [r4, #4]
 8000b50:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4368      	muls	r0, r5
 8000b58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b5c:	fbb0 f0f9 	udiv	r0, r0, r9
 8000b60:	fb09 6610 	mls	r6, r9, r0, r6
 8000b64:	f7ff ffa0 	bl	8000aa8 <HAL_RCC_GetPCLK2Freq>
 8000b68:	fbb8 f8f9 	udiv	r8, r8, r9
 8000b6c:	6861      	ldr	r1, [r4, #4]
 8000b6e:	00f6      	lsls	r6, r6, #3
 8000b70:	3632      	adds	r6, #50	; 0x32
 8000b72:	fbb6 f6f9 	udiv	r6, r6, r9
 8000b76:	0076      	lsls	r6, r6, #1
 8000b78:	4368      	muls	r0, r5
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000b80:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8000b84:	fbb0 faf1 	udiv	sl, r0, r1
 8000b88:	f7ff ff8e 	bl	8000aa8 <HAL_RCC_GetPCLK2Freq>
 8000b8c:	e030      	b.n	8000bf0 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000b8e:	f7ff ff73 	bl	8000a78 <HAL_RCC_GetPCLK1Freq>
 8000b92:	6863      	ldr	r3, [r4, #4]
 8000b94:	2519      	movs	r5, #25
 8000b96:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8000b9a:	4368      	muls	r0, r5
 8000b9c:	fbb0 f8f8 	udiv	r8, r0, r8
 8000ba0:	f7ff ff6a 	bl	8000a78 <HAL_RCC_GetPCLK1Freq>
 8000ba4:	6866      	ldr	r6, [r4, #4]
 8000ba6:	4368      	muls	r0, r5
 8000ba8:	0076      	lsls	r6, r6, #1
 8000baa:	fbb0 f6f6 	udiv	r6, r0, r6
 8000bae:	f7ff ff63 	bl	8000a78 <HAL_RCC_GetPCLK1Freq>
 8000bb2:	6863      	ldr	r3, [r4, #4]
 8000bb4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4368      	muls	r0, r5
 8000bbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bc0:	fbb0 f0f9 	udiv	r0, r0, r9
 8000bc4:	fb09 6610 	mls	r6, r9, r0, r6
 8000bc8:	f7ff ff56 	bl	8000a78 <HAL_RCC_GetPCLK1Freq>
 8000bcc:	fbb8 f8f9 	udiv	r8, r8, r9
 8000bd0:	00f6      	lsls	r6, r6, #3
 8000bd2:	6861      	ldr	r1, [r4, #4]
 8000bd4:	3632      	adds	r6, #50	; 0x32
 8000bd6:	fbb6 f6f9 	udiv	r6, r6, r9
 8000bda:	0076      	lsls	r6, r6, #1
 8000bdc:	4368      	muls	r0, r5
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000be4:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8000be8:	fbb0 faf1 	udiv	sl, r0, r1
 8000bec:	f7ff ff44 	bl	8000a78 <HAL_RCC_GetPCLK1Freq>
 8000bf0:	4345      	muls	r5, r0
 8000bf2:	6860      	ldr	r0, [r4, #4]
 8000bf4:	0040      	lsls	r0, r0, #1
 8000bf6:	fbb5 f0f0 	udiv	r0, r5, r0
 8000bfa:	fbb0 f0f9 	udiv	r0, r0, r9
 8000bfe:	fb09 a210 	mls	r2, r9, r0, sl
 8000c02:	00d2      	lsls	r2, r2, #3
 8000c04:	3232      	adds	r2, #50	; 0x32
 8000c06:	fbb2 f3f9 	udiv	r3, r2, r9
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	4443      	add	r3, r8
 8000c10:	441e      	add	r6, r3
 8000c12:	60be      	str	r6, [r7, #8]
 8000c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000c18:	429f      	cmp	r7, r3
 8000c1a:	d002      	beq.n	8000c22 <UART_SetConfig+0x14a>
 8000c1c:	4b3c      	ldr	r3, [pc, #240]	; (8000d10 <UART_SetConfig+0x238>)
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d130      	bne.n	8000c84 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000c22:	f7ff ff41 	bl	8000aa8 <HAL_RCC_GetPCLK2Freq>
 8000c26:	6863      	ldr	r3, [r4, #4]
 8000c28:	2519      	movs	r5, #25
 8000c2a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8000c2e:	4368      	muls	r0, r5
 8000c30:	fbb0 f8f8 	udiv	r8, r0, r8
 8000c34:	f7ff ff38 	bl	8000aa8 <HAL_RCC_GetPCLK2Freq>
 8000c38:	6866      	ldr	r6, [r4, #4]
 8000c3a:	4368      	muls	r0, r5
 8000c3c:	00b6      	lsls	r6, r6, #2
 8000c3e:	fbb0 f6f6 	udiv	r6, r0, r6
 8000c42:	f7ff ff31 	bl	8000aa8 <HAL_RCC_GetPCLK2Freq>
 8000c46:	6863      	ldr	r3, [r4, #4]
 8000c48:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4368      	muls	r0, r5
 8000c50:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c54:	fbb0 f0f9 	udiv	r0, r0, r9
 8000c58:	fb09 6610 	mls	r6, r9, r0, r6
 8000c5c:	f7ff ff24 	bl	8000aa8 <HAL_RCC_GetPCLK2Freq>
 8000c60:	fbb8 f8f9 	udiv	r8, r8, r9
 8000c64:	6861      	ldr	r1, [r4, #4]
 8000c66:	0136      	lsls	r6, r6, #4
 8000c68:	4368      	muls	r0, r5
 8000c6a:	0089      	lsls	r1, r1, #2
 8000c6c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000c70:	3632      	adds	r6, #50	; 0x32
 8000c72:	fbb0 faf1 	udiv	sl, r0, r1
 8000c76:	fbb6 f6f9 	udiv	r6, r6, r9
 8000c7a:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8000c7e:	f7ff ff13 	bl	8000aa8 <HAL_RCC_GetPCLK2Freq>
 8000c82:	e02f      	b.n	8000ce4 <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000c84:	f7ff fef8 	bl	8000a78 <HAL_RCC_GetPCLK1Freq>
 8000c88:	6863      	ldr	r3, [r4, #4]
 8000c8a:	2519      	movs	r5, #25
 8000c8c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8000c90:	4368      	muls	r0, r5
 8000c92:	fbb0 f8f8 	udiv	r8, r0, r8
 8000c96:	f7ff feef 	bl	8000a78 <HAL_RCC_GetPCLK1Freq>
 8000c9a:	6866      	ldr	r6, [r4, #4]
 8000c9c:	4368      	muls	r0, r5
 8000c9e:	00b6      	lsls	r6, r6, #2
 8000ca0:	fbb0 f6f6 	udiv	r6, r0, r6
 8000ca4:	f7ff fee8 	bl	8000a78 <HAL_RCC_GetPCLK1Freq>
 8000ca8:	6863      	ldr	r3, [r4, #4]
 8000caa:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4368      	muls	r0, r5
 8000cb2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cb6:	fbb0 f0f9 	udiv	r0, r0, r9
 8000cba:	fb09 6610 	mls	r6, r9, r0, r6
 8000cbe:	f7ff fedb 	bl	8000a78 <HAL_RCC_GetPCLK1Freq>
 8000cc2:	fbb8 f8f9 	udiv	r8, r8, r9
 8000cc6:	6861      	ldr	r1, [r4, #4]
 8000cc8:	0136      	lsls	r6, r6, #4
 8000cca:	3632      	adds	r6, #50	; 0x32
 8000ccc:	4368      	muls	r0, r5
 8000cce:	fbb6 f6f9 	udiv	r6, r6, r9
 8000cd2:	0089      	lsls	r1, r1, #2
 8000cd4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000cd8:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8000cdc:	fbb0 faf1 	udiv	sl, r0, r1
 8000ce0:	f7ff feca 	bl	8000a78 <HAL_RCC_GetPCLK1Freq>
 8000ce4:	4345      	muls	r5, r0
 8000ce6:	6860      	ldr	r0, [r4, #4]
 8000ce8:	0080      	lsls	r0, r0, #2
 8000cea:	fbb5 f0f0 	udiv	r0, r5, r0
 8000cee:	fbb0 f0f9 	udiv	r0, r0, r9
 8000cf2:	fb09 a210 	mls	r2, r9, r0, sl
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	3232      	adds	r2, #50	; 0x32
 8000cfa:	fbb2 f3f9 	udiv	r3, r2, r9
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	4433      	add	r3, r6
 8000d04:	4443      	add	r3, r8
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	40011000 	.word	0x40011000
 8000d10:	40011400 	.word	0x40011400

08000d14 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000d14:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8000d16:	4604      	mov	r4, r0
 8000d18:	b340      	cbz	r0, 8000d6c <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8000d1a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000d1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d22:	b91b      	cbnz	r3, 8000d2c <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000d24:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8000d28:	f000 f8de 	bl	8000ee8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000d2c:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000d2e:	2324      	movs	r3, #36	; 0x24
 8000d30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000d34:	68d3      	ldr	r3, [r2, #12]
 8000d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d3a:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f7ff fecb 	bl	8000ad8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	691a      	ldr	r2, [r3, #16]
 8000d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000d4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000d52:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d5a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d5c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8000d5e:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d60:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000d62:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000d66:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8000d6a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8000d6c:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8000d6e:	bd10      	pop	{r4, pc}

08000d70 <SystemClock_Config>:
  {
  }
}

void SystemClock_Config(void)
{
 8000d70:	b530      	push	{r4, r5, lr}
 8000d72:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <SystemClock_Config+0xa8>)
 8000d76:	2100      	movs	r1, #0
 8000d78:	9101      	str	r1, [sp, #4]
 8000d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d80:	641a      	str	r2, [r3, #64]	; 0x40
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <SystemClock_Config+0xac>)
 8000d8e:	9102      	str	r1, [sp, #8]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d9e:	9302      	str	r3, [sp, #8]
 8000da0:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000da2:	2301      	movs	r3, #1
 8000da4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000daa:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000db0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 24;
 8000db2:	2318      	movs	r3, #24

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 24;
 8000db6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000db8:	2504      	movs	r5, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 24;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dba:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	a808      	add	r0, sp, #32

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 24;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dc2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc4:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dc6:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc8:	f7ff fbd0 	bl	800056c <HAL_RCC_OscConfig>
 8000dcc:	b100      	cbz	r0, 8000dd0 <SystemClock_Config+0x60>
 8000dce:	e7fe      	b.n	8000dce <SystemClock_Config+0x5e>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd8:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dda:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ddc:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000de2:	a803      	add	r0, sp, #12

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000de6:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000de8:	f7ff fd8c 	bl	8000904 <HAL_RCC_ClockConfig>
 8000dec:	4604      	mov	r4, r0
 8000dee:	b100      	cbz	r0, 8000df2 <SystemClock_Config+0x82>
 8000df0:	e7fe      	b.n	8000df0 <SystemClock_Config+0x80>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000df2:	f7ff fe3b 	bl	8000a6c <HAL_RCC_GetHCLKFreq>
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dfe:	f7ff faa1 	bl	8000344 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e02:	4628      	mov	r0, r5
 8000e04:	f7ff fab4 	bl	8000370 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e08:	4622      	mov	r2, r4
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f7ff fa64 	bl	80002dc <HAL_NVIC_SetPriority>
}
 8000e14:	b015      	add	sp, #84	; 0x54
 8000e16:	bd30      	pop	{r4, r5, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40007000 	.word	0x40007000

08000e20 <main>:
void Error_Handler(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);

int main(void)
{
 8000e20:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8000e22:	f7ff fa21 	bl	8000268 <HAL_Init>
  SystemClock_Config();
 8000e26:	f7ff ffa3 	bl	8000d70 <SystemClock_Config>
}

static void MX_GPIO_Init(void)
{

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <main+0x5c>)
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	6b11      	ldr	r1, [r2, #48]	; 0x30

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8000e32:	4813      	ldr	r0, [pc, #76]	; (8000e80 <main+0x60>)
}

static void MX_GPIO_Init(void)
{

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e34:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000e38:	6311      	str	r1, [r2, #48]	; 0x30
 8000e3a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000e3c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000e40:	9100      	str	r1, [sp, #0]
 8000e42:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000e48:	f041 0101 	orr.w	r1, r1, #1
 8000e4c:	6311      	str	r1, [r2, #48]	; 0x30
 8000e4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <main+0x64>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	6083      	str	r3, [r0, #8]

static void MX_GPIO_Init(void)
{

  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	f002 0201 	and.w	r2, r2, #1
 8000e58:	9201      	str	r2, [sp, #4]
 8000e5a:	9a01      	ldr	r2, [sp, #4]
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	60c3      	str	r3, [r0, #12]
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8000e5e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e62:	e880 0006 	stmia.w	r0, {r1, r2}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e66:	220c      	movs	r2, #12

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e68:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e6a:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6c:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6e:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e70:	f7ff ff50 	bl	8000d14 <HAL_UART_Init>
 8000e74:	b100      	cbz	r0, 8000e78 <main+0x58>
 8000e76:	e7fe      	b.n	8000e76 <main+0x56>
 8000e78:	e7fe      	b.n	8000e78 <main+0x58>
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	20000024 	.word	0x20000024
 8000e84:	40011000 	.word	0x40011000

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f7ff fa14 	bl	80002b8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	4611      	mov	r1, r2
 8000e94:	f06f 000b 	mvn.w	r0, #11
 8000e98:	f7ff fa20 	bl	80002dc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	f06f 000a 	mvn.w	r0, #10
 8000ea4:	f7ff fa1a 	bl	80002dc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4611      	mov	r1, r2
 8000eac:	f06f 0009 	mvn.w	r0, #9
 8000eb0:	f7ff fa14 	bl	80002dc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	f06f 0004 	mvn.w	r0, #4
 8000ebc:	f7ff fa0e 	bl	80002dc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	f06f 0003 	mvn.w	r0, #3
 8000ec8:	f7ff fa08 	bl	80002dc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4611      	mov	r1, r2
 8000ed0:	f06f 0001 	mvn.w	r0, #1
 8000ed4:	f7ff fa02 	bl	80002dc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4611      	mov	r1, r2
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ee4:	f7ff b9fa 	b.w	80002dc <HAL_NVIC_SetPriority>

08000ee8 <HAL_UART_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8000eea:	6802      	ldr	r2, [r0, #0]
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_UART_MspInit+0x48>)
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d11a      	bne.n	8000f28 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <HAL_UART_MspInit+0x50>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000efc:	f042 0210 	orr.w	r2, r2, #16
 8000f00:	645a      	str	r2, [r3, #68]	; 0x44
 8000f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f04:	f003 0310 	and.w	r3, r3, #16
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f10:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f20:	2307      	movs	r3, #7
 8000f22:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f7ff fa36 	bl	8000394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f28:	b007      	add	sp, #28
 8000f2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f2e:	bf00      	nop
 8000f30:	40011000 	.word	0x40011000
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000

08000f3c <NMI_Handler>:
 8000f3c:	4770      	bx	lr

08000f3e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler>

08000f40 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler>

08000f42 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000f42:	e7fe      	b.n	8000f42 <BusFault_Handler>

08000f44 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler>

08000f46 <SVC_Handler>:
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000f4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4e:	f7ff f9a5 	bl	800029c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8000f56:	f7ff ba18 	b.w	800038a <HAL_SYSTICK_IRQHandler>
	...

08000f5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f5c:	490f      	ldr	r1, [pc, #60]	; (8000f9c <SystemInit+0x40>)
 8000f5e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000f62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <SystemInit+0x44>)
 8000f6c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f6e:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f70:	f042 0201 	orr.w	r2, r2, #1
 8000f74:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f76:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000f7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f82:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <SystemInit+0x48>)
 8000f86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f8e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f90:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f96:	608b      	str	r3, [r1, #8]
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	24003010 	.word	0x24003010

08000fa8 <__libc_init_array>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <__libc_init_array+0x3c>)
 8000fac:	4c0e      	ldr	r4, [pc, #56]	; (8000fe8 <__libc_init_array+0x40>)
 8000fae:	1ae4      	subs	r4, r4, r3
 8000fb0:	10a4      	asrs	r4, r4, #2
 8000fb2:	2500      	movs	r5, #0
 8000fb4:	461e      	mov	r6, r3
 8000fb6:	42a5      	cmp	r5, r4
 8000fb8:	d004      	beq.n	8000fc4 <__libc_init_array+0x1c>
 8000fba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fbe:	4798      	blx	r3
 8000fc0:	3501      	adds	r5, #1
 8000fc2:	e7f8      	b.n	8000fb6 <__libc_init_array+0xe>
 8000fc4:	f000 f816 	bl	8000ff4 <_init>
 8000fc8:	4c08      	ldr	r4, [pc, #32]	; (8000fec <__libc_init_array+0x44>)
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <__libc_init_array+0x48>)
 8000fcc:	1ae4      	subs	r4, r4, r3
 8000fce:	10a4      	asrs	r4, r4, #2
 8000fd0:	2500      	movs	r5, #0
 8000fd2:	461e      	mov	r6, r3
 8000fd4:	42a5      	cmp	r5, r4
 8000fd6:	d004      	beq.n	8000fe2 <__libc_init_array+0x3a>
 8000fd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fdc:	4798      	blx	r3
 8000fde:	3501      	adds	r5, #1
 8000fe0:	e7f8      	b.n	8000fd4 <__libc_init_array+0x2c>
 8000fe2:	bd70      	pop	{r4, r5, r6, pc}
 8000fe4:	0800101c 	.word	0x0800101c
 8000fe8:	0800101c 	.word	0x0800101c
 8000fec:	08001020 	.word	0x08001020
 8000ff0:	0800101c 	.word	0x0800101c

08000ff4 <_init>:
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff6:	bf00      	nop
 8000ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ffa:	bc08      	pop	{r3}
 8000ffc:	469e      	mov	lr, r3
 8000ffe:	4770      	bx	lr

08001000 <_fini>:
 8001000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001002:	bf00      	nop
 8001004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001006:	bc08      	pop	{r3}
 8001008:	469e      	mov	lr, r3
 800100a:	4770      	bx	lr
