
F:\workspace\embedWorkspace\atollic\cppPrintf_v0_2\Debug\cppPrintf_v0_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008924  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08008ad0  08008ad0  00018ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000030  08008d40  08008d40  00018d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000d8  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08008e48  08008e48  00018e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08008e4c  08008e4c  00018e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000000fc  20000000  08008e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
  9 .bss          000005ac  20000100  20000100  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006ac  200006ac  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_line   000063e6  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000c8c4  00000000  00000000  00026512  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002074  00000000  00000000  00032dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b88  00000000  00000000  00034e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a40  00000000  00000000  000359d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000038b6  00000000  00000000  00036418  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  00039cce  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002d2c  00000000  00000000  00039d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000076  00000000  00000000  0003ca78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000100 	.word	0x20000100
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008ab8 	.word	0x08008ab8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000104 	.word	0x20000104
 80001e8:	08008ab8 	.word	0x08008ab8

080001ec <selfrel_offset31>:
 80001ec:	6803      	ldr	r3, [r0, #0]
 80001ee:	005a      	lsls	r2, r3, #1
 80001f0:	bf4c      	ite	mi
 80001f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80001f6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80001fa:	4418      	add	r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop

08000200 <search_EIT_table>:
 8000200:	b361      	cbz	r1, 800025c <search_EIT_table+0x5c>
 8000202:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000206:	f101 3aff 	add.w	sl, r1, #4294967295
 800020a:	4690      	mov	r8, r2
 800020c:	4606      	mov	r6, r0
 800020e:	46d1      	mov	r9, sl
 8000210:	2700      	movs	r7, #0
 8000212:	eb07 0409 	add.w	r4, r7, r9
 8000216:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800021a:	1064      	asrs	r4, r4, #1
 800021c:	00e5      	lsls	r5, r4, #3
 800021e:	1971      	adds	r1, r6, r5
 8000220:	4608      	mov	r0, r1
 8000222:	f7ff ffe3 	bl	80001ec <selfrel_offset31>
 8000226:	45a2      	cmp	sl, r4
 8000228:	4683      	mov	fp, r0
 800022a:	f105 0008 	add.w	r0, r5, #8
 800022e:	4430      	add	r0, r6
 8000230:	d009      	beq.n	8000246 <search_EIT_table+0x46>
 8000232:	f7ff ffdb 	bl	80001ec <selfrel_offset31>
 8000236:	45c3      	cmp	fp, r8
 8000238:	f100 30ff 	add.w	r0, r0, #4294967295
 800023c:	d805      	bhi.n	800024a <search_EIT_table+0x4a>
 800023e:	4540      	cmp	r0, r8
 8000240:	d209      	bcs.n	8000256 <search_EIT_table+0x56>
 8000242:	1c67      	adds	r7, r4, #1
 8000244:	e7e5      	b.n	8000212 <search_EIT_table+0x12>
 8000246:	45c3      	cmp	fp, r8
 8000248:	d905      	bls.n	8000256 <search_EIT_table+0x56>
 800024a:	42a7      	cmp	r7, r4
 800024c:	d002      	beq.n	8000254 <search_EIT_table+0x54>
 800024e:	f104 39ff 	add.w	r9, r4, #4294967295
 8000252:	e7de      	b.n	8000212 <search_EIT_table+0x12>
 8000254:	2100      	movs	r1, #0
 8000256:	4608      	mov	r0, r1
 8000258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800025c:	4608      	mov	r0, r1
 800025e:	4770      	bx	lr

08000260 <__gnu_unwind_get_pr_addr>:
 8000260:	2801      	cmp	r0, #1
 8000262:	d007      	beq.n	8000274 <__gnu_unwind_get_pr_addr+0x14>
 8000264:	2802      	cmp	r0, #2
 8000266:	d007      	beq.n	8000278 <__gnu_unwind_get_pr_addr+0x18>
 8000268:	4b04      	ldr	r3, [pc, #16]	; (800027c <__gnu_unwind_get_pr_addr+0x1c>)
 800026a:	2800      	cmp	r0, #0
 800026c:	bf0c      	ite	eq
 800026e:	4618      	moveq	r0, r3
 8000270:	2000      	movne	r0, #0
 8000272:	4770      	bx	lr
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <__gnu_unwind_get_pr_addr+0x20>)
 8000276:	4770      	bx	lr
 8000278:	4802      	ldr	r0, [pc, #8]	; (8000284 <__gnu_unwind_get_pr_addr+0x24>)
 800027a:	4770      	bx	lr
 800027c:	0800096d 	.word	0x0800096d
 8000280:	08000971 	.word	0x08000971
 8000284:	08000975 	.word	0x08000975

08000288 <get_eit_entry>:
 8000288:	b530      	push	{r4, r5, lr}
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <get_eit_entry+0x94>)
 800028c:	b083      	sub	sp, #12
 800028e:	4604      	mov	r4, r0
 8000290:	1e8d      	subs	r5, r1, #2
 8000292:	b37b      	cbz	r3, 80002f4 <get_eit_entry+0x6c>
 8000294:	a901      	add	r1, sp, #4
 8000296:	4628      	mov	r0, r5
 8000298:	f3af 8000 	nop.w
 800029c:	b320      	cbz	r0, 80002e8 <get_eit_entry+0x60>
 800029e:	9901      	ldr	r1, [sp, #4]
 80002a0:	462a      	mov	r2, r5
 80002a2:	f7ff ffad 	bl	8000200 <search_EIT_table>
 80002a6:	4601      	mov	r1, r0
 80002a8:	b1f0      	cbz	r0, 80002e8 <get_eit_entry+0x60>
 80002aa:	f7ff ff9f 	bl	80001ec <selfrel_offset31>
 80002ae:	684b      	ldr	r3, [r1, #4]
 80002b0:	64a0      	str	r0, [r4, #72]	; 0x48
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d012      	beq.n	80002dc <get_eit_entry+0x54>
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	f101 0004 	add.w	r0, r1, #4
 80002bc:	db20      	blt.n	8000300 <get_eit_entry+0x78>
 80002be:	f7ff ff95 	bl	80001ec <selfrel_offset31>
 80002c2:	2300      	movs	r3, #0
 80002c4:	64e0      	str	r0, [r4, #76]	; 0x4c
 80002c6:	6523      	str	r3, [r4, #80]	; 0x50
 80002c8:	6803      	ldr	r3, [r0, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	db1c      	blt.n	8000308 <get_eit_entry+0x80>
 80002ce:	f7ff ff8d 	bl	80001ec <selfrel_offset31>
 80002d2:	2300      	movs	r3, #0
 80002d4:	6120      	str	r0, [r4, #16]
 80002d6:	4618      	mov	r0, r3
 80002d8:	b003      	add	sp, #12
 80002da:	bd30      	pop	{r4, r5, pc}
 80002dc:	2300      	movs	r3, #0
 80002de:	6123      	str	r3, [r4, #16]
 80002e0:	2305      	movs	r3, #5
 80002e2:	4618      	mov	r0, r3
 80002e4:	b003      	add	sp, #12
 80002e6:	bd30      	pop	{r4, r5, pc}
 80002e8:	2300      	movs	r3, #0
 80002ea:	6123      	str	r3, [r4, #16]
 80002ec:	2309      	movs	r3, #9
 80002ee:	4618      	mov	r0, r3
 80002f0:	b003      	add	sp, #12
 80002f2:	bd30      	pop	{r4, r5, pc}
 80002f4:	490a      	ldr	r1, [pc, #40]	; (8000320 <get_eit_entry+0x98>)
 80002f6:	480b      	ldr	r0, [pc, #44]	; (8000324 <get_eit_entry+0x9c>)
 80002f8:	1a09      	subs	r1, r1, r0
 80002fa:	10c9      	asrs	r1, r1, #3
 80002fc:	9101      	str	r1, [sp, #4]
 80002fe:	e7cf      	b.n	80002a0 <get_eit_entry+0x18>
 8000300:	2301      	movs	r3, #1
 8000302:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000304:	6523      	str	r3, [r4, #80]	; 0x50
 8000306:	e7df      	b.n	80002c8 <get_eit_entry+0x40>
 8000308:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800030c:	f7ff ffa8 	bl	8000260 <__gnu_unwind_get_pr_addr>
 8000310:	2800      	cmp	r0, #0
 8000312:	6120      	str	r0, [r4, #16]
 8000314:	bf14      	ite	ne
 8000316:	2300      	movne	r3, #0
 8000318:	2309      	moveq	r3, #9
 800031a:	e7dc      	b.n	80002d6 <get_eit_entry+0x4e>
 800031c:	00000000 	.word	0x00000000
 8000320:	08008e48 	.word	0x08008e48
 8000324:	08008d70 	.word	0x08008d70

08000328 <restore_non_core_regs>:
 8000328:	6803      	ldr	r3, [r0, #0]
 800032a:	07da      	lsls	r2, r3, #31
 800032c:	b510      	push	{r4, lr}
 800032e:	4604      	mov	r4, r0
 8000330:	d406      	bmi.n	8000340 <restore_non_core_regs+0x18>
 8000332:	079b      	lsls	r3, r3, #30
 8000334:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000338:	d509      	bpl.n	800034e <restore_non_core_regs+0x26>
 800033a:	f000 fc59 	bl	8000bf0 <__gnu_Unwind_Restore_VFP_D>
 800033e:	6823      	ldr	r3, [r4, #0]
 8000340:	0759      	lsls	r1, r3, #29
 8000342:	d509      	bpl.n	8000358 <restore_non_core_regs+0x30>
 8000344:	071a      	lsls	r2, r3, #28
 8000346:	d50e      	bpl.n	8000366 <restore_non_core_regs+0x3e>
 8000348:	06db      	lsls	r3, r3, #27
 800034a:	d513      	bpl.n	8000374 <restore_non_core_regs+0x4c>
 800034c:	bd10      	pop	{r4, pc}
 800034e:	f000 fc47 	bl	8000be0 <__gnu_Unwind_Restore_VFP>
 8000352:	6823      	ldr	r3, [r4, #0]
 8000354:	0759      	lsls	r1, r3, #29
 8000356:	d4f5      	bmi.n	8000344 <restore_non_core_regs+0x1c>
 8000358:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800035c:	f000 fc50 	bl	8000c00 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000360:	6823      	ldr	r3, [r4, #0]
 8000362:	071a      	lsls	r2, r3, #28
 8000364:	d4f0      	bmi.n	8000348 <restore_non_core_regs+0x20>
 8000366:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800036a:	f000 fc51 	bl	8000c10 <__gnu_Unwind_Restore_WMMXD>
 800036e:	6823      	ldr	r3, [r4, #0]
 8000370:	06db      	lsls	r3, r3, #27
 8000372:	d4eb      	bmi.n	800034c <restore_non_core_regs+0x24>
 8000374:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800037c:	f000 bc8c 	b.w	8000c98 <__gnu_Unwind_Restore_WMMXC>

08000380 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000380:	6803      	ldr	r3, [r0, #0]
 8000382:	b10b      	cbz	r3, 8000388 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8000384:	4418      	add	r0, r3
 8000386:	4770      	bx	lr
 8000388:	4618      	mov	r0, r3
 800038a:	4770      	bx	lr

0800038c <__gnu_unwind_24bit.isra.1>:
 800038c:	2009      	movs	r0, #9
 800038e:	4770      	bx	lr

08000390 <_Unwind_DebugHook>:
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop

08000394 <unwind_phase2>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	4604      	mov	r4, r0
 8000398:	460d      	mov	r5, r1
 800039a:	e008      	b.n	80003ae <unwind_phase2+0x1a>
 800039c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800039e:	6163      	str	r3, [r4, #20]
 80003a0:	462a      	mov	r2, r5
 80003a2:	6923      	ldr	r3, [r4, #16]
 80003a4:	4621      	mov	r1, r4
 80003a6:	2001      	movs	r0, #1
 80003a8:	4798      	blx	r3
 80003aa:	2808      	cmp	r0, #8
 80003ac:	d108      	bne.n	80003c0 <unwind_phase2+0x2c>
 80003ae:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80003b0:	4620      	mov	r0, r4
 80003b2:	f7ff ff69 	bl	8000288 <get_eit_entry>
 80003b6:	4606      	mov	r6, r0
 80003b8:	2800      	cmp	r0, #0
 80003ba:	d0ef      	beq.n	800039c <unwind_phase2+0x8>
 80003bc:	f008 fb12 	bl	80089e4 <abort>
 80003c0:	2807      	cmp	r0, #7
 80003c2:	d1fb      	bne.n	80003bc <unwind_phase2+0x28>
 80003c4:	4630      	mov	r0, r6
 80003c6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80003c8:	f7ff ffe2 	bl	8000390 <_Unwind_DebugHook>
 80003cc:	1d28      	adds	r0, r5, #4
 80003ce:	f000 fbfb 	bl	8000bc8 <__restore_core_regs>
 80003d2:	bf00      	nop

080003d4 <unwind_phase2_forced>:
 80003d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d8:	1d0c      	adds	r4, r1, #4
 80003da:	4606      	mov	r6, r0
 80003dc:	4617      	mov	r7, r2
 80003de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80003e4:	ad03      	add	r5, sp, #12
 80003e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003f4:	ac02      	add	r4, sp, #8
 80003f6:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80003fa:	f8d6 9018 	ldr.w	r9, [r6, #24]
 80003fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000402:	2300      	movs	r3, #0
 8000404:	4630      	mov	r0, r6
 8000406:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000408:	6023      	str	r3, [r4, #0]
 800040a:	f7ff ff3d 	bl	8000288 <get_eit_entry>
 800040e:	2f00      	cmp	r7, #0
 8000410:	4605      	mov	r5, r0
 8000412:	bf14      	ite	ne
 8000414:	270a      	movne	r7, #10
 8000416:	2709      	moveq	r7, #9
 8000418:	b17d      	cbz	r5, 800043a <unwind_phase2_forced+0x66>
 800041a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800041c:	f047 0110 	orr.w	r1, r7, #16
 8000420:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000424:	4632      	mov	r2, r6
 8000426:	6463      	str	r3, [r4, #68]	; 0x44
 8000428:	2001      	movs	r0, #1
 800042a:	4633      	mov	r3, r6
 800042c:	47c0      	blx	r8
 800042e:	bb78      	cbnz	r0, 8000490 <unwind_phase2_forced+0xbc>
 8000430:	4628      	mov	r0, r5
 8000432:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800043c:	6173      	str	r3, [r6, #20]
 800043e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000442:	4621      	mov	r1, r4
 8000444:	a87a      	add	r0, sp, #488	; 0x1e8
 8000446:	f008 fad4 	bl	80089f2 <memcpy>
 800044a:	6933      	ldr	r3, [r6, #16]
 800044c:	aa7a      	add	r2, sp, #488	; 0x1e8
 800044e:	4631      	mov	r1, r6
 8000450:	4638      	mov	r0, r7
 8000452:	4798      	blx	r3
 8000454:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000456:	4682      	mov	sl, r0
 8000458:	e88d 0210 	stmia.w	sp, {r4, r9}
 800045c:	4639      	mov	r1, r7
 800045e:	6463      	str	r3, [r4, #68]	; 0x44
 8000460:	4632      	mov	r2, r6
 8000462:	4633      	mov	r3, r6
 8000464:	2001      	movs	r0, #1
 8000466:	47c0      	blx	r8
 8000468:	b990      	cbnz	r0, 8000490 <unwind_phase2_forced+0xbc>
 800046a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800046e:	a97a      	add	r1, sp, #488	; 0x1e8
 8000470:	4620      	mov	r0, r4
 8000472:	f008 fabe 	bl	80089f2 <memcpy>
 8000476:	f1ba 0f08 	cmp.w	sl, #8
 800047a:	d106      	bne.n	800048a <unwind_phase2_forced+0xb6>
 800047c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800047e:	4630      	mov	r0, r6
 8000480:	f7ff ff02 	bl	8000288 <get_eit_entry>
 8000484:	2709      	movs	r7, #9
 8000486:	4605      	mov	r5, r0
 8000488:	e7c6      	b.n	8000418 <unwind_phase2_forced+0x44>
 800048a:	f1ba 0f07 	cmp.w	sl, #7
 800048e:	d004      	beq.n	800049a <unwind_phase2_forced+0xc6>
 8000490:	2009      	movs	r0, #9
 8000492:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4628      	mov	r0, r5
 800049c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800049e:	f7ff ff77 	bl	8000390 <_Unwind_DebugHook>
 80004a2:	a803      	add	r0, sp, #12
 80004a4:	f000 fb90 	bl	8000bc8 <__restore_core_regs>

080004a8 <_Unwind_GetCFA>:
 80004a8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80004aa:	4770      	bx	lr

080004ac <__gnu_Unwind_RaiseException>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80004b0:	640b      	str	r3, [r1, #64]	; 0x40
 80004b2:	1d0e      	adds	r6, r1, #4
 80004b4:	460f      	mov	r7, r1
 80004b6:	4604      	mov	r4, r0
 80004b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004ba:	b0f9      	sub	sp, #484	; 0x1e4
 80004bc:	ad01      	add	r5, sp, #4
 80004be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004cc:	f04f 36ff 	mov.w	r6, #4294967295
 80004d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004d4:	9600      	str	r6, [sp, #0]
 80004d6:	e006      	b.n	80004e6 <__gnu_Unwind_RaiseException+0x3a>
 80004d8:	6923      	ldr	r3, [r4, #16]
 80004da:	466a      	mov	r2, sp
 80004dc:	4621      	mov	r1, r4
 80004de:	4798      	blx	r3
 80004e0:	2808      	cmp	r0, #8
 80004e2:	4605      	mov	r5, r0
 80004e4:	d108      	bne.n	80004f8 <__gnu_Unwind_RaiseException+0x4c>
 80004e6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80004e8:	4620      	mov	r0, r4
 80004ea:	f7ff fecd 	bl	8000288 <get_eit_entry>
 80004ee:	2800      	cmp	r0, #0
 80004f0:	d0f2      	beq.n	80004d8 <__gnu_Unwind_RaiseException+0x2c>
 80004f2:	2009      	movs	r0, #9
 80004f4:	b079      	add	sp, #484	; 0x1e4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4668      	mov	r0, sp
 80004fa:	f7ff ff15 	bl	8000328 <restore_non_core_regs>
 80004fe:	2d06      	cmp	r5, #6
 8000500:	d1f7      	bne.n	80004f2 <__gnu_Unwind_RaiseException+0x46>
 8000502:	4639      	mov	r1, r7
 8000504:	4620      	mov	r0, r4
 8000506:	f7ff ff45 	bl	8000394 <unwind_phase2>
 800050a:	bf00      	nop

0800050c <__gnu_Unwind_ForcedUnwind>:
 800050c:	b430      	push	{r4, r5}
 800050e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000510:	60c1      	str	r1, [r0, #12]
 8000512:	6182      	str	r2, [r0, #24]
 8000514:	4619      	mov	r1, r3
 8000516:	641d      	str	r5, [r3, #64]	; 0x40
 8000518:	2200      	movs	r2, #0
 800051a:	bc30      	pop	{r4, r5}
 800051c:	e75a      	b.n	80003d4 <unwind_phase2_forced>
 800051e:	bf00      	nop

08000520 <__gnu_Unwind_Resume>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	68c6      	ldr	r6, [r0, #12]
 8000524:	6943      	ldr	r3, [r0, #20]
 8000526:	640b      	str	r3, [r1, #64]	; 0x40
 8000528:	b126      	cbz	r6, 8000534 <__gnu_Unwind_Resume+0x14>
 800052a:	2201      	movs	r2, #1
 800052c:	f7ff ff52 	bl	80003d4 <unwind_phase2_forced>
 8000530:	f008 fa58 	bl	80089e4 <abort>
 8000534:	6903      	ldr	r3, [r0, #16]
 8000536:	460a      	mov	r2, r1
 8000538:	4604      	mov	r4, r0
 800053a:	460d      	mov	r5, r1
 800053c:	4601      	mov	r1, r0
 800053e:	2002      	movs	r0, #2
 8000540:	4798      	blx	r3
 8000542:	2807      	cmp	r0, #7
 8000544:	d007      	beq.n	8000556 <__gnu_Unwind_Resume+0x36>
 8000546:	2808      	cmp	r0, #8
 8000548:	d103      	bne.n	8000552 <__gnu_Unwind_Resume+0x32>
 800054a:	4629      	mov	r1, r5
 800054c:	4620      	mov	r0, r4
 800054e:	f7ff ff21 	bl	8000394 <unwind_phase2>
 8000552:	f008 fa47 	bl	80089e4 <abort>
 8000556:	4630      	mov	r0, r6
 8000558:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800055a:	f7ff ff19 	bl	8000390 <_Unwind_DebugHook>
 800055e:	1d28      	adds	r0, r5, #4
 8000560:	f000 fb32 	bl	8000bc8 <__restore_core_regs>

08000564 <__gnu_Unwind_Resume_or_Rethrow>:
 8000564:	68c2      	ldr	r2, [r0, #12]
 8000566:	b11a      	cbz	r2, 8000570 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000568:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800056a:	640a      	str	r2, [r1, #64]	; 0x40
 800056c:	2200      	movs	r2, #0
 800056e:	e731      	b.n	80003d4 <unwind_phase2_forced>
 8000570:	e79c      	b.n	80004ac <__gnu_Unwind_RaiseException>
 8000572:	bf00      	nop

08000574 <_Unwind_Complete>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_Unwind_DeleteException>:
 8000578:	6883      	ldr	r3, [r0, #8]
 800057a:	b113      	cbz	r3, 8000582 <_Unwind_DeleteException+0xa>
 800057c:	4601      	mov	r1, r0
 800057e:	2001      	movs	r0, #1
 8000580:	4718      	bx	r3
 8000582:	4770      	bx	lr

08000584 <_Unwind_VRS_Get>:
 8000584:	b500      	push	{lr}
 8000586:	2904      	cmp	r1, #4
 8000588:	d807      	bhi.n	800059a <_Unwind_VRS_Get+0x16>
 800058a:	e8df f001 	tbb	[pc, r1]
 800058e:	0903      	.short	0x0903
 8000590:	0906      	.short	0x0906
 8000592:	09          	.byte	0x09
 8000593:	00          	.byte	0x00
 8000594:	b90b      	cbnz	r3, 800059a <_Unwind_VRS_Get+0x16>
 8000596:	2a0f      	cmp	r2, #15
 8000598:	d905      	bls.n	80005a6 <_Unwind_VRS_Get+0x22>
 800059a:	2002      	movs	r0, #2
 800059c:	f85d fb04 	ldr.w	pc, [sp], #4
 80005a0:	2001      	movs	r0, #1
 80005a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80005a6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80005aa:	4618      	mov	r0, r3
 80005ac:	6853      	ldr	r3, [r2, #4]
 80005ae:	9a01      	ldr	r2, [sp, #4]
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80005b6:	bf00      	nop

080005b8 <_Unwind_GetGR>:
 80005b8:	b510      	push	{r4, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	2300      	movs	r3, #0
 80005be:	ac03      	add	r4, sp, #12
 80005c0:	460a      	mov	r2, r1
 80005c2:	9400      	str	r4, [sp, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f7ff ffdd 	bl	8000584 <_Unwind_VRS_Get>
 80005ca:	9803      	ldr	r0, [sp, #12]
 80005cc:	b004      	add	sp, #16
 80005ce:	bd10      	pop	{r4, pc}

080005d0 <_Unwind_VRS_Set>:
 80005d0:	b500      	push	{lr}
 80005d2:	2904      	cmp	r1, #4
 80005d4:	d807      	bhi.n	80005e6 <_Unwind_VRS_Set+0x16>
 80005d6:	e8df f001 	tbb	[pc, r1]
 80005da:	0903      	.short	0x0903
 80005dc:	0906      	.short	0x0906
 80005de:	09          	.byte	0x09
 80005df:	00          	.byte	0x00
 80005e0:	b90b      	cbnz	r3, 80005e6 <_Unwind_VRS_Set+0x16>
 80005e2:	2a0f      	cmp	r2, #15
 80005e4:	d905      	bls.n	80005f2 <_Unwind_VRS_Set+0x22>
 80005e6:	2002      	movs	r0, #2
 80005e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80005ec:	2001      	movs	r0, #1
 80005ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80005f2:	9901      	ldr	r1, [sp, #4]
 80005f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80005f8:	6809      	ldr	r1, [r1, #0]
 80005fa:	6051      	str	r1, [r2, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000602:	bf00      	nop

08000604 <_Unwind_SetGR>:
 8000604:	b510      	push	{r4, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	ac04      	add	r4, sp, #16
 800060a:	2300      	movs	r3, #0
 800060c:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000610:	460a      	mov	r2, r1
 8000612:	9400      	str	r4, [sp, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f7ff ffdb 	bl	80005d0 <_Unwind_VRS_Set>
 800061a:	b004      	add	sp, #16
 800061c:	bd10      	pop	{r4, pc}
 800061e:	bf00      	nop

08000620 <__gnu_Unwind_Backtrace>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000624:	6413      	str	r3, [r2, #64]	; 0x40
 8000626:	1d15      	adds	r5, r2, #4
 8000628:	4607      	mov	r7, r0
 800062a:	460e      	mov	r6, r1
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000632:	ac17      	add	r4, sp, #92	; 0x5c
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000642:	f04f 35ff 	mov.w	r5, #4294967295
 8000646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800064a:	9516      	str	r5, [sp, #88]	; 0x58
 800064c:	e010      	b.n	8000670 <__gnu_Unwind_Backtrace+0x50>
 800064e:	a816      	add	r0, sp, #88	; 0x58
 8000650:	f7ff ffd8 	bl	8000604 <_Unwind_SetGR>
 8000654:	4631      	mov	r1, r6
 8000656:	a816      	add	r0, sp, #88	; 0x58
 8000658:	47b8      	blx	r7
 800065a:	aa16      	add	r2, sp, #88	; 0x58
 800065c:	4669      	mov	r1, sp
 800065e:	b978      	cbnz	r0, 8000680 <__gnu_Unwind_Backtrace+0x60>
 8000660:	9b04      	ldr	r3, [sp, #16]
 8000662:	2008      	movs	r0, #8
 8000664:	4798      	blx	r3
 8000666:	2805      	cmp	r0, #5
 8000668:	4604      	mov	r4, r0
 800066a:	d00a      	beq.n	8000682 <__gnu_Unwind_Backtrace+0x62>
 800066c:	2809      	cmp	r0, #9
 800066e:	d007      	beq.n	8000680 <__gnu_Unwind_Backtrace+0x60>
 8000670:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000672:	4668      	mov	r0, sp
 8000674:	f7ff fe08 	bl	8000288 <get_eit_entry>
 8000678:	466a      	mov	r2, sp
 800067a:	210c      	movs	r1, #12
 800067c:	2800      	cmp	r0, #0
 800067e:	d0e6      	beq.n	800064e <__gnu_Unwind_Backtrace+0x2e>
 8000680:	2409      	movs	r4, #9
 8000682:	a816      	add	r0, sp, #88	; 0x58
 8000684:	f7ff fe50 	bl	8000328 <restore_non_core_regs>
 8000688:	4620      	mov	r0, r4
 800068a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800068e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000690 <__gnu_unwind_pr_common>:
 8000690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000694:	460d      	mov	r5, r1
 8000696:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000698:	b08b      	sub	sp, #44	; 0x2c
 800069a:	1d0c      	adds	r4, r1, #4
 800069c:	6809      	ldr	r1, [r1, #0]
 800069e:	9107      	str	r1, [sp, #28]
 80006a0:	4691      	mov	r9, r2
 80006a2:	9408      	str	r4, [sp, #32]
 80006a4:	f000 0b03 	and.w	fp, r0, #3
 80006a8:	461e      	mov	r6, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d164      	bne.n	8000778 <__gnu_unwind_pr_common+0xe8>
 80006ae:	0209      	lsls	r1, r1, #8
 80006b0:	2303      	movs	r3, #3
 80006b2:	9107      	str	r1, [sp, #28]
 80006b4:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80006b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80006bc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80006be:	f1bb 0f02 	cmp.w	fp, #2
 80006c2:	bf08      	it	eq
 80006c4:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80006c6:	f013 0301 	ands.w	r3, r3, #1
 80006ca:	d143      	bne.n	8000754 <__gnu_unwind_pr_common+0xc4>
 80006cc:	f000 0008 	and.w	r0, r0, #8
 80006d0:	b2c2      	uxtb	r2, r0
 80006d2:	9203      	str	r2, [sp, #12]
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	6827      	ldr	r7, [r4, #0]
 80006d8:	2f00      	cmp	r7, #0
 80006da:	d03d      	beq.n	8000758 <__gnu_unwind_pr_common+0xc8>
 80006dc:	2e02      	cmp	r6, #2
 80006de:	d047      	beq.n	8000770 <__gnu_unwind_pr_common+0xe0>
 80006e0:	8827      	ldrh	r7, [r4, #0]
 80006e2:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 80006e6:	3404      	adds	r4, #4
 80006e8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80006ea:	f028 0a01 	bic.w	sl, r8, #1
 80006ee:	210f      	movs	r1, #15
 80006f0:	4648      	mov	r0, r9
 80006f2:	449a      	add	sl, r3
 80006f4:	f7ff ff60 	bl	80005b8 <_Unwind_GetGR>
 80006f8:	4582      	cmp	sl, r0
 80006fa:	d837      	bhi.n	800076c <__gnu_unwind_pr_common+0xdc>
 80006fc:	f027 0301 	bic.w	r3, r7, #1
 8000700:	449a      	add	sl, r3
 8000702:	4550      	cmp	r0, sl
 8000704:	bf2c      	ite	cs
 8000706:	2000      	movcs	r0, #0
 8000708:	2001      	movcc	r0, #1
 800070a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800070e:	f008 0802 	and.w	r8, r8, #2
 8000712:	f007 0701 	and.w	r7, r7, #1
 8000716:	ea48 0807 	orr.w	r8, r8, r7
 800071a:	f1b8 0f01 	cmp.w	r8, #1
 800071e:	d041      	beq.n	80007a4 <__gnu_unwind_pr_common+0x114>
 8000720:	d338      	bcc.n	8000794 <__gnu_unwind_pr_common+0x104>
 8000722:	f1b8 0f02 	cmp.w	r8, #2
 8000726:	d11d      	bne.n	8000764 <__gnu_unwind_pr_common+0xd4>
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800072e:	9202      	str	r2, [sp, #8]
 8000730:	f1bb 0f00 	cmp.w	fp, #0
 8000734:	d179      	bne.n	800082a <__gnu_unwind_pr_common+0x19a>
 8000736:	b130      	cbz	r0, 8000746 <__gnu_unwind_pr_common+0xb6>
 8000738:	9903      	ldr	r1, [sp, #12]
 800073a:	2900      	cmp	r1, #0
 800073c:	f000 8081 	beq.w	8000842 <__gnu_unwind_pr_common+0x1b2>
 8000740:	2a00      	cmp	r2, #0
 8000742:	f000 80a8 	beq.w	8000896 <__gnu_unwind_pr_common+0x206>
 8000746:	2b00      	cmp	r3, #0
 8000748:	db79      	blt.n	800083e <__gnu_unwind_pr_common+0x1ae>
 800074a:	9b02      	ldr	r3, [sp, #8]
 800074c:	3301      	adds	r3, #1
 800074e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000752:	e7c0      	b.n	80006d6 <__gnu_unwind_pr_common+0x46>
 8000754:	2300      	movs	r3, #0
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	2e02      	cmp	r6, #2
 800075a:	dd40      	ble.n	80007de <__gnu_unwind_pr_common+0x14e>
 800075c:	f7ff fe16 	bl	800038c <__gnu_unwind_24bit.isra.1>
 8000760:	2800      	cmp	r0, #0
 8000762:	d042      	beq.n	80007ea <__gnu_unwind_pr_common+0x15a>
 8000764:	2009      	movs	r0, #9
 8000766:	b00b      	add	sp, #44	; 0x2c
 8000768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800076c:	2000      	movs	r0, #0
 800076e:	e7cc      	b.n	800070a <__gnu_unwind_pr_common+0x7a>
 8000770:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8000774:	3408      	adds	r4, #8
 8000776:	e7b7      	b.n	80006e8 <__gnu_unwind_pr_common+0x58>
 8000778:	2b02      	cmp	r3, #2
 800077a:	dc9f      	bgt.n	80006bc <__gnu_unwind_pr_common+0x2c>
 800077c:	0c0b      	lsrs	r3, r1, #16
 800077e:	b2da      	uxtb	r2, r3
 8000780:	0409      	lsls	r1, r1, #16
 8000782:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000786:	2302      	movs	r3, #2
 8000788:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800078c:	9107      	str	r1, [sp, #28]
 800078e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000792:	e793      	b.n	80006bc <__gnu_unwind_pr_common+0x2c>
 8000794:	f1bb 0f00 	cmp.w	fp, #0
 8000798:	d002      	beq.n	80007a0 <__gnu_unwind_pr_common+0x110>
 800079a:	2800      	cmp	r0, #0
 800079c:	f040 80b0 	bne.w	8000900 <__gnu_unwind_pr_common+0x270>
 80007a0:	3404      	adds	r4, #4
 80007a2:	e798      	b.n	80006d6 <__gnu_unwind_pr_common+0x46>
 80007a4:	f1bb 0f00 	cmp.w	fp, #0
 80007a8:	d126      	bne.n	80007f8 <__gnu_unwind_pr_common+0x168>
 80007aa:	b1b0      	cbz	r0, 80007da <__gnu_unwind_pr_common+0x14a>
 80007ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80007b0:	1c99      	adds	r1, r3, #2
 80007b2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80007b6:	d0d5      	beq.n	8000764 <__gnu_unwind_pr_common+0xd4>
 80007b8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80007bc:	3301      	adds	r3, #1
 80007be:	9106      	str	r1, [sp, #24]
 80007c0:	f000 8094 	beq.w	80008ec <__gnu_unwind_pr_common+0x25c>
 80007c4:	1d20      	adds	r0, r4, #4
 80007c6:	f7ff fddb 	bl	8000380 <_Unwind_decode_typeinfo_ptr.isra.0>
 80007ca:	ab06      	add	r3, sp, #24
 80007cc:	4601      	mov	r1, r0
 80007ce:	4628      	mov	r0, r5
 80007d0:	f3af 8000 	nop.w
 80007d4:	2800      	cmp	r0, #0
 80007d6:	f040 80b8 	bne.w	800094a <__gnu_unwind_pr_common+0x2ba>
 80007da:	3408      	adds	r4, #8
 80007dc:	e77b      	b.n	80006d6 <__gnu_unwind_pr_common+0x46>
 80007de:	a907      	add	r1, sp, #28
 80007e0:	4648      	mov	r0, r9
 80007e2:	f000 faf3 	bl	8000dcc <__gnu_unwind_execute>
 80007e6:	2800      	cmp	r0, #0
 80007e8:	d1bc      	bne.n	8000764 <__gnu_unwind_pr_common+0xd4>
 80007ea:	9b01      	ldr	r3, [sp, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d15c      	bne.n	80008aa <__gnu_unwind_pr_common+0x21a>
 80007f0:	2008      	movs	r0, #8
 80007f2:	b00b      	add	sp, #44	; 0x2c
 80007f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007f8:	210d      	movs	r1, #13
 80007fa:	4648      	mov	r0, r9
 80007fc:	6a2f      	ldr	r7, [r5, #32]
 80007fe:	f7ff fedb 	bl	80005b8 <_Unwind_GetGR>
 8000802:	4287      	cmp	r7, r0
 8000804:	d1e9      	bne.n	80007da <__gnu_unwind_pr_common+0x14a>
 8000806:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000808:	429c      	cmp	r4, r3
 800080a:	d1e6      	bne.n	80007da <__gnu_unwind_pr_common+0x14a>
 800080c:	4620      	mov	r0, r4
 800080e:	f7ff fced 	bl	80001ec <selfrel_offset31>
 8000812:	210f      	movs	r1, #15
 8000814:	4602      	mov	r2, r0
 8000816:	4648      	mov	r0, r9
 8000818:	f7ff fef4 	bl	8000604 <_Unwind_SetGR>
 800081c:	4648      	mov	r0, r9
 800081e:	462a      	mov	r2, r5
 8000820:	2100      	movs	r1, #0
 8000822:	f7ff feef 	bl	8000604 <_Unwind_SetGR>
 8000826:	2007      	movs	r0, #7
 8000828:	e79d      	b.n	8000766 <__gnu_unwind_pr_common+0xd6>
 800082a:	210d      	movs	r1, #13
 800082c:	4648      	mov	r0, r9
 800082e:	6a2f      	ldr	r7, [r5, #32]
 8000830:	f7ff fec2 	bl	80005b8 <_Unwind_GetGR>
 8000834:	4287      	cmp	r7, r0
 8000836:	d048      	beq.n	80008ca <__gnu_unwind_pr_common+0x23a>
 8000838:	6823      	ldr	r3, [r4, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	da85      	bge.n	800074a <__gnu_unwind_pr_common+0xba>
 800083e:	3404      	adds	r4, #4
 8000840:	e783      	b.n	800074a <__gnu_unwind_pr_common+0xba>
 8000842:	9b02      	ldr	r3, [sp, #8]
 8000844:	b33b      	cbz	r3, 8000896 <__gnu_unwind_pr_common+0x206>
 8000846:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800084a:	1d27      	adds	r7, r4, #4
 800084c:	f8cd b010 	str.w	fp, [sp, #16]
 8000850:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000854:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000858:	9605      	str	r6, [sp, #20]
 800085a:	46a3      	mov	fp, r4
 800085c:	461c      	mov	r4, r3
 800085e:	e002      	b.n	8000866 <__gnu_unwind_pr_common+0x1d6>
 8000860:	45b2      	cmp	sl, r6
 8000862:	46b0      	mov	r8, r6
 8000864:	d016      	beq.n	8000894 <__gnu_unwind_pr_common+0x204>
 8000866:	4638      	mov	r0, r7
 8000868:	9406      	str	r4, [sp, #24]
 800086a:	f7ff fd89 	bl	8000380 <_Unwind_decode_typeinfo_ptr.isra.0>
 800086e:	ab06      	add	r3, sp, #24
 8000870:	4601      	mov	r1, r0
 8000872:	2200      	movs	r2, #0
 8000874:	4628      	mov	r0, r5
 8000876:	f3af 8000 	nop.w
 800087a:	f108 0601 	add.w	r6, r8, #1
 800087e:	3704      	adds	r7, #4
 8000880:	2800      	cmp	r0, #0
 8000882:	d0ed      	beq.n	8000860 <__gnu_unwind_pr_common+0x1d0>
 8000884:	9b02      	ldr	r3, [sp, #8]
 8000886:	9e05      	ldr	r6, [sp, #20]
 8000888:	4543      	cmp	r3, r8
 800088a:	465c      	mov	r4, fp
 800088c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000890:	d1d2      	bne.n	8000838 <__gnu_unwind_pr_common+0x1a8>
 8000892:	e000      	b.n	8000896 <__gnu_unwind_pr_common+0x206>
 8000894:	465c      	mov	r4, fp
 8000896:	4648      	mov	r0, r9
 8000898:	210d      	movs	r1, #13
 800089a:	f7ff fe8d 	bl	80005b8 <_Unwind_GetGR>
 800089e:	9b06      	ldr	r3, [sp, #24]
 80008a0:	6228      	str	r0, [r5, #32]
 80008a2:	62ac      	str	r4, [r5, #40]	; 0x28
 80008a4:	626b      	str	r3, [r5, #36]	; 0x24
 80008a6:	2006      	movs	r0, #6
 80008a8:	e75d      	b.n	8000766 <__gnu_unwind_pr_common+0xd6>
 80008aa:	210f      	movs	r1, #15
 80008ac:	4648      	mov	r0, r9
 80008ae:	f7ff fe83 	bl	80005b8 <_Unwind_GetGR>
 80008b2:	210e      	movs	r1, #14
 80008b4:	4602      	mov	r2, r0
 80008b6:	4648      	mov	r0, r9
 80008b8:	f7ff fea4 	bl	8000604 <_Unwind_SetGR>
 80008bc:	4648      	mov	r0, r9
 80008be:	4a2a      	ldr	r2, [pc, #168]	; (8000968 <__gnu_unwind_pr_common+0x2d8>)
 80008c0:	210f      	movs	r1, #15
 80008c2:	f7ff fe9f 	bl	8000604 <_Unwind_SetGR>
 80008c6:	2007      	movs	r0, #7
 80008c8:	e74d      	b.n	8000766 <__gnu_unwind_pr_common+0xd6>
 80008ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008cc:	429c      	cmp	r4, r3
 80008ce:	d1b3      	bne.n	8000838 <__gnu_unwind_pr_common+0x1a8>
 80008d0:	2204      	movs	r2, #4
 80008d2:	2700      	movs	r7, #0
 80008d4:	18a3      	adds	r3, r4, r2
 80008d6:	9902      	ldr	r1, [sp, #8]
 80008d8:	62a9      	str	r1, [r5, #40]	; 0x28
 80008da:	62ef      	str	r7, [r5, #44]	; 0x2c
 80008dc:	632a      	str	r2, [r5, #48]	; 0x30
 80008de:	636b      	str	r3, [r5, #52]	; 0x34
 80008e0:	6823      	ldr	r3, [r4, #0]
 80008e2:	42bb      	cmp	r3, r7
 80008e4:	db1f      	blt.n	8000926 <__gnu_unwind_pr_common+0x296>
 80008e6:	2301      	movs	r3, #1
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	e72e      	b.n	800074a <__gnu_unwind_pr_common+0xba>
 80008ec:	4648      	mov	r0, r9
 80008ee:	210d      	movs	r1, #13
 80008f0:	f7ff fe62 	bl	80005b8 <_Unwind_GetGR>
 80008f4:	6228      	str	r0, [r5, #32]
 80008f6:	9b06      	ldr	r3, [sp, #24]
 80008f8:	626b      	str	r3, [r5, #36]	; 0x24
 80008fa:	62ac      	str	r4, [r5, #40]	; 0x28
 80008fc:	2006      	movs	r0, #6
 80008fe:	e732      	b.n	8000766 <__gnu_unwind_pr_common+0xd6>
 8000900:	4620      	mov	r0, r4
 8000902:	f7ff fc73 	bl	80001ec <selfrel_offset31>
 8000906:	3404      	adds	r4, #4
 8000908:	4606      	mov	r6, r0
 800090a:	63ac      	str	r4, [r5, #56]	; 0x38
 800090c:	4628      	mov	r0, r5
 800090e:	f3af 8000 	nop.w
 8000912:	2800      	cmp	r0, #0
 8000914:	f43f af26 	beq.w	8000764 <__gnu_unwind_pr_common+0xd4>
 8000918:	4648      	mov	r0, r9
 800091a:	4632      	mov	r2, r6
 800091c:	210f      	movs	r1, #15
 800091e:	f7ff fe71 	bl	8000604 <_Unwind_SetGR>
 8000922:	2007      	movs	r0, #7
 8000924:	e71f      	b.n	8000766 <__gnu_unwind_pr_common+0xd6>
 8000926:	4608      	mov	r0, r1
 8000928:	3001      	adds	r0, #1
 800092a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800092e:	f7ff fc5d 	bl	80001ec <selfrel_offset31>
 8000932:	210f      	movs	r1, #15
 8000934:	4602      	mov	r2, r0
 8000936:	4648      	mov	r0, r9
 8000938:	f7ff fe64 	bl	8000604 <_Unwind_SetGR>
 800093c:	4648      	mov	r0, r9
 800093e:	462a      	mov	r2, r5
 8000940:	4639      	mov	r1, r7
 8000942:	f7ff fe5f 	bl	8000604 <_Unwind_SetGR>
 8000946:	2007      	movs	r0, #7
 8000948:	e70d      	b.n	8000766 <__gnu_unwind_pr_common+0xd6>
 800094a:	4607      	mov	r7, r0
 800094c:	210d      	movs	r1, #13
 800094e:	4648      	mov	r0, r9
 8000950:	f7ff fe32 	bl	80005b8 <_Unwind_GetGR>
 8000954:	2f02      	cmp	r7, #2
 8000956:	6228      	str	r0, [r5, #32]
 8000958:	d1cd      	bne.n	80008f6 <__gnu_unwind_pr_common+0x266>
 800095a:	462b      	mov	r3, r5
 800095c:	9a06      	ldr	r2, [sp, #24]
 800095e:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000962:	626b      	str	r3, [r5, #36]	; 0x24
 8000964:	e7c9      	b.n	80008fa <__gnu_unwind_pr_common+0x26a>
 8000966:	bf00      	nop
 8000968:	00000000 	.word	0x00000000

0800096c <__aeabi_unwind_cpp_pr0>:
 800096c:	2300      	movs	r3, #0
 800096e:	e68f      	b.n	8000690 <__gnu_unwind_pr_common>

08000970 <__aeabi_unwind_cpp_pr1>:
 8000970:	2301      	movs	r3, #1
 8000972:	e68d      	b.n	8000690 <__gnu_unwind_pr_common>

08000974 <__aeabi_unwind_cpp_pr2>:
 8000974:	2302      	movs	r3, #2
 8000976:	e68b      	b.n	8000690 <__gnu_unwind_pr_common>

08000978 <_Unwind_VRS_Pop>:
 8000978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097a:	4604      	mov	r4, r0
 800097c:	b0c5      	sub	sp, #276	; 0x114
 800097e:	2904      	cmp	r1, #4
 8000980:	d80d      	bhi.n	800099e <_Unwind_VRS_Pop+0x26>
 8000982:	e8df f001 	tbb	[pc, r1]
 8000986:	0357      	.short	0x0357
 8000988:	310c      	.short	0x310c
 800098a:	0f          	.byte	0x0f
 800098b:	00          	.byte	0x00
 800098c:	2b01      	cmp	r3, #1
 800098e:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000992:	b295      	uxth	r5, r2
 8000994:	d166      	bne.n	8000a64 <_Unwind_VRS_Pop+0xec>
 8000996:	1972      	adds	r2, r6, r5
 8000998:	2a10      	cmp	r2, #16
 800099a:	f240 809f 	bls.w	8000adc <_Unwind_VRS_Pop+0x164>
 800099e:	2002      	movs	r0, #2
 80009a0:	b045      	add	sp, #276	; 0x114
 80009a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1fa      	bne.n	800099e <_Unwind_VRS_Pop+0x26>
 80009a8:	2a10      	cmp	r2, #16
 80009aa:	d8f8      	bhi.n	800099e <_Unwind_VRS_Pop+0x26>
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	06d8      	lsls	r0, r3, #27
 80009b0:	f100 80c9 	bmi.w	8000b46 <_Unwind_VRS_Pop+0x1ce>
 80009b4:	ae22      	add	r6, sp, #136	; 0x88
 80009b6:	4630      	mov	r0, r6
 80009b8:	9201      	str	r2, [sp, #4]
 80009ba:	f000 f977 	bl	8000cac <__gnu_Unwind_Save_WMMXC>
 80009be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80009c0:	9a01      	ldr	r2, [sp, #4]
 80009c2:	2300      	movs	r3, #0
 80009c4:	2501      	movs	r5, #1
 80009c6:	fa05 f103 	lsl.w	r1, r5, r3
 80009ca:	4211      	tst	r1, r2
 80009cc:	d003      	beq.n	80009d6 <_Unwind_VRS_Pop+0x5e>
 80009ce:	6801      	ldr	r1, [r0, #0]
 80009d0:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80009d4:	3004      	adds	r0, #4
 80009d6:	3301      	adds	r3, #1
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d1f4      	bne.n	80009c6 <_Unwind_VRS_Pop+0x4e>
 80009dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80009de:	4630      	mov	r0, r6
 80009e0:	f000 f95a 	bl	8000c98 <__gnu_Unwind_Restore_WMMXC>
 80009e4:	2000      	movs	r0, #0
 80009e6:	e7db      	b.n	80009a0 <_Unwind_VRS_Pop+0x28>
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d1d8      	bne.n	800099e <_Unwind_VRS_Pop+0x26>
 80009ec:	0c15      	lsrs	r5, r2, #16
 80009ee:	b297      	uxth	r7, r2
 80009f0:	19eb      	adds	r3, r5, r7
 80009f2:	2b10      	cmp	r3, #16
 80009f4:	d8d3      	bhi.n	800099e <_Unwind_VRS_Pop+0x26>
 80009f6:	6823      	ldr	r3, [r4, #0]
 80009f8:	071e      	lsls	r6, r3, #28
 80009fa:	f100 80b8 	bmi.w	8000b6e <_Unwind_VRS_Pop+0x1f6>
 80009fe:	ae22      	add	r6, sp, #136	; 0x88
 8000a00:	4630      	mov	r0, r6
 8000a02:	007f      	lsls	r7, r7, #1
 8000a04:	f000 f926 	bl	8000c54 <__gnu_Unwind_Save_WMMXD>
 8000a08:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8000a0c:	1e7b      	subs	r3, r7, #1
 8000a0e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000a10:	b157      	cbz	r7, 8000a28 <_Unwind_VRS_Pop+0xb0>
 8000a12:	3a04      	subs	r2, #4
 8000a14:	4629      	mov	r1, r5
 8000a16:	f851 0b04 	ldr.w	r0, [r1], #4
 8000a1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	1c58      	adds	r0, r3, #1
 8000a22:	d1f8      	bne.n	8000a16 <_Unwind_VRS_Pop+0x9e>
 8000a24:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8000a28:	4630      	mov	r0, r6
 8000a2a:	63a5      	str	r5, [r4, #56]	; 0x38
 8000a2c:	f000 f8f0 	bl	8000c10 <__gnu_Unwind_Restore_WMMXD>
 8000a30:	2000      	movs	r0, #0
 8000a32:	e7b5      	b.n	80009a0 <_Unwind_VRS_Pop+0x28>
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1b2      	bne.n	800099e <_Unwind_VRS_Pop+0x26>
 8000a38:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000a3a:	b297      	uxth	r7, r2
 8000a3c:	1d20      	adds	r0, r4, #4
 8000a3e:	2601      	movs	r6, #1
 8000a40:	fa06 f103 	lsl.w	r1, r6, r3
 8000a44:	4239      	tst	r1, r7
 8000a46:	f103 0301 	add.w	r3, r3, #1
 8000a4a:	d002      	beq.n	8000a52 <_Unwind_VRS_Pop+0xda>
 8000a4c:	6829      	ldr	r1, [r5, #0]
 8000a4e:	6001      	str	r1, [r0, #0]
 8000a50:	3504      	adds	r5, #4
 8000a52:	2b10      	cmp	r3, #16
 8000a54:	f100 0004 	add.w	r0, r0, #4
 8000a58:	d1f2      	bne.n	8000a40 <_Unwind_VRS_Pop+0xc8>
 8000a5a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000a5e:	d13b      	bne.n	8000ad8 <_Unwind_VRS_Pop+0x160>
 8000a60:	63a5      	str	r5, [r4, #56]	; 0x38
 8000a62:	e79d      	b.n	80009a0 <_Unwind_VRS_Pop+0x28>
 8000a64:	2b05      	cmp	r3, #5
 8000a66:	d19a      	bne.n	800099e <_Unwind_VRS_Pop+0x26>
 8000a68:	1977      	adds	r7, r6, r5
 8000a6a:	2f20      	cmp	r7, #32
 8000a6c:	d897      	bhi.n	800099e <_Unwind_VRS_Pop+0x26>
 8000a6e:	2e0f      	cmp	r6, #15
 8000a70:	d965      	bls.n	8000b3e <_Unwind_VRS_Pop+0x1c6>
 8000a72:	462f      	mov	r7, r5
 8000a74:	2d00      	cmp	r5, #0
 8000a76:	d148      	bne.n	8000b0a <_Unwind_VRS_Pop+0x192>
 8000a78:	462a      	mov	r2, r5
 8000a7a:	2700      	movs	r7, #0
 8000a7c:	2a00      	cmp	r2, #0
 8000a7e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000a80:	dd71      	ble.n	8000b66 <_Unwind_VRS_Pop+0x1ee>
 8000a82:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000a86:	4601      	mov	r1, r0
 8000a88:	a844      	add	r0, sp, #272	; 0x110
 8000a8a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000a8e:	388c      	subs	r0, #140	; 0x8c
 8000a90:	f851 5b04 	ldr.w	r5, [r1], #4
 8000a94:	f840 5f04 	str.w	r5, [r0, #4]!
 8000a98:	4291      	cmp	r1, r2
 8000a9a:	d1f9      	bne.n	8000a90 <_Unwind_VRS_Pop+0x118>
 8000a9c:	4608      	mov	r0, r1
 8000a9e:	b197      	cbz	r7, 8000ac6 <_Unwind_VRS_Pop+0x14e>
 8000aa0:	2e10      	cmp	r6, #16
 8000aa2:	4632      	mov	r2, r6
 8000aa4:	a944      	add	r1, sp, #272	; 0x110
 8000aa6:	bf38      	it	cc
 8000aa8:	2210      	movcc	r2, #16
 8000aaa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000aae:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000ab2:	0079      	lsls	r1, r7, #1
 8000ab4:	3a04      	subs	r2, #4
 8000ab6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000aba:	f850 5b04 	ldr.w	r5, [r0], #4
 8000abe:	f842 5f04 	str.w	r5, [r2, #4]!
 8000ac2:	4281      	cmp	r1, r0
 8000ac4:	d1f9      	bne.n	8000aba <_Unwind_VRS_Pop+0x142>
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d047      	beq.n	8000b5a <_Unwind_VRS_Pop+0x1e2>
 8000aca:	2e0f      	cmp	r6, #15
 8000acc:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ace:	d932      	bls.n	8000b36 <_Unwind_VRS_Pop+0x1be>
 8000ad0:	b117      	cbz	r7, 8000ad8 <_Unwind_VRS_Pop+0x160>
 8000ad2:	a802      	add	r0, sp, #8
 8000ad4:	f000 f894 	bl	8000c00 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ad8:	2000      	movs	r0, #0
 8000ada:	e761      	b.n	80009a0 <_Unwind_VRS_Pop+0x28>
 8000adc:	2e0f      	cmp	r6, #15
 8000ade:	f63f af5e 	bhi.w	800099e <_Unwind_VRS_Pop+0x26>
 8000ae2:	2700      	movs	r7, #0
 8000ae4:	6822      	ldr	r2, [r4, #0]
 8000ae6:	07d1      	lsls	r1, r2, #31
 8000ae8:	d50d      	bpl.n	8000b06 <_Unwind_VRS_Pop+0x18e>
 8000aea:	f022 0101 	bic.w	r1, r2, #1
 8000aee:	2b05      	cmp	r3, #5
 8000af0:	6021      	str	r1, [r4, #0]
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	4620      	mov	r0, r4
 8000af6:	d052      	beq.n	8000b9e <_Unwind_VRS_Pop+0x226>
 8000af8:	f022 0203 	bic.w	r2, r2, #3
 8000afc:	f840 2b48 	str.w	r2, [r0], #72
 8000b00:	f000 f872 	bl	8000be8 <__gnu_Unwind_Save_VFP>
 8000b04:	9b01      	ldr	r3, [sp, #4]
 8000b06:	2f00      	cmp	r7, #0
 8000b08:	d051      	beq.n	8000bae <_Unwind_VRS_Pop+0x236>
 8000b0a:	6822      	ldr	r2, [r4, #0]
 8000b0c:	0751      	lsls	r1, r2, #29
 8000b0e:	d436      	bmi.n	8000b7e <_Unwind_VRS_Pop+0x206>
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d03e      	beq.n	8000b92 <_Unwind_VRS_Pop+0x21a>
 8000b14:	2e0f      	cmp	r6, #15
 8000b16:	d806      	bhi.n	8000b26 <_Unwind_VRS_Pop+0x1ae>
 8000b18:	a822      	add	r0, sp, #136	; 0x88
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	f000 f86c 	bl	8000bf8 <__gnu_Unwind_Save_VFP_D>
 8000b20:	9b01      	ldr	r3, [sp, #4]
 8000b22:	2f00      	cmp	r7, #0
 8000b24:	d0a8      	beq.n	8000a78 <_Unwind_VRS_Pop+0x100>
 8000b26:	a802      	add	r0, sp, #8
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	f000 f86d 	bl	8000c08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b2e:	9b01      	ldr	r3, [sp, #4]
 8000b30:	f1c6 0210 	rsb	r2, r6, #16
 8000b34:	e7a2      	b.n	8000a7c <_Unwind_VRS_Pop+0x104>
 8000b36:	a822      	add	r0, sp, #136	; 0x88
 8000b38:	f000 f85a 	bl	8000bf0 <__gnu_Unwind_Restore_VFP_D>
 8000b3c:	e7c8      	b.n	8000ad0 <_Unwind_VRS_Pop+0x158>
 8000b3e:	2f10      	cmp	r7, #16
 8000b40:	d9cf      	bls.n	8000ae2 <_Unwind_VRS_Pop+0x16a>
 8000b42:	3f10      	subs	r7, #16
 8000b44:	e7ce      	b.n	8000ae4 <_Unwind_VRS_Pop+0x16c>
 8000b46:	f023 0310 	bic.w	r3, r3, #16
 8000b4a:	6023      	str	r3, [r4, #0]
 8000b4c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000b50:	9201      	str	r2, [sp, #4]
 8000b52:	f000 f8ab 	bl	8000cac <__gnu_Unwind_Save_WMMXC>
 8000b56:	9a01      	ldr	r2, [sp, #4]
 8000b58:	e72c      	b.n	80009b4 <_Unwind_VRS_Pop+0x3c>
 8000b5a:	3104      	adds	r1, #4
 8000b5c:	63a1      	str	r1, [r4, #56]	; 0x38
 8000b5e:	a822      	add	r0, sp, #136	; 0x88
 8000b60:	f000 f83e 	bl	8000be0 <__gnu_Unwind_Restore_VFP>
 8000b64:	e7b8      	b.n	8000ad8 <_Unwind_VRS_Pop+0x160>
 8000b66:	2f00      	cmp	r7, #0
 8000b68:	d19a      	bne.n	8000aa0 <_Unwind_VRS_Pop+0x128>
 8000b6a:	4601      	mov	r1, r0
 8000b6c:	e7ab      	b.n	8000ac6 <_Unwind_VRS_Pop+0x14e>
 8000b6e:	f023 0308 	bic.w	r3, r3, #8
 8000b72:	6023      	str	r3, [r4, #0]
 8000b74:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000b78:	f000 f86c 	bl	8000c54 <__gnu_Unwind_Save_WMMXD>
 8000b7c:	e73f      	b.n	80009fe <_Unwind_VRS_Pop+0x86>
 8000b7e:	4620      	mov	r0, r4
 8000b80:	f022 0204 	bic.w	r2, r2, #4
 8000b84:	f840 2bd0 	str.w	r2, [r0], #208
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	f000 f83d 	bl	8000c08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b8e:	9b01      	ldr	r3, [sp, #4]
 8000b90:	e7be      	b.n	8000b10 <_Unwind_VRS_Pop+0x198>
 8000b92:	a822      	add	r0, sp, #136	; 0x88
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	f000 f827 	bl	8000be8 <__gnu_Unwind_Save_VFP>
 8000b9a:	9b01      	ldr	r3, [sp, #4]
 8000b9c:	e7c8      	b.n	8000b30 <_Unwind_VRS_Pop+0x1b8>
 8000b9e:	f041 0102 	orr.w	r1, r1, #2
 8000ba2:	f840 1b48 	str.w	r1, [r0], #72
 8000ba6:	f000 f827 	bl	8000bf8 <__gnu_Unwind_Save_VFP_D>
 8000baa:	9b01      	ldr	r3, [sp, #4]
 8000bac:	e7ab      	b.n	8000b06 <_Unwind_VRS_Pop+0x18e>
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d003      	beq.n	8000bba <_Unwind_VRS_Pop+0x242>
 8000bb2:	2e0f      	cmp	r6, #15
 8000bb4:	f63f af60 	bhi.w	8000a78 <_Unwind_VRS_Pop+0x100>
 8000bb8:	e7ae      	b.n	8000b18 <_Unwind_VRS_Pop+0x1a0>
 8000bba:	a822      	add	r0, sp, #136	; 0x88
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	f000 f813 	bl	8000be8 <__gnu_Unwind_Save_VFP>
 8000bc2:	9b01      	ldr	r3, [sp, #4]
 8000bc4:	e758      	b.n	8000a78 <_Unwind_VRS_Pop+0x100>
 8000bc6:	bf00      	nop

08000bc8 <__restore_core_regs>:
 8000bc8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000bcc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000bd0:	469c      	mov	ip, r3
 8000bd2:	46a6      	mov	lr, r4
 8000bd4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000bd8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000bdc:	46e5      	mov	sp, ip
 8000bde:	bd00      	pop	{pc}

08000be0 <__gnu_Unwind_Restore_VFP>:
 8000be0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__gnu_Unwind_Save_VFP>:
 8000be8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__gnu_Unwind_Restore_VFP_D>:
 8000bf0:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__gnu_Unwind_Save_VFP_D>:
 8000bf8:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000c00:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000c08:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__gnu_Unwind_Restore_WMMXD>:
 8000c10:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c14:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c18:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c1c:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c20:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c24:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c28:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c2c:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c30:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c34:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c38:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c3c:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c40:	ecf0 c102 	ldfp	f4, [r0], #8
 8000c44:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c48:	ecf0 e102 	ldfp	f6, [r0], #8
 8000c4c:	ecf0 f102 	ldfp	f7, [r0], #8
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__gnu_Unwind_Save_WMMXD>:
 8000c54:	ece0 0102 	stfe	f0, [r0], #8
 8000c58:	ece0 1102 	stfe	f1, [r0], #8
 8000c5c:	ece0 2102 	stfe	f2, [r0], #8
 8000c60:	ece0 3102 	stfe	f3, [r0], #8
 8000c64:	ece0 4102 	stfe	f4, [r0], #8
 8000c68:	ece0 5102 	stfe	f5, [r0], #8
 8000c6c:	ece0 6102 	stfe	f6, [r0], #8
 8000c70:	ece0 7102 	stfe	f7, [r0], #8
 8000c74:	ece0 8102 	stfp	f0, [r0], #8
 8000c78:	ece0 9102 	stfp	f1, [r0], #8
 8000c7c:	ece0 a102 	stfp	f2, [r0], #8
 8000c80:	ece0 b102 	stfp	f3, [r0], #8
 8000c84:	ece0 c102 	stfp	f4, [r0], #8
 8000c88:	ece0 d102 	stfp	f5, [r0], #8
 8000c8c:	ece0 e102 	stfp	f6, [r0], #8
 8000c90:	ece0 f102 	stfp	f7, [r0], #8
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__gnu_Unwind_Restore_WMMXC>:
 8000c98:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c9c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000ca0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000ca4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <__gnu_Unwind_Save_WMMXC>:
 8000cac:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000cb0:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000cb4:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000cb8:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <_Unwind_RaiseException>:
 8000cc0:	46ec      	mov	ip, sp
 8000cc2:	b500      	push	{lr}
 8000cc4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cc8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cd4:	a901      	add	r1, sp, #4
 8000cd6:	f7ff fbe9 	bl	80004ac <__gnu_Unwind_RaiseException>
 8000cda:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cde:	b012      	add	sp, #72	; 0x48
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <_Unwind_Resume>:
 8000ce4:	46ec      	mov	ip, sp
 8000ce6:	b500      	push	{lr}
 8000ce8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cf8:	a901      	add	r1, sp, #4
 8000cfa:	f7ff fc11 	bl	8000520 <__gnu_Unwind_Resume>
 8000cfe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d02:	b012      	add	sp, #72	; 0x48
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <_Unwind_Resume_or_Rethrow>:
 8000d08:	46ec      	mov	ip, sp
 8000d0a:	b500      	push	{lr}
 8000d0c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d10:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d1c:	a901      	add	r1, sp, #4
 8000d1e:	f7ff fc21 	bl	8000564 <__gnu_Unwind_Resume_or_Rethrow>
 8000d22:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d26:	b012      	add	sp, #72	; 0x48
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <_Unwind_ForcedUnwind>:
 8000d2c:	46ec      	mov	ip, sp
 8000d2e:	b500      	push	{lr}
 8000d30:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d40:	ab01      	add	r3, sp, #4
 8000d42:	f7ff fbe3 	bl	800050c <__gnu_Unwind_ForcedUnwind>
 8000d46:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d4a:	b012      	add	sp, #72	; 0x48
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <_Unwind_Backtrace>:
 8000d50:	46ec      	mov	ip, sp
 8000d52:	b500      	push	{lr}
 8000d54:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d64:	aa01      	add	r2, sp, #4
 8000d66:	f7ff fc5b 	bl	8000620 <__gnu_Unwind_Backtrace>
 8000d6a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d6e:	b012      	add	sp, #72	; 0x48
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <next_unwind_byte>:
 8000d74:	7a03      	ldrb	r3, [r0, #8]
 8000d76:	b91b      	cbnz	r3, 8000d80 <next_unwind_byte+0xc>
 8000d78:	7a43      	ldrb	r3, [r0, #9]
 8000d7a:	b943      	cbnz	r3, 8000d8e <next_unwind_byte+0x1a>
 8000d7c:	20b0      	movs	r0, #176	; 0xb0
 8000d7e:	4770      	bx	lr
 8000d80:	1e5a      	subs	r2, r3, #1
 8000d82:	6803      	ldr	r3, [r0, #0]
 8000d84:	7202      	strb	r2, [r0, #8]
 8000d86:	021a      	lsls	r2, r3, #8
 8000d88:	6002      	str	r2, [r0, #0]
 8000d8a:	0e18      	lsrs	r0, r3, #24
 8000d8c:	4770      	bx	lr
 8000d8e:	6842      	ldr	r2, [r0, #4]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	b410      	push	{r4}
 8000d94:	7243      	strb	r3, [r0, #9]
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	2103      	movs	r1, #3
 8000d9a:	1d14      	adds	r4, r2, #4
 8000d9c:	7201      	strb	r1, [r0, #8]
 8000d9e:	021a      	lsls	r2, r3, #8
 8000da0:	6044      	str	r4, [r0, #4]
 8000da2:	6002      	str	r2, [r0, #0]
 8000da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000da8:	0e18      	lsrs	r0, r3, #24
 8000daa:	4770      	bx	lr

08000dac <_Unwind_GetGR.constprop.0>:
 8000dac:	b500      	push	{lr}
 8000dae:	b085      	sub	sp, #20
 8000db0:	aa03      	add	r2, sp, #12
 8000db2:	2300      	movs	r3, #0
 8000db4:	9200      	str	r2, [sp, #0]
 8000db6:	4619      	mov	r1, r3
 8000db8:	220c      	movs	r2, #12
 8000dba:	f7ff fbe3 	bl	8000584 <_Unwind_VRS_Get>
 8000dbe:	9803      	ldr	r0, [sp, #12]
 8000dc0:	b005      	add	sp, #20
 8000dc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dc6:	bf00      	nop

08000dc8 <unwind_UCB_from_context>:
 8000dc8:	e7f0      	b.n	8000dac <_Unwind_GetGR.constprop.0>
 8000dca:	bf00      	nop

08000dcc <__gnu_unwind_execute>:
 8000dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dd0:	4606      	mov	r6, r0
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	460d      	mov	r5, r1
 8000dd6:	f04f 0800 	mov.w	r8, #0
 8000dda:	4628      	mov	r0, r5
 8000ddc:	f7ff ffca 	bl	8000d74 <next_unwind_byte>
 8000de0:	28b0      	cmp	r0, #176	; 0xb0
 8000de2:	4604      	mov	r4, r0
 8000de4:	f000 80b4 	beq.w	8000f50 <__gnu_unwind_execute+0x184>
 8000de8:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
 8000dec:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8000df0:	d020      	beq.n	8000e34 <__gnu_unwind_execute+0x68>
 8000df2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000df6:	2b80      	cmp	r3, #128	; 0x80
 8000df8:	d07a      	beq.n	8000ef0 <__gnu_unwind_execute+0x124>
 8000dfa:	2b90      	cmp	r3, #144	; 0x90
 8000dfc:	d035      	beq.n	8000e6a <__gnu_unwind_execute+0x9e>
 8000dfe:	2ba0      	cmp	r3, #160	; 0xa0
 8000e00:	d048      	beq.n	8000e94 <__gnu_unwind_execute+0xc8>
 8000e02:	2bb0      	cmp	r3, #176	; 0xb0
 8000e04:	d05c      	beq.n	8000ec0 <__gnu_unwind_execute+0xf4>
 8000e06:	2bc0      	cmp	r3, #192	; 0xc0
 8000e08:	f000 8089 	beq.w	8000f1e <__gnu_unwind_execute+0x152>
 8000e0c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e10:	2bd0      	cmp	r3, #208	; 0xd0
 8000e12:	d10b      	bne.n	8000e2c <__gnu_unwind_execute+0x60>
 8000e14:	f000 0207 	and.w	r2, r0, #7
 8000e18:	3201      	adds	r2, #1
 8000e1a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e1e:	2305      	movs	r3, #5
 8000e20:	2101      	movs	r1, #1
 8000e22:	4630      	mov	r0, r6
 8000e24:	f7ff fda8 	bl	8000978 <_Unwind_VRS_Pop>
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	d0d6      	beq.n	8000dda <__gnu_unwind_execute+0xe>
 8000e2c:	2009      	movs	r0, #9
 8000e2e:	b005      	add	sp, #20
 8000e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e34:	f10d 090c 	add.w	r9, sp, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	0087      	lsls	r7, r0, #2
 8000e3c:	f8cd 9000 	str.w	r9, [sp]
 8000e40:	220d      	movs	r2, #13
 8000e42:	4630      	mov	r0, r6
 8000e44:	f7ff fb9e 	bl	8000584 <_Unwind_VRS_Get>
 8000e48:	b2ff      	uxtb	r7, r7
 8000e4a:	9b03      	ldr	r3, [sp, #12]
 8000e4c:	f8cd 9000 	str.w	r9, [sp]
 8000e50:	3704      	adds	r7, #4
 8000e52:	0660      	lsls	r0, r4, #25
 8000e54:	bf4c      	ite	mi
 8000e56:	1bdf      	submi	r7, r3, r7
 8000e58:	18ff      	addpl	r7, r7, r3
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	220d      	movs	r2, #13
 8000e60:	4630      	mov	r0, r6
 8000e62:	9703      	str	r7, [sp, #12]
 8000e64:	f7ff fbb4 	bl	80005d0 <_Unwind_VRS_Set>
 8000e68:	e7b7      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8000e6a:	f000 030d 	and.w	r3, r0, #13
 8000e6e:	2b0d      	cmp	r3, #13
 8000e70:	d0dc      	beq.n	8000e2c <__gnu_unwind_execute+0x60>
 8000e72:	af03      	add	r7, sp, #12
 8000e74:	2300      	movs	r3, #0
 8000e76:	f000 020f 	and.w	r2, r0, #15
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	9700      	str	r7, [sp, #0]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	f7ff fb80 	bl	8000584 <_Unwind_VRS_Get>
 8000e84:	2300      	movs	r3, #0
 8000e86:	9700      	str	r7, [sp, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	220d      	movs	r2, #13
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	f7ff fb9f 	bl	80005d0 <_Unwind_VRS_Set>
 8000e92:	e7a2      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8000e94:	43c2      	mvns	r2, r0
 8000e96:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8000e9a:	f002 0207 	and.w	r2, r2, #7
 8000e9e:	fa43 f202 	asr.w	r2, r3, r2
 8000ea2:	0701      	lsls	r1, r0, #28
 8000ea4:	ea02 0203 	and.w	r2, r2, r3
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	bf48      	it	mi
 8000eae:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	f7ff fd5f 	bl	8000978 <_Unwind_VRS_Pop>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	d1b6      	bne.n	8000e2c <__gnu_unwind_execute+0x60>
 8000ebe:	e78c      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8000ec0:	28b1      	cmp	r0, #177	; 0xb1
 8000ec2:	d04a      	beq.n	8000f5a <__gnu_unwind_execute+0x18e>
 8000ec4:	28b2      	cmp	r0, #178	; 0xb2
 8000ec6:	d053      	beq.n	8000f70 <__gnu_unwind_execute+0x1a4>
 8000ec8:	28b3      	cmp	r0, #179	; 0xb3
 8000eca:	f000 8081 	beq.w	8000fd0 <__gnu_unwind_execute+0x204>
 8000ece:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000ed2:	2bb4      	cmp	r3, #180	; 0xb4
 8000ed4:	d0aa      	beq.n	8000e2c <__gnu_unwind_execute+0x60>
 8000ed6:	f000 0207 	and.w	r2, r0, #7
 8000eda:	3201      	adds	r2, #1
 8000edc:	2301      	movs	r3, #1
 8000ede:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	f7ff fd47 	bl	8000978 <_Unwind_VRS_Pop>
 8000eea:	2800      	cmp	r0, #0
 8000eec:	d19e      	bne.n	8000e2c <__gnu_unwind_execute+0x60>
 8000eee:	e774      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f7ff ff3f 	bl	8000d74 <next_unwind_byte>
 8000ef6:	0224      	lsls	r4, r4, #8
 8000ef8:	4320      	orrs	r0, r4
 8000efa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000efe:	d095      	beq.n	8000e2c <__gnu_unwind_execute+0x60>
 8000f00:	0104      	lsls	r4, r0, #4
 8000f02:	2300      	movs	r3, #0
 8000f04:	b2a2      	uxth	r2, r4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4630      	mov	r0, r6
 8000f0a:	f7ff fd35 	bl	8000978 <_Unwind_VRS_Pop>
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d18c      	bne.n	8000e2c <__gnu_unwind_execute+0x60>
 8000f12:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f16:	bf18      	it	ne
 8000f18:	f04f 0801 	movne.w	r8, #1
 8000f1c:	e75d      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8000f1e:	28c6      	cmp	r0, #198	; 0xc6
 8000f20:	d062      	beq.n	8000fe8 <__gnu_unwind_execute+0x21c>
 8000f22:	28c7      	cmp	r0, #199	; 0xc7
 8000f24:	d06c      	beq.n	8001000 <__gnu_unwind_execute+0x234>
 8000f26:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8000f2c:	d07b      	beq.n	8001026 <__gnu_unwind_execute+0x25a>
 8000f2e:	28c8      	cmp	r0, #200	; 0xc8
 8000f30:	f000 8091 	beq.w	8001056 <__gnu_unwind_execute+0x28a>
 8000f34:	28c9      	cmp	r0, #201	; 0xc9
 8000f36:	f47f af79 	bne.w	8000e2c <__gnu_unwind_execute+0x60>
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	f7ff ff1a 	bl	8000d74 <next_unwind_byte>
 8000f40:	0302      	lsls	r2, r0, #12
 8000f42:	f000 000f 	and.w	r0, r0, #15
 8000f46:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000f4a:	3001      	adds	r0, #1
 8000f4c:	4302      	orrs	r2, r0
 8000f4e:	e766      	b.n	8000e1e <__gnu_unwind_execute+0x52>
 8000f50:	f1b8 0f00 	cmp.w	r8, #0
 8000f54:	d06e      	beq.n	8001034 <__gnu_unwind_execute+0x268>
 8000f56:	2000      	movs	r0, #0
 8000f58:	e769      	b.n	8000e2e <__gnu_unwind_execute+0x62>
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	f7ff ff0a 	bl	8000d74 <next_unwind_byte>
 8000f60:	4602      	mov	r2, r0
 8000f62:	2800      	cmp	r0, #0
 8000f64:	f43f af62 	beq.w	8000e2c <__gnu_unwind_execute+0x60>
 8000f68:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f6c:	d0b9      	beq.n	8000ee2 <__gnu_unwind_execute+0x116>
 8000f6e:	e75d      	b.n	8000e2c <__gnu_unwind_execute+0x60>
 8000f70:	2300      	movs	r3, #0
 8000f72:	f10d 090c 	add.w	r9, sp, #12
 8000f76:	220d      	movs	r2, #13
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f8cd 9000 	str.w	r9, [sp]
 8000f7e:	4630      	mov	r0, r6
 8000f80:	f7ff fb00 	bl	8000584 <_Unwind_VRS_Get>
 8000f84:	4628      	mov	r0, r5
 8000f86:	f7ff fef5 	bl	8000d74 <next_unwind_byte>
 8000f8a:	0602      	lsls	r2, r0, #24
 8000f8c:	f04f 0402 	mov.w	r4, #2
 8000f90:	d50c      	bpl.n	8000fac <__gnu_unwind_execute+0x1e0>
 8000f92:	9b03      	ldr	r3, [sp, #12]
 8000f94:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000f98:	40a0      	lsls	r0, r4
 8000f9a:	4403      	add	r3, r0
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	9303      	str	r3, [sp, #12]
 8000fa0:	f7ff fee8 	bl	8000d74 <next_unwind_byte>
 8000fa4:	0603      	lsls	r3, r0, #24
 8000fa6:	f104 0407 	add.w	r4, r4, #7
 8000faa:	d4f2      	bmi.n	8000f92 <__gnu_unwind_execute+0x1c6>
 8000fac:	9b03      	ldr	r3, [sp, #12]
 8000fae:	f8cd 9000 	str.w	r9, [sp]
 8000fb2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000fb6:	fa00 f204 	lsl.w	r2, r0, r4
 8000fba:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	4414      	add	r4, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	220d      	movs	r2, #13
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	9403      	str	r4, [sp, #12]
 8000fca:	f7ff fb01 	bl	80005d0 <_Unwind_VRS_Set>
 8000fce:	e704      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f7ff fecf 	bl	8000d74 <next_unwind_byte>
 8000fd6:	0301      	lsls	r1, r0, #12
 8000fd8:	f000 000f 	and.w	r0, r0, #15
 8000fdc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000fe0:	1c42      	adds	r2, r0, #1
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	e77c      	b.n	8000ee2 <__gnu_unwind_execute+0x116>
 8000fe8:	4628      	mov	r0, r5
 8000fea:	f7ff fec3 	bl	8000d74 <next_unwind_byte>
 8000fee:	0301      	lsls	r1, r0, #12
 8000ff0:	f000 000f 	and.w	r0, r0, #15
 8000ff4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000ff8:	1c42      	adds	r2, r0, #1
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	e770      	b.n	8000ee2 <__gnu_unwind_execute+0x116>
 8001000:	4628      	mov	r0, r5
 8001002:	f7ff feb7 	bl	8000d74 <next_unwind_byte>
 8001006:	4602      	mov	r2, r0
 8001008:	2800      	cmp	r0, #0
 800100a:	f43f af0f 	beq.w	8000e2c <__gnu_unwind_execute+0x60>
 800100e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001012:	f47f af0b 	bne.w	8000e2c <__gnu_unwind_execute+0x60>
 8001016:	2104      	movs	r1, #4
 8001018:	4630      	mov	r0, r6
 800101a:	f7ff fcad 	bl	8000978 <_Unwind_VRS_Pop>
 800101e:	2800      	cmp	r0, #0
 8001020:	f47f af04 	bne.w	8000e2c <__gnu_unwind_execute+0x60>
 8001024:	e6d9      	b.n	8000dda <__gnu_unwind_execute+0xe>
 8001026:	f000 020f 	and.w	r2, r0, #15
 800102a:	3201      	adds	r2, #1
 800102c:	2303      	movs	r3, #3
 800102e:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001032:	e756      	b.n	8000ee2 <__gnu_unwind_execute+0x116>
 8001034:	ac03      	add	r4, sp, #12
 8001036:	4643      	mov	r3, r8
 8001038:	220e      	movs	r2, #14
 800103a:	4641      	mov	r1, r8
 800103c:	9400      	str	r4, [sp, #0]
 800103e:	4630      	mov	r0, r6
 8001040:	f7ff faa0 	bl	8000584 <_Unwind_VRS_Get>
 8001044:	9400      	str	r4, [sp, #0]
 8001046:	4630      	mov	r0, r6
 8001048:	4643      	mov	r3, r8
 800104a:	220f      	movs	r2, #15
 800104c:	4641      	mov	r1, r8
 800104e:	f7ff fabf 	bl	80005d0 <_Unwind_VRS_Set>
 8001052:	4640      	mov	r0, r8
 8001054:	e6eb      	b.n	8000e2e <__gnu_unwind_execute+0x62>
 8001056:	4628      	mov	r0, r5
 8001058:	f7ff fe8c 	bl	8000d74 <next_unwind_byte>
 800105c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001060:	f000 030f 	and.w	r3, r0, #15
 8001064:	3210      	adds	r2, #16
 8001066:	3301      	adds	r3, #1
 8001068:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800106c:	e6d7      	b.n	8000e1e <__gnu_unwind_execute+0x52>
 800106e:	bf00      	nop

08001070 <__gnu_unwind_frame>:
 8001070:	b510      	push	{r4, lr}
 8001072:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001074:	b084      	sub	sp, #16
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	2003      	movs	r0, #3
 800107a:	f88d 000c 	strb.w	r0, [sp, #12]
 800107e:	79dc      	ldrb	r4, [r3, #7]
 8001080:	f88d 400d 	strb.w	r4, [sp, #13]
 8001084:	0212      	lsls	r2, r2, #8
 8001086:	3308      	adds	r3, #8
 8001088:	4608      	mov	r0, r1
 800108a:	a901      	add	r1, sp, #4
 800108c:	9201      	str	r2, [sp, #4]
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	f7ff fe9c 	bl	8000dcc <__gnu_unwind_execute>
 8001094:	b004      	add	sp, #16
 8001096:	bd10      	pop	{r4, pc}

08001098 <_Unwind_GetRegionStart>:
 8001098:	b508      	push	{r3, lr}
 800109a:	f7ff fe95 	bl	8000dc8 <unwind_UCB_from_context>
 800109e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80010a0:	bd08      	pop	{r3, pc}
 80010a2:	bf00      	nop

080010a4 <_Unwind_GetLanguageSpecificData>:
 80010a4:	b508      	push	{r3, lr}
 80010a6:	f7ff fe8f 	bl	8000dc8 <unwind_UCB_from_context>
 80010aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80010ac:	79d8      	ldrb	r0, [r3, #7]
 80010ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80010b2:	3008      	adds	r0, #8
 80010b4:	bd08      	pop	{r3, pc}
 80010b6:	bf00      	nop

080010b8 <_Unwind_GetTextRelBase>:
 80010b8:	b508      	push	{r3, lr}
 80010ba:	f007 fc93 	bl	80089e4 <abort>
 80010be:	bf00      	nop

080010c0 <_Unwind_GetDataRelBase>:
 80010c0:	b508      	push	{r3, lr}
 80010c2:	f7ff fff9 	bl	80010b8 <_Unwind_GetTextRelBase>
 80010c6:	bf00      	nop

080010c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001100 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010ce:	e003      	b.n	80010d8 <LoopCopyDataInit>

080010d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010d6:	3104      	adds	r1, #4

080010d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010d8:	480b      	ldr	r0, [pc, #44]	; (8001108 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010e0:	d3f6      	bcc.n	80010d0 <CopyDataInit>
  ldr  r2, =_sbss
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010e4:	e002      	b.n	80010ec <LoopFillZerobss>

080010e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010e8:	f842 3b04 	str.w	r3, [r2], #4

080010ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010f0:	d3f9      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010f2:	f007 fbbf 	bl	8008874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f6:	f007 fc4f 	bl	8008998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f007 fa53 	bl	80085a4 <main>
  bx  lr    
 80010fe:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001100:	20030000 	.word	0x20030000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001104:	08008e50 	.word	0x08008e50
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800110c:	200000fc 	.word	0x200000fc
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001110:	20000100 	.word	0x20000100
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001114:	200006ac 	.word	0x200006ac

08001118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_Init+0x40>)
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_Init+0x40>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_Init+0x40>)
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_Init+0x40>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4a08      	ldr	r2, [pc, #32]	; (800115c <HAL_Init+0x40>)
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_Init+0x40>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 f907 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f808 	bl	8001160 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f007 fb26 	bl	80087a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023c00 	.word	0x40023c00

08001160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_InitTick+0x30>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a09      	ldr	r2, [pc, #36]	; (8001194 <HAL_InitTick+0x34>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	099b      	lsrs	r3, r3, #6
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f93b 	bl	80013f0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800117a:	2200      	movs	r2, #0
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	f04f 30ff 	mov.w	r0, #4294967295
 8001182:	f000 f909 	bl	8001398 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000004 	.word	0x20000004
 8001194:	10624dd3 	.word	0x10624dd3

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick++;
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <HAL_IncTick+0x18>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <HAL_IncTick+0x18>)
 80011a4:	6013      	str	r3, [r2, #0]
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	200005a8 	.word	0x200005a8

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200005a8 	.word	0x200005a8

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80011d8:	f7ff ffec 	bl	80011b4 <HAL_GetTick>
 80011dc:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80011de:	bf00      	nop
 80011e0:	f7ff ffe8 	bl	80011b4 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad2      	subs	r2, r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d3f7      	bcc.n	80011e0 <HAL_Delay+0x14>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800124c:	0a1b      	lsrs	r3, r3, #8
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	da0b      	bge.n	8001288 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	490d      	ldr	r1, [pc, #52]	; (80012a8 <NVIC_SetPriority+0x4c>)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	3b04      	subs	r3, #4
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001286:	e009      	b.n	800129c <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	4908      	ldr	r1, [pc, #32]	; (80012ac <NVIC_SetPriority+0x50>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	2201      	movs	r2, #1
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	1e5a      	subs	r2, r3, #1
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	401a      	ands	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f6:	2101      	movs	r1, #1
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	1e59      	subs	r1, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001304:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff90 	bl	800125c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b07      	cmp	r3, #7
 8001364:	d00f      	beq.n	8001386 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b06      	cmp	r3, #6
 800136a:	d00c      	beq.n	8001386 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b05      	cmp	r3, #5
 8001370:	d009      	beq.n	8001386 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b04      	cmp	r3, #4
 8001376:	d006      	beq.n	8001386 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d003      	beq.n	8001386 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800137e:	21a4      	movs	r1, #164	; 0xa4
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001382:	f007 f99d 	bl	80086c0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff36 	bl	80011f8 <NVIC_SetPriorityGrouping>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	08008ad0 	.word	0x08008ad0

08001398 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d903      	bls.n	80013b8 <HAL_NVIC_SetPriority+0x20>
 80013b0:	21bc      	movs	r1, #188	; 0xbc
 80013b2:	480e      	ldr	r0, [pc, #56]	; (80013ec <HAL_NVIC_SetPriority+0x54>)
 80013b4:	f007 f984 	bl	80086c0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	d903      	bls.n	80013c6 <HAL_NVIC_SetPriority+0x2e>
 80013be:	21bd      	movs	r1, #189	; 0xbd
 80013c0:	480a      	ldr	r0, [pc, #40]	; (80013ec <HAL_NVIC_SetPriority+0x54>)
 80013c2:	f007 f97d 	bl	80086c0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c6:	f7ff ff3b 	bl	8001240 <NVIC_GetPriorityGrouping>
 80013ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	6978      	ldr	r0, [r7, #20]
 80013d2:	f7ff ff6d 	bl	80012b0 <NVIC_EncodePriority>
 80013d6:	4602      	mov	r2, r0
 80013d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff3c 	bl	800125c <NVIC_SetPriority>
}
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	08008ad0 	.word	0x08008ad0

080013f0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff8b 	bl	8001314 <SysTick_Config>
 80013fe:	4603      	mov	r3, r0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b04      	cmp	r3, #4
 8001414:	d007      	beq.n	8001426 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d004      	beq.n	8001426 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 800141c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001420:	480b      	ldr	r0, [pc, #44]	; (8001450 <HAL_SYSTICK_CLKSourceConfig+0x48>)
 8001422:	f007 f94d 	bl	80086c0 <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d106      	bne.n	800143a <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800142c:	4a09      	ldr	r2, [pc, #36]	; (8001454 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001438:	e005      	b.n	8001446 <HAL_SYSTICK_CLKSourceConfig+0x3e>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800143a:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 0304 	bic.w	r3, r3, #4
 8001444:	6013      	str	r3, [r2, #0]
  }
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	08008ad0 	.word	0x08008ad0
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800145c:	f000 f802 	bl	8001464 <HAL_SYSTICK_Callback>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a42      	ldr	r2, [pc, #264]	; (8001598 <HAL_GPIO_Init+0x124>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d02b      	beq.n	80014ea <HAL_GPIO_Init+0x76>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a41      	ldr	r2, [pc, #260]	; (800159c <HAL_GPIO_Init+0x128>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d027      	beq.n	80014ea <HAL_GPIO_Init+0x76>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a40      	ldr	r2, [pc, #256]	; (80015a0 <HAL_GPIO_Init+0x12c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d023      	beq.n	80014ea <HAL_GPIO_Init+0x76>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a3f      	ldr	r2, [pc, #252]	; (80015a4 <HAL_GPIO_Init+0x130>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01f      	beq.n	80014ea <HAL_GPIO_Init+0x76>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a3e      	ldr	r2, [pc, #248]	; (80015a8 <HAL_GPIO_Init+0x134>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d01b      	beq.n	80014ea <HAL_GPIO_Init+0x76>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a3d      	ldr	r2, [pc, #244]	; (80015ac <HAL_GPIO_Init+0x138>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d017      	beq.n	80014ea <HAL_GPIO_Init+0x76>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a3c      	ldr	r2, [pc, #240]	; (80015b0 <HAL_GPIO_Init+0x13c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d013      	beq.n	80014ea <HAL_GPIO_Init+0x76>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a3b      	ldr	r2, [pc, #236]	; (80015b4 <HAL_GPIO_Init+0x140>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00f      	beq.n	80014ea <HAL_GPIO_Init+0x76>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a3a      	ldr	r2, [pc, #232]	; (80015b8 <HAL_GPIO_Init+0x144>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00b      	beq.n	80014ea <HAL_GPIO_Init+0x76>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a39      	ldr	r2, [pc, #228]	; (80015bc <HAL_GPIO_Init+0x148>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <HAL_GPIO_Init+0x76>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <HAL_GPIO_Init+0x14c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x76>
 80014e2:	21c5      	movs	r1, #197	; 0xc5
 80014e4:	4837      	ldr	r0, [pc, #220]	; (80015c4 <HAL_GPIO_Init+0x150>)
 80014e6:	f007 f8eb 	bl	80086c0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d103      	bne.n	80014fc <HAL_GPIO_Init+0x88>
 80014f4:	21c6      	movs	r1, #198	; 0xc6
 80014f6:	4833      	ldr	r0, [pc, #204]	; (80015c4 <HAL_GPIO_Init+0x150>)
 80014f8:	f007 f8e2 	bl	80086c0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d035      	beq.n	8001570 <HAL_GPIO_Init+0xfc>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d031      	beq.n	8001570 <HAL_GPIO_Init+0xfc>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b11      	cmp	r3, #17
 8001512:	d02d      	beq.n	8001570 <HAL_GPIO_Init+0xfc>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d029      	beq.n	8001570 <HAL_GPIO_Init+0xfc>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b12      	cmp	r3, #18
 8001522:	d025      	beq.n	8001570 <HAL_GPIO_Init+0xfc>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4a27      	ldr	r2, [pc, #156]	; (80015c8 <HAL_GPIO_Init+0x154>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d020      	beq.n	8001570 <HAL_GPIO_Init+0xfc>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4a26      	ldr	r2, [pc, #152]	; (80015cc <HAL_GPIO_Init+0x158>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d01b      	beq.n	8001570 <HAL_GPIO_Init+0xfc>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a24      	ldr	r2, [pc, #144]	; (80015d0 <HAL_GPIO_Init+0x15c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d016      	beq.n	8001570 <HAL_GPIO_Init+0xfc>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <HAL_GPIO_Init+0x160>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d011      	beq.n	8001570 <HAL_GPIO_Init+0xfc>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <HAL_GPIO_Init+0x164>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00c      	beq.n	8001570 <HAL_GPIO_Init+0xfc>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a20      	ldr	r2, [pc, #128]	; (80015dc <HAL_GPIO_Init+0x168>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d007      	beq.n	8001570 <HAL_GPIO_Init+0xfc>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0xfc>
 8001568:	21c7      	movs	r1, #199	; 0xc7
 800156a:	4816      	ldr	r0, [pc, #88]	; (80015c4 <HAL_GPIO_Init+0x150>)
 800156c:	f007 f8a8 	bl	80086c0 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00b      	beq.n	8001590 <HAL_GPIO_Init+0x11c>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d007      	beq.n	8001590 <HAL_GPIO_Init+0x11c>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x11c>
 8001588:	21c8      	movs	r1, #200	; 0xc8
 800158a:	480e      	ldr	r0, [pc, #56]	; (80015c4 <HAL_GPIO_Init+0x150>)
 800158c:	f007 f898 	bl	80086c0 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	e281      	b.n	8001a9a <HAL_GPIO_Init+0x626>
 8001596:	bf00      	nop
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40021400 	.word	0x40021400
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40021c00 	.word	0x40021c00
 80015b8:	40022000 	.word	0x40022000
 80015bc:	40022400 	.word	0x40022400
 80015c0:	40022800 	.word	0x40022800
 80015c4:	08008b0c 	.word	0x08008b0c
 80015c8:	10110000 	.word	0x10110000
 80015cc:	10210000 	.word	0x10210000
 80015d0:	10310000 	.word	0x10310000
 80015d4:	10120000 	.word	0x10120000
 80015d8:	10220000 	.word	0x10220000
 80015dc:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f040 824b 	bne.w	8001a94 <HAL_GPIO_Init+0x620>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d004      	beq.n	8001610 <HAL_GPIO_Init+0x19c>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b12      	cmp	r3, #18
 800160c:	f040 80da 	bne.w	80017c4 <HAL_GPIO_Init+0x350>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 80b1 	beq.w	800177c <HAL_GPIO_Init+0x308>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b09      	cmp	r3, #9
 8001620:	f000 80ac 	beq.w	800177c <HAL_GPIO_Init+0x308>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80a7 	beq.w	800177c <HAL_GPIO_Init+0x308>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 80a2 	beq.w	800177c <HAL_GPIO_Init+0x308>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 809d 	beq.w	800177c <HAL_GPIO_Init+0x308>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 8098 	beq.w	800177c <HAL_GPIO_Init+0x308>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	2b01      	cmp	r3, #1
 8001652:	f000 8093 	beq.w	800177c <HAL_GPIO_Init+0x308>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2b01      	cmp	r3, #1
 800165c:	f000 808e 	beq.w	800177c <HAL_GPIO_Init+0x308>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	2b02      	cmp	r3, #2
 8001666:	f000 8089 	beq.w	800177c <HAL_GPIO_Init+0x308>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b02      	cmp	r3, #2
 8001670:	f000 8084 	beq.w	800177c <HAL_GPIO_Init+0x308>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d07f      	beq.n	800177c <HAL_GPIO_Init+0x308>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	2b03      	cmp	r3, #3
 8001682:	d07b      	beq.n	800177c <HAL_GPIO_Init+0x308>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d077      	beq.n	800177c <HAL_GPIO_Init+0x308>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	2b04      	cmp	r3, #4
 8001692:	d073      	beq.n	800177c <HAL_GPIO_Init+0x308>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d06f      	beq.n	800177c <HAL_GPIO_Init+0x308>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	d06b      	beq.n	800177c <HAL_GPIO_Init+0x308>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d067      	beq.n	800177c <HAL_GPIO_Init+0x308>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	2b09      	cmp	r3, #9
 80016b2:	d063      	beq.n	800177c <HAL_GPIO_Init+0x308>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	2b06      	cmp	r3, #6
 80016ba:	d05f      	beq.n	800177c <HAL_GPIO_Init+0x308>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	2b09      	cmp	r3, #9
 80016c2:	d05b      	beq.n	800177c <HAL_GPIO_Init+0x308>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	2b07      	cmp	r3, #7
 80016ca:	d057      	beq.n	800177c <HAL_GPIO_Init+0x308>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2b07      	cmp	r3, #7
 80016d2:	d053      	beq.n	800177c <HAL_GPIO_Init+0x308>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	2b07      	cmp	r3, #7
 80016da:	d04f      	beq.n	800177c <HAL_GPIO_Init+0x308>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d04b      	beq.n	800177c <HAL_GPIO_Init+0x308>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d047      	beq.n	800177c <HAL_GPIO_Init+0x308>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d043      	beq.n	800177c <HAL_GPIO_Init+0x308>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	2b09      	cmp	r3, #9
 80016fa:	d03f      	beq.n	800177c <HAL_GPIO_Init+0x308>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	2b09      	cmp	r3, #9
 8001702:	d03b      	beq.n	800177c <HAL_GPIO_Init+0x308>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	2b0a      	cmp	r3, #10
 800170a:	d037      	beq.n	800177c <HAL_GPIO_Init+0x308>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	2b0a      	cmp	r3, #10
 8001712:	d033      	beq.n	800177c <HAL_GPIO_Init+0x308>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	2b0b      	cmp	r3, #11
 800171a:	d02f      	beq.n	800177c <HAL_GPIO_Init+0x308>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	2b0c      	cmp	r3, #12
 8001722:	d02b      	beq.n	800177c <HAL_GPIO_Init+0x308>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	2b0c      	cmp	r3, #12
 800172a:	d027      	beq.n	800177c <HAL_GPIO_Init+0x308>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b0d      	cmp	r3, #13
 8001732:	d023      	beq.n	800177c <HAL_GPIO_Init+0x308>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d01f      	beq.n	800177c <HAL_GPIO_Init+0x308>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	2b05      	cmp	r3, #5
 8001742:	d01b      	beq.n	800177c <HAL_GPIO_Init+0x308>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d017      	beq.n	800177c <HAL_GPIO_Init+0x308>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	2b05      	cmp	r3, #5
 8001752:	d013      	beq.n	800177c <HAL_GPIO_Init+0x308>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	2b08      	cmp	r3, #8
 800175a:	d00f      	beq.n	800177c <HAL_GPIO_Init+0x308>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	2b08      	cmp	r3, #8
 8001762:	d00b      	beq.n	800177c <HAL_GPIO_Init+0x308>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	2b0c      	cmp	r3, #12
 800176a:	d007      	beq.n	800177c <HAL_GPIO_Init+0x308>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	2b06      	cmp	r3, #6
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x308>
 8001774:	21d9      	movs	r1, #217	; 0xd9
 8001776:	4888      	ldr	r0, [pc, #544]	; (8001998 <HAL_GPIO_Init+0x524>)
 8001778:	f006 ffa2 	bl	80086c0 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3208      	adds	r2, #8
 8001784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	08da      	lsrs	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3208      	adds	r2, #8
 80017be:	69b9      	ldr	r1, [r7, #24]
 80017c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0203 	and.w	r2, r3, #3
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d00b      	beq.n	8001818 <HAL_GPIO_Init+0x3a4>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d007      	beq.n	8001818 <HAL_GPIO_Init+0x3a4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800180c:	2b11      	cmp	r3, #17
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x3a4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b12      	cmp	r3, #18
 8001816:	d144      	bne.n	80018a2 <HAL_GPIO_Init+0x42e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00f      	beq.n	8001840 <HAL_GPIO_Init+0x3cc>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d00b      	beq.n	8001840 <HAL_GPIO_Init+0x3cc>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d007      	beq.n	8001840 <HAL_GPIO_Init+0x3cc>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x3cc>
 8001838:	21ec      	movs	r1, #236	; 0xec
 800183a:	4857      	ldr	r0, [pc, #348]	; (8001998 <HAL_GPIO_Init+0x524>)
 800183c:	f006 ff40 	bl	80086c0 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001876:	2201      	movs	r2, #1
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	f003 0201 	and.w	r2, r3, #1
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	2203      	movs	r2, #3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80da 	beq.w	8001a94 <HAL_GPIO_Init+0x620>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	4a2d      	ldr	r2, [pc, #180]	; (800199c <HAL_GPIO_Init+0x528>)
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_GPIO_Init+0x528>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ee:	6453      	str	r3, [r2, #68]	; 0x44
 80018f0:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_GPIO_Init+0x528>)
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fc:	4a28      	ldr	r2, [pc, #160]	; (80019a0 <HAL_GPIO_Init+0x52c>)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <HAL_GPIO_Init+0x530>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d051      	beq.n	80019cc <HAL_GPIO_Init+0x558>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a1f      	ldr	r2, [pc, #124]	; (80019a8 <HAL_GPIO_Init+0x534>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d031      	beq.n	8001994 <HAL_GPIO_Init+0x520>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a1e      	ldr	r2, [pc, #120]	; (80019ac <HAL_GPIO_Init+0x538>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d02b      	beq.n	8001990 <HAL_GPIO_Init+0x51c>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <HAL_GPIO_Init+0x53c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d025      	beq.n	800198c <HAL_GPIO_Init+0x518>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a1c      	ldr	r2, [pc, #112]	; (80019b4 <HAL_GPIO_Init+0x540>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d01f      	beq.n	8001988 <HAL_GPIO_Init+0x514>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <HAL_GPIO_Init+0x544>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d019      	beq.n	8001984 <HAL_GPIO_Init+0x510>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a1a      	ldr	r2, [pc, #104]	; (80019bc <HAL_GPIO_Init+0x548>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d013      	beq.n	8001980 <HAL_GPIO_Init+0x50c>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_GPIO_Init+0x54c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00d      	beq.n	800197c <HAL_GPIO_Init+0x508>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <HAL_GPIO_Init+0x550>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d007      	beq.n	8001978 <HAL_GPIO_Init+0x504>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <HAL_GPIO_Init+0x554>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d101      	bne.n	8001974 <HAL_GPIO_Init+0x500>
 8001970:	2309      	movs	r3, #9
 8001972:	e02c      	b.n	80019ce <HAL_GPIO_Init+0x55a>
 8001974:	230a      	movs	r3, #10
 8001976:	e02a      	b.n	80019ce <HAL_GPIO_Init+0x55a>
 8001978:	2308      	movs	r3, #8
 800197a:	e028      	b.n	80019ce <HAL_GPIO_Init+0x55a>
 800197c:	2307      	movs	r3, #7
 800197e:	e026      	b.n	80019ce <HAL_GPIO_Init+0x55a>
 8001980:	2306      	movs	r3, #6
 8001982:	e024      	b.n	80019ce <HAL_GPIO_Init+0x55a>
 8001984:	2305      	movs	r3, #5
 8001986:	e022      	b.n	80019ce <HAL_GPIO_Init+0x55a>
 8001988:	2304      	movs	r3, #4
 800198a:	e020      	b.n	80019ce <HAL_GPIO_Init+0x55a>
 800198c:	2303      	movs	r3, #3
 800198e:	e01e      	b.n	80019ce <HAL_GPIO_Init+0x55a>
 8001990:	2302      	movs	r3, #2
 8001992:	e01c      	b.n	80019ce <HAL_GPIO_Init+0x55a>
 8001994:	2301      	movs	r3, #1
 8001996:	e01a      	b.n	80019ce <HAL_GPIO_Init+0x55a>
 8001998:	08008b0c 	.word	0x08008b0c
 800199c:	40023800 	.word	0x40023800
 80019a0:	40013800 	.word	0x40013800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40021400 	.word	0x40021400
 80019bc:	40021800 	.word	0x40021800
 80019c0:	40021c00 	.word	0x40021c00
 80019c4:	40022000 	.word	0x40022000
 80019c8:	40022400 	.word	0x40022400
 80019cc:	2300      	movs	r3, #0
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019de:	4933      	ldr	r1, [pc, #204]	; (8001aac <HAL_GPIO_Init+0x638>)
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ec:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_GPIO_Init+0x63c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x59c>
        {
          temp |= iocurrent;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <HAL_GPIO_Init+0x63c>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_GPIO_Init+0x63c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x5c6>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a3a:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <HAL_GPIO_Init+0x63c>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_GPIO_Init+0x63c>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x5f0>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a64:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <HAL_GPIO_Init+0x63c>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_GPIO_Init+0x63c>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x61a>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a8e:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <HAL_GPIO_Init+0x63c>)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	60d3      	str	r3, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	2b0f      	cmp	r3, #15
 8001a9e:	f67f ad9f 	bls.w	80015e0 <HAL_GPIO_Init+0x16c>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40013800 	.word	0x40013800
 8001ab0:	40013c00 	.word	0x40013c00

08001ab4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	; 0x38
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8001abc:	2300      	movs	r3, #0
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d903      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x1c>
 8001ac8:	21f5      	movs	r1, #245	; 0xf5
 8001aca:	48a6      	ldr	r0, [pc, #664]	; (8001d64 <HAL_RCC_OscConfig+0x2b0>)
 8001acc:	f006 fdf8 	bl	80086c0 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8087 	beq.w	8001bec <HAL_RCC_OscConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00d      	beq.n	8001b02 <HAL_RCC_OscConfig+0x4e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aee:	d008      	beq.n	8001b02 <HAL_RCC_OscConfig+0x4e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_OscConfig+0x4e>
 8001afa:	21fa      	movs	r1, #250	; 0xfa
 8001afc:	4899      	ldr	r0, [pc, #612]	; (8001d64 <HAL_RCC_OscConfig+0x2b0>)
 8001afe:	f006 fddf 	bl	80086c0 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b02:	4b99      	ldr	r3, [pc, #612]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d00b      	beq.n	8001b26 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0e:	4b96      	ldr	r3, [pc, #600]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d111      	bne.n	8001b3e <HAL_RCC_OscConfig+0x8a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1a:	4b93      	ldr	r3, [pc, #588]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_RCC_OscConfig+0x8a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b26:	4b90      	ldr	r3, [pc, #576]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d05b      	beq.n	8001bea <HAL_RCC_OscConfig+0x136>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d157      	bne.n	8001bea <HAL_RCC_OscConfig+0x136>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e2bd      	b.n	80020ba <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0xa2>
 8001b48:	4a87      	ldr	r2, [pc, #540]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b4a:	4b87      	ldr	r3, [pc, #540]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e01d      	b.n	8001b92 <HAL_RCC_OscConfig+0xde>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5e:	d10c      	bne.n	8001b7a <HAL_RCC_OscConfig+0xc6>
 8001b60:	4a81      	ldr	r2, [pc, #516]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b62:	4b81      	ldr	r3, [pc, #516]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4a7e      	ldr	r2, [pc, #504]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b6e:	4b7e      	ldr	r3, [pc, #504]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e00b      	b.n	8001b92 <HAL_RCC_OscConfig+0xde>
 8001b7a:	4a7b      	ldr	r2, [pc, #492]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b7c:	4b7a      	ldr	r3, [pc, #488]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4a78      	ldr	r2, [pc, #480]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b88:	4b77      	ldr	r3, [pc, #476]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b90:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d013      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fb0b 	bl	80011b4 <HAL_GetTick>
 8001b9e:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba2:	f7ff fb07 	bl	80011b4 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b64      	cmp	r3, #100	; 0x64
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e282      	b.n	80020ba <HAL_RCC_OscConfig+0x606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb4:	4b6c      	ldr	r3, [pc, #432]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0xee>
 8001bc0:	e014      	b.n	8001bec <HAL_RCC_OscConfig+0x138>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc2:	f7ff faf7 	bl	80011b4 <HAL_GetTick>
 8001bc6:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x128>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bca:	f7ff faf3 	bl	80011b4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b64      	cmp	r3, #100	; 0x64
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x128>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e26e      	b.n	80020ba <HAL_RCC_OscConfig+0x606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bdc:	4b62      	ldr	r3, [pc, #392]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x116>
 8001be8:	e000      	b.n	8001bec <HAL_RCC_OscConfig+0x138>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 808e 	beq.w	8001d16 <HAL_RCC_OscConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <HAL_RCC_OscConfig+0x160>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d004      	beq.n	8001c14 <HAL_RCC_OscConfig+0x160>
 8001c0a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001c0e:	4855      	ldr	r0, [pc, #340]	; (8001d64 <HAL_RCC_OscConfig+0x2b0>)
 8001c10:	f006 fd56 	bl	80086c0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2b1f      	cmp	r3, #31
 8001c1a:	d904      	bls.n	8001c26 <HAL_RCC_OscConfig+0x172>
 8001c1c:	f240 112d 	movw	r1, #301	; 0x12d
 8001c20:	4850      	ldr	r0, [pc, #320]	; (8001d64 <HAL_RCC_OscConfig+0x2b0>)
 8001c22:	f006 fd4d 	bl	80086c0 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c26:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c32:	4b4d      	ldr	r3, [pc, #308]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d126      	bne.n	8001c8c <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d120      	bne.n	8001c8c <HAL_RCC_OscConfig+0x1d8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1ae>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1ae>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e22b      	b.n	80020ba <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c62:	4841      	ldr	r0, [pc, #260]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001c64:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6919      	ldr	r1, [r3, #16]
 8001c70:	23f8      	movs	r3, #248	; 0xf8
 8001c72:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	4313      	orrs	r3, r2
 8001c88:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	e044      	b.n	8001d16 <HAL_RCC_OscConfig+0x262>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d02a      	beq.n	8001cea <HAL_RCC_OscConfig+0x236>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c94:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <HAL_RCC_OscConfig+0x2b8>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fa8b 	bl	80011b4 <HAL_GetTick>
 8001c9e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7ff fa87 	bl	80011b4 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e202      	b.n	80020ba <HAL_RCC_OscConfig+0x606>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1ee>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	4829      	ldr	r0, [pc, #164]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001cc2:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6919      	ldr	r1, [r3, #16]
 8001cce:	23f8      	movs	r3, #248	; 0xf8
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	6003      	str	r3, [r0, #0]
 8001ce8:	e015      	b.n	8001d16 <HAL_RCC_OscConfig+0x262>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_RCC_OscConfig+0x2b8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fa60 	bl	80011b4 <HAL_GetTick>
 8001cf4:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x256>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7ff fa5c 	bl	80011b4 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e1d7      	b.n	80020ba <HAL_RCC_OscConfig+0x606>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_RCC_OscConfig+0x2b4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x244>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d045      	beq.n	8001dae <HAL_RCC_OscConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_RCC_OscConfig+0x288>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d004      	beq.n	8001d3c <HAL_RCC_OscConfig+0x288>
 8001d32:	f240 116d 	movw	r1, #365	; 0x16d
 8001d36:	480b      	ldr	r0, [pc, #44]	; (8001d64 <HAL_RCC_OscConfig+0x2b0>)
 8001d38:	f006 fcc2 	bl	80086c0 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01e      	beq.n	8001d82 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d44:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_RCC_OscConfig+0x2bc>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fa33 	bl	80011b4 <HAL_GetTick>
 8001d4e:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d50:	e010      	b.n	8001d74 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d52:	f7ff fa2f 	bl	80011b4 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d909      	bls.n	8001d74 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e1aa      	b.n	80020ba <HAL_RCC_OscConfig+0x606>
 8001d64:	08008b48 	.word	0x08008b48
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	42470000 	.word	0x42470000
 8001d70:	42470e80 	.word	0x42470e80
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d74:	4b95      	ldr	r3, [pc, #596]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0e8      	beq.n	8001d52 <HAL_RCC_OscConfig+0x29e>
 8001d80:	e015      	b.n	8001dae <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d82:	4b93      	ldr	r3, [pc, #588]	; (8001fd0 <HAL_RCC_OscConfig+0x51c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff fa14 	bl	80011b4 <HAL_GetTick>
 8001d8c:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff fa10 	bl	80011b4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x2ee>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e18b      	b.n	80020ba <HAL_RCC_OscConfig+0x606>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da2:	4b8a      	ldr	r3, [pc, #552]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2dc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 808f 	beq.w	8001eda <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00c      	beq.n	8001dde <HAL_RCC_OscConfig+0x32a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_OscConfig+0x32a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d004      	beq.n	8001dde <HAL_RCC_OscConfig+0x32a>
 8001dd4:	f240 1197 	movw	r1, #407	; 0x197
 8001dd8:	487e      	ldr	r0, [pc, #504]	; (8001fd4 <HAL_RCC_OscConfig+0x520>)
 8001dda:	f006 fc71 	bl	80086c0 <assert_failed>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4a7a      	ldr	r2, [pc, #488]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001de4:	4b79      	ldr	r3, [pc, #484]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b77      	ldr	r3, [pc, #476]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001dfa:	4a77      	ldr	r2, [pc, #476]	; (8001fd8 <HAL_RCC_OscConfig+0x524>)
 8001dfc:	4b76      	ldr	r3, [pc, #472]	; (8001fd8 <HAL_RCC_OscConfig+0x524>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001e06:	f7ff f9d5 	bl	80011b4 <HAL_GetTick>
 8001e0a:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x36c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e0e:	f7ff f9d1 	bl	80011b4 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x36c>
      {
        return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e14c      	b.n	80020ba <HAL_RCC_OscConfig+0x606>
    PWR->CR |= PWR_CR_DBP;
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e20:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <HAL_RCC_OscConfig+0x524>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x35a>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x38e>
 8001e34:	4a65      	ldr	r2, [pc, #404]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001e36:	4b65      	ldr	r3, [pc, #404]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e40:	e01c      	b.n	8001e7c <HAL_RCC_OscConfig+0x3c8>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x3b0>
 8001e4a:	4a60      	ldr	r2, [pc, #384]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001e4c:	4b5f      	ldr	r3, [pc, #380]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6713      	str	r3, [r2, #112]	; 0x70
 8001e56:	4a5d      	ldr	r2, [pc, #372]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001e58:	4b5c      	ldr	r3, [pc, #368]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6713      	str	r3, [r2, #112]	; 0x70
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0x3c8>
 8001e64:	4a59      	ldr	r2, [pc, #356]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001e66:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e70:	4a56      	ldr	r2, [pc, #344]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001e72:	4b56      	ldr	r3, [pc, #344]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	f023 0304 	bic.w	r3, r3, #4
 8001e7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d015      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff f996 	bl	80011b4 <HAL_GetTick>
 8001e88:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff f992 	bl	80011b4 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e10b      	b.n	80020ba <HAL_RCC_OscConfig+0x606>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0ee      	beq.n	8001e8c <HAL_RCC_OscConfig+0x3d8>
 8001eae:	e014      	b.n	8001eda <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7ff f980 	bl	80011b4 <HAL_GetTick>
 8001eb4:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7ff f97c 	bl	80011b4 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0f5      	b.n	80020ba <HAL_RCC_OscConfig+0x606>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ece:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1ee      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x404>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00c      	beq.n	8001efc <HAL_RCC_OscConfig+0x448>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d008      	beq.n	8001efc <HAL_RCC_OscConfig+0x448>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d004      	beq.n	8001efc <HAL_RCC_OscConfig+0x448>
 8001ef2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8001ef6:	4837      	ldr	r0, [pc, #220]	; (8001fd4 <HAL_RCC_OscConfig+0x520>)
 8001ef8:	f006 fbe2 	bl	80086c0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80d9 	beq.w	80020b8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_OscConfig+0x518>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	f000 80d0 	beq.w	80020b4 <HAL_RCC_OscConfig+0x600>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	f040 80b4 	bne.w	8002086 <HAL_RCC_OscConfig+0x5d2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <HAL_RCC_OscConfig+0x486>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f2e:	d004      	beq.n	8001f3a <HAL_RCC_OscConfig+0x486>
 8001f30:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001f34:	4827      	ldr	r0, [pc, #156]	; (8001fd4 <HAL_RCC_OscConfig+0x520>)
 8001f36:	f006 fbc3 	bl	80086c0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	2b3f      	cmp	r3, #63	; 0x3f
 8001f40:	d904      	bls.n	8001f4c <HAL_RCC_OscConfig+0x498>
 8001f42:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8001f46:	4823      	ldr	r0, [pc, #140]	; (8001fd4 <HAL_RCC_OscConfig+0x520>)
 8001f48:	f006 fbba 	bl	80086c0 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	2b31      	cmp	r3, #49	; 0x31
 8001f52:	d904      	bls.n	8001f5e <HAL_RCC_OscConfig+0x4aa>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8001f5c:	d904      	bls.n	8001f68 <HAL_RCC_OscConfig+0x4b4>
 8001f5e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8001f62:	481c      	ldr	r0, [pc, #112]	; (8001fd4 <HAL_RCC_OscConfig+0x520>)
 8001f64:	f006 fbac 	bl	80086c0 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d010      	beq.n	8001f92 <HAL_RCC_OscConfig+0x4de>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d00c      	beq.n	8001f92 <HAL_RCC_OscConfig+0x4de>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	2b06      	cmp	r3, #6
 8001f7e:	d008      	beq.n	8001f92 <HAL_RCC_OscConfig+0x4de>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d004      	beq.n	8001f92 <HAL_RCC_OscConfig+0x4de>
 8001f88:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001f8c:	4811      	ldr	r0, [pc, #68]	; (8001fd4 <HAL_RCC_OscConfig+0x520>)
 8001f8e:	f006 fb97 	bl	80086c0 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d903      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x4ee>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	d904      	bls.n	8001fac <HAL_RCC_OscConfig+0x4f8>
 8001fa2:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001fa6:	480b      	ldr	r0, [pc, #44]	; (8001fd4 <HAL_RCC_OscConfig+0x520>)
 8001fa8:	f006 fb8a 	bl	80086c0 <assert_failed>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_OscConfig+0x528>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7ff f8ff 	bl	80011b4 <HAL_GetTick>
 8001fb6:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb8:	e012      	b.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fba:	f7ff f8fb 	bl	80011b4 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d90b      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e076      	b.n	80020ba <HAL_RCC_OscConfig+0x606>
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	42470e80 	.word	0x42470e80
 8001fd4:	08008b48 	.word	0x08008b48
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	42470060 	.word	0x42470060
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe0:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <HAL_RCC_OscConfig+0x610>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e6      	bne.n	8001fba <HAL_RCC_OscConfig+0x506>
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fec:	4835      	ldr	r0, [pc, #212]	; (80020c4 <HAL_RCC_OscConfig+0x610>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ffc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	1e59      	subs	r1, r3, #1
 800201e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800203c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8002040:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	4313      	orrs	r3, r2
 8002056:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_RCC_OscConfig+0x614>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7ff f8a9 	bl	80011b4 <HAL_GetTick>
 8002062:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002066:	f7ff f8a5 	bl	80011b4 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e020      	b.n	80020ba <HAL_RCC_OscConfig+0x606>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCC_OscConfig+0x610>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x5b2>
 8002084:	e018      	b.n	80020b8 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_RCC_OscConfig+0x614>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7ff f892 	bl	80011b4 <HAL_GetTick>
 8002090:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff f88e 	bl	80011b4 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e009      	b.n	80020ba <HAL_RCC_OscConfig+0x606>
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <HAL_RCC_OscConfig+0x610>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x5e0>
 80020b2:	e001      	b.n	80020b8 <HAL_RCC_OscConfig+0x604>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <HAL_RCC_OscConfig+0x606>
    }
  }
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3738      	adds	r7, #56	; 0x38
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	42470060 	.word	0x42470060

080020cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_ClockConfig+0x1e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	d904      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x28>
 80020ea:	f240 2137 	movw	r1, #567	; 0x237
 80020ee:	489d      	ldr	r0, [pc, #628]	; (8002364 <HAL_RCC_ClockConfig+0x298>)
 80020f0:	f006 fae6 	bl	80086c0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d031      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d02e      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d02b      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d028      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b04      	cmp	r3, #4
 8002110:	d025      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d022      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b06      	cmp	r3, #6
 800211c:	d01f      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b07      	cmp	r3, #7
 8002122:	d01c      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b08      	cmp	r3, #8
 8002128:	d019      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b09      	cmp	r3, #9
 800212e:	d016      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b0a      	cmp	r3, #10
 8002134:	d013      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b0b      	cmp	r3, #11
 800213a:	d010      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d00d      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b0d      	cmp	r3, #13
 8002146:	d00a      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b0e      	cmp	r3, #14
 800214c:	d007      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b0f      	cmp	r3, #15
 8002152:	d004      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
 8002154:	f44f 710e 	mov.w	r1, #568	; 0x238
 8002158:	4882      	ldr	r0, [pc, #520]	; (8002364 <HAL_RCC_ClockConfig+0x298>)
 800215a:	f006 fab1 	bl	80086c0 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800215e:	4b82      	ldr	r3, [pc, #520]	; (8002368 <HAL_RCC_ClockConfig+0x29c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 020f 	and.w	r2, r3, #15
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d20c      	bcs.n	8002186 <HAL_RCC_ClockConfig+0xba>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216c:	4b7e      	ldr	r3, [pc, #504]	; (8002368 <HAL_RCC_ClockConfig+0x29c>)
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002174:	4b7c      	ldr	r3, [pc, #496]	; (8002368 <HAL_RCC_ClockConfig+0x29c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d001      	beq.n	8002186 <HAL_RCC_ClockConfig+0xba>
    {
      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e169      	b.n	800245a <HAL_RCC_ClockConfig+0x38e>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d031      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x12a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d024      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x118>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b80      	cmp	r3, #128	; 0x80
 80021a0:	d020      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x118>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b90      	cmp	r3, #144	; 0x90
 80021a8:	d01c      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x118>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2ba0      	cmp	r3, #160	; 0xa0
 80021b0:	d018      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x118>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2bb0      	cmp	r3, #176	; 0xb0
 80021b8:	d014      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x118>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2bc0      	cmp	r3, #192	; 0xc0
 80021c0:	d010      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x118>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2bd0      	cmp	r3, #208	; 0xd0
 80021c8:	d00c      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x118>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2be0      	cmp	r3, #224	; 0xe0
 80021d0:	d008      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x118>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2bf0      	cmp	r3, #240	; 0xf0
 80021d8:	d004      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x118>
 80021da:	f240 214f 	movw	r1, #591	; 0x24f
 80021de:	4861      	ldr	r0, [pc, #388]	; (8002364 <HAL_RCC_ClockConfig+0x298>)
 80021e0:	f006 fa6e 	bl	80086c0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4961      	ldr	r1, [pc, #388]	; (800236c <HAL_RCC_ClockConfig+0x2a0>)
 80021e6:	4b61      	ldr	r3, [pc, #388]	; (800236c <HAL_RCC_ClockConfig+0x2a0>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 809b 	beq.w	800233a <HAL_RCC_ClockConfig+0x26e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d010      	beq.n	800222e <HAL_RCC_ClockConfig+0x162>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d00c      	beq.n	800222e <HAL_RCC_ClockConfig+0x162>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d008      	beq.n	800222e <HAL_RCC_ClockConfig+0x162>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d004      	beq.n	800222e <HAL_RCC_ClockConfig+0x162>
 8002224:	f240 2156 	movw	r1, #598	; 0x256
 8002228:	484e      	ldr	r0, [pc, #312]	; (8002364 <HAL_RCC_ClockConfig+0x298>)
 800222a:	f006 fa49 	bl	80086c0 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0x17a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b4d      	ldr	r3, [pc, #308]	; (800236c <HAL_RCC_ClockConfig+0x2a0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d119      	bne.n	8002276 <HAL_RCC_ClockConfig+0x1aa>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e109      	b.n	800245a <HAL_RCC_ClockConfig+0x38e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d003      	beq.n	8002256 <HAL_RCC_ClockConfig+0x18a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8002252:	2b03      	cmp	r3, #3
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0x19a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002256:	4b45      	ldr	r3, [pc, #276]	; (800236c <HAL_RCC_ClockConfig+0x2a0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <HAL_RCC_ClockConfig+0x1aa>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e0f9      	b.n	800245a <HAL_RCC_ClockConfig+0x38e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002266:	4b41      	ldr	r3, [pc, #260]	; (800236c <HAL_RCC_ClockConfig+0x2a0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_ClockConfig+0x1aa>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0f1      	b.n	800245a <HAL_RCC_ClockConfig+0x38e>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002276:	493d      	ldr	r1, [pc, #244]	; (800236c <HAL_RCC_ClockConfig+0x2a0>)
 8002278:	4b3c      	ldr	r3, [pc, #240]	; (800236c <HAL_RCC_ClockConfig+0x2a0>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f023 0203 	bic.w	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4313      	orrs	r3, r2
 8002286:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002288:	f7fe ff94 	bl	80011b4 <HAL_GetTick>
 800228c:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d112      	bne.n	80022bc <HAL_RCC_ClockConfig+0x1f0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002296:	e00a      	b.n	80022ae <HAL_RCC_ClockConfig+0x1e2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7fe ff8c 	bl	80011b4 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e0d5      	b.n	800245a <HAL_RCC_ClockConfig+0x38e>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ae:	4b2f      	ldr	r3, [pc, #188]	; (800236c <HAL_RCC_ClockConfig+0x2a0>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d1ee      	bne.n	8002298 <HAL_RCC_ClockConfig+0x1cc>
 80022ba:	e03e      	b.n	800233a <HAL_RCC_ClockConfig+0x26e>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d112      	bne.n	80022ea <HAL_RCC_ClockConfig+0x21e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_ClockConfig+0x210>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c6:	f7fe ff75 	bl	80011b4 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_ClockConfig+0x210>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e0be      	b.n	800245a <HAL_RCC_ClockConfig+0x38e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	4b23      	ldr	r3, [pc, #140]	; (800236c <HAL_RCC_ClockConfig+0x2a0>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d1ee      	bne.n	80022c6 <HAL_RCC_ClockConfig+0x1fa>
 80022e8:	e027      	b.n	800233a <HAL_RCC_ClockConfig+0x26e>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d11d      	bne.n	800232e <HAL_RCC_ClockConfig+0x262>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80022f2:	e00a      	b.n	800230a <HAL_RCC_ClockConfig+0x23e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f4:	f7fe ff5e 	bl	80011b4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_ClockConfig+0x23e>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e0a7      	b.n	800245a <HAL_RCC_ClockConfig+0x38e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <HAL_RCC_ClockConfig+0x2a0>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b0c      	cmp	r3, #12
 8002314:	d1ee      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x228>
 8002316:	e010      	b.n	800233a <HAL_RCC_ClockConfig+0x26e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7fe ff4c 	bl	80011b4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x262>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e095      	b.n	800245a <HAL_RCC_ClockConfig+0x38e>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_RCC_ClockConfig+0x2a0>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ee      	bne.n	8002318 <HAL_RCC_ClockConfig+0x24c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_ClockConfig+0x29c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 020f 	and.w	r2, r3, #15
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d913      	bls.n	8002370 <HAL_RCC_ClockConfig+0x2a4>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <HAL_RCC_ClockConfig+0x29c>)
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCC_ClockConfig+0x29c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 020f 	and.w	r2, r3, #15
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d008      	beq.n	8002370 <HAL_RCC_ClockConfig+0x2a4>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e07b      	b.n	800245a <HAL_RCC_ClockConfig+0x38e>
 8002362:	bf00      	nop
 8002364:	08008b48 	.word	0x08008b48
 8002368:	40023c00 	.word	0x40023c00
 800236c:	40023800 	.word	0x40023800
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d025      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x2fc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d018      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x2ea>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238c:	d013      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x2ea>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002396:	d00e      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x2ea>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x2ea>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80023aa:	d004      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x2ea>
 80023ac:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 80023b0:	482c      	ldr	r0, [pc, #176]	; (8002464 <HAL_RCC_ClockConfig+0x398>)
 80023b2:	f006 f985 	bl	80086c0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b6:	492c      	ldr	r1, [pc, #176]	; (8002468 <HAL_RCC_ClockConfig+0x39c>)
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <HAL_RCC_ClockConfig+0x39c>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d026      	beq.n	8002422 <HAL_RCC_ClockConfig+0x356>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d018      	beq.n	800240e <HAL_RCC_ClockConfig+0x342>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e4:	d013      	beq.n	800240e <HAL_RCC_ClockConfig+0x342>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80023ee:	d00e      	beq.n	800240e <HAL_RCC_ClockConfig+0x342>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x342>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002402:	d004      	beq.n	800240e <HAL_RCC_ClockConfig+0x342>
 8002404:	f240 21bb 	movw	r1, #699	; 0x2bb
 8002408:	4816      	ldr	r0, [pc, #88]	; (8002464 <HAL_RCC_ClockConfig+0x398>)
 800240a:	f006 f959 	bl	80086c0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800240e:	4916      	ldr	r1, [pc, #88]	; (8002468 <HAL_RCC_ClockConfig+0x39c>)
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_RCC_ClockConfig+0x39c>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002422:	f000 f827 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002426:	4601      	mov	r1, r0
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_RCC_ClockConfig+0x39c>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002430:	23f0      	movs	r3, #240	; 0xf0
 8002432:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	fa22 f303 	lsr.w	r3, r2, r3
 8002446:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x3a0>)
 8002448:	5cd3      	ldrb	r3, [r2, r3]
 800244a:	fa21 f303 	lsr.w	r3, r1, r3
 800244e:	4a08      	ldr	r2, [pc, #32]	; (8002470 <HAL_RCC_ClockConfig+0x3a4>)
 8002450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002452:	2000      	movs	r0, #0
 8002454:	f7fe fe84 	bl	8001160 <HAL_InitTick>
  
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	08008b48 	.word	0x08008b48
 8002468:	40023800 	.word	0x40023800
 800246c:	08008c6c 	.word	0x08008c6c
 8002470:	20000004 	.word	0x20000004

08002474 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b08b      	sub	sp, #44	; 0x2c
 8002478:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800248a:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_RCC_GetSysClockFreq+0xf0>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b04      	cmp	r3, #4
 8002494:	d006      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x30>
 8002496:	2b08      	cmp	r3, #8
 8002498:	d007      	beq.n	80024aa <HAL_RCC_GetSysClockFreq+0x36>
 800249a:	2b00      	cmp	r3, #0
 800249c:	d158      	bne.n	8002550 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800249e:	4b32      	ldr	r3, [pc, #200]	; (8002568 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024a0:	623b      	str	r3, [r7, #32]
       break;
 80024a2:	e058      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024a4:	4b31      	ldr	r3, [pc, #196]	; (800256c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024a6:	623b      	str	r3, [r7, #32]
      break;
 80024a8:	e055      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024aa:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <HAL_RCC_GetSysClockFreq+0xf0>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024b2:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b4:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_RCC_GetSysClockFreq+0xf0>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d017      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80024c0:	4a2a      	ldr	r2, [pc, #168]	; (800256c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_RCC_GetSysClockFreq+0xf0>)
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024d0:	400b      	ands	r3, r1
 80024d2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80024d6:	60f9      	str	r1, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	68f9      	ldr	r1, [r7, #12]
 80024da:	fa91 f1a1 	rbit	r1, r1
 80024de:	60b9      	str	r1, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	fab1 f181 	clz	r1, r1
 80024e6:	40cb      	lsrs	r3, r1
 80024e8:	fb03 f302 	mul.w	r3, r3, r2
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
 80024ee:	e016      	b.n	800251e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80024f0:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f8:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <HAL_RCC_GetSysClockFreq+0xf0>)
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002500:	400b      	ands	r3, r1
 8002502:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8002506:	6179      	str	r1, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6979      	ldr	r1, [r7, #20]
 800250a:	fa91 f1a1 	rbit	r1, r1
 800250e:	6079      	str	r1, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	fab1 f181 	clz	r1, r1
 8002516:	40cb      	lsrs	r3, r1
 8002518:	fb03 f302 	mul.w	r3, r3, r2
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002526:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800252a:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	3301      	adds	r3, #1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8002544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	623b      	str	r3, [r7, #32]
      break;
 800254e:	e002      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002552:	623b      	str	r3, [r7, #32]
      break;
 8002554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002556:	6a3b      	ldr	r3, [r7, #32]
}
 8002558:	4618      	mov	r0, r3
 800255a:	372c      	adds	r7, #44	; 0x2c
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	40023800 	.word	0x40023800
 8002568:	00f42400 	.word	0x00f42400
 800256c:	016e3600 	.word	0x016e3600

08002570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_RCC_GetHCLKFreq+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000004 	.word	0x20000004

08002588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800258e:	f7ff ffef 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 8002592:	4601      	mov	r1, r0
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800259c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80025a0:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	08008c6c 	.word	0x08008c6c

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80025d2:	f7ff ffcd 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80025d6:	4601      	mov	r1, r0
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80025e0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80025e4:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <HAL_RCC_GetPCLK2Freq+0x40>)
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	08008c6c 	.word	0x08008c6c

08002610 <HAL_SD_Init>:
  * @param  hsd: SD handle
  * @param  SDCardInfo: HAL_SD_CardInfoTypedef structure for SD card information   
  * @retval HAL SD error state
  */
HAL_SD_ErrorTypedef HAL_SD_Init(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *SDCardInfo)
{ 
 8002610:	b5b0      	push	{r4, r5, r7, lr}
 8002612:	b08e      	sub	sp, #56	; 0x38
 8002614:	af04      	add	r7, sp, #16
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  SD_InitTypeDef tmpinit;
  
  /* Allocate lock resource and initialize it */
  hsd->Lock = HAL_UNLOCKED;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	771a      	strb	r2, [r3, #28]
  /* Initialize the low level hardware (MSP) */
  HAL_SD_MspInit(hsd);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f006 f876 	bl	8008718 <HAL_SD_MspInit>
  
  /* Default SDIO peripheral configuration for SD card initialization */
  tmpinit.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  tmpinit.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002630:	2300      	movs	r3, #0
 8002632:	613b      	str	r3, [r7, #16]
  tmpinit.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  tmpinit.BusWide             = SDIO_BUS_WIDE_1B;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
  tmpinit.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
  tmpinit.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002640:	2376      	movs	r3, #118	; 0x76
 8002642:	623b      	str	r3, [r7, #32]
  
  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, tmpinit);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681d      	ldr	r5, [r3, #0]
 8002648:	466c      	mov	r4, sp
 800264a:	f107 0318 	add.w	r3, r7, #24
 800264e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800265c:	4628      	mov	r0, r5
 800265e:	f002 f9b9 	bl	80049d4 <SDIO_Init>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd); 
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f001 f82a 	bl	80036bc <SD_PowerON>
 8002668:	4603      	mov	r3, r0
 800266a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if(errorstate != SD_OK)     
 800266e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_SD_Init+0x70>
  {
    return errorstate;
 8002678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e039      	b.n	80026f4 <HAL_SD_Init+0xe4>
  }
  
  /* Initialize the present SDIO card(s) and put them in idle state */
  errorstate = SD_Initialize_Cards(hsd);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 ff2d 	bl	80034e0 <SD_Initialize_Cards>
 8002686:	4603      	mov	r3, r0
 8002688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (errorstate != SD_OK)
 800268c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_SD_Init+0x8e>
  {
    return errorstate;
 8002696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800269a:	b2db      	uxtb	r3, r3
 800269c:	e02a      	b.n	80026f4 <HAL_SD_Init+0xe4>
  }
  
  /* Read CSD/CID MSD registers */
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 800269e:	6839      	ldr	r1, [r7, #0]
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fb57 	bl	8002d54 <HAL_SD_Get_CardInfo>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (errorstate == SD_OK)
 80026ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <HAL_SD_Init+0xc2>
  {
    /* Select the Card */
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16U));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80026bc:	041b      	lsls	r3, r3, #16
 80026be:	f04f 0400 	mov.w	r4, #0
 80026c2:	461a      	mov	r2, r3
 80026c4:	4623      	mov	r3, r4
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 ffce 	bl	8003668 <SD_Select_Deselect>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  /* Configure SDIO peripheral interface */
  SDIO_Init(hsd->Instance, hsd->Init);   
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681d      	ldr	r5, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	466c      	mov	r4, sp
 80026da:	f103 0210 	add.w	r2, r3, #16
 80026de:	ca07      	ldmia	r2, {r0, r1, r2}
 80026e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026e4:	3304      	adds	r3, #4
 80026e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026e8:	4628      	mov	r0, r5
 80026ea:	f002 f973 	bl	80049d4 <SDIO_Init>
  
  return errorstate;
 80026ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026f2:	b2db      	uxtb	r3, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3728      	adds	r7, #40	; 0x28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bdb0      	pop	{r4, r5, r7, pc}

080026fc <HAL_SD_ReadBlocks>:
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of SD blocks to read   
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint32_t *pReadBuffer, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 80026fc:	b5b0      	push	{r4, r5, r7, lr}
 80026fe:	b092      	sub	sp, #72	; 0x48
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t count = 0U, *tempbuff = (uint32_t *)pReadBuffer;
 8002710:	2300      	movs	r3, #0
 8002712:	643b      	str	r3, [r7, #64]	; 0x40
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0U;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2200      	movs	r2, #0
 800271e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d10a      	bne.n	800273e <HAL_SD_ReadBlocks+0x42>
  {
    BlockSize = 512U;
 8002728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800272c:	65bb      	str	r3, [r7, #88]	; 0x58
    ReadAddr /= 512U;
 800272e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002732:	0a54      	lsrs	r4, r2, #9
 8002734:	ea44 54c3 	orr.w	r4, r4, r3, lsl #23
 8002738:	0a5d      	lsrs	r5, r3, #9
 800273a:	e9c7 4500 	strd	r4, r5, [r7]
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t) BlockSize;
 800273e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8002742:	2310      	movs	r3, #16
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8002746:	2340      	movs	r3, #64	; 0x40
 8002748:	633b      	str	r3, [r7, #48]	; 0x30
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800274a:	2300      	movs	r3, #0
 800274c:	637b      	str	r3, [r7, #52]	; 0x34
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800274e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002752:	63bb      	str	r3, [r7, #56]	; 0x38
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f002 f9ee 	bl	8004b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8002764:	2110      	movs	r1, #16
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f001 f95a 	bl	8003a20 <SD_CmdResp1Error>
 800276c:	4603      	mov	r3, r0
 800276e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  
  if (errorstate != SD_OK)
 8002772:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_SD_ReadBlocks+0x84>
  {
    return errorstate;
 800277a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800277e:	e119      	b.n	80029b4 <HAL_SD_ReadBlocks+0x2b8>
  }
  
  /* Configure the SD DPSM (Data Path State Machine) */
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	613b      	str	r3, [r7, #16]
  sdio_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
 8002786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002788:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	617b      	str	r3, [r7, #20]
  sdio_datainitstructure.DataBlockSize = DATA_BLOCK_SIZE;
 8002790:	2390      	movs	r3, #144	; 0x90
 8002792:	61bb      	str	r3, [r7, #24]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002794:	2302      	movs	r3, #2
 8002796:	61fb      	str	r3, [r7, #28]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002798:	2300      	movs	r3, #0
 800279a:	623b      	str	r3, [r7, #32]
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 800279c:	2301      	movs	r3, #1
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f107 0210 	add.w	r2, r7, #16
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f002 fa62 	bl	8004c74 <SDIO_DataConfig>
  
  if(NumberOfBlocks > 1U)
 80027b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d902      	bls.n	80027bc <HAL_SD_ReadBlocks+0xc0>
  {
    /* Send CMD18 READ_MULT_BLOCK with argument data address */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 80027b6:	2312      	movs	r3, #18
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ba:	e001      	b.n	80027c0 <HAL_SD_ReadBlocks+0xc4>
  }
  else
  {
    /* Send CMD17 READ_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;    
 80027bc:	2311      	movs	r3, #17
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  sdio_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 f9b6 	bl	8004b40 <SDIO_SendCommand>
  
  /* Read block(s) in polling mode */
  if(NumberOfBlocks > 1U)
 80027d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d934      	bls.n	8002844 <HAL_SD_ReadBlocks+0x148>
  {
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 80027da:	2112      	movs	r1, #18
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f001 f91f 	bl	8003a20 <SD_CmdResp1Error>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    if (errorstate != SD_OK)
 80027e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_SD_ReadBlocks+0x136>
    {
      return errorstate;
 80027f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027f4:	e0de      	b.n	80029b4 <HAL_SD_ReadBlocks+0x2b8>
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d016      	beq.n	8002832 <HAL_SD_ReadBlocks+0x136>
      {
        /* Read data from SDIO Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8002804:	2300      	movs	r3, #0
 8002806:	643b      	str	r3, [r7, #64]	; 0x40
 8002808:	e00d      	b.n	8002826 <HAL_SD_ReadBlocks+0x12a>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 800280a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002810:	18d4      	adds	r4, r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f002 f956 	bl	8004ac8 <SDIO_ReadFIFO>
 800281c:	4603      	mov	r3, r0
 800281e:	6023      	str	r3, [r4, #0]
#endif /* SDIO_STA_STBITERR */
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
      {
        /* Read data from SDIO Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8002820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002822:	3301      	adds	r3, #1
 8002824:	643b      	str	r3, [r7, #64]	; 0x40
 8002826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002828:	2b07      	cmp	r3, #7
 800282a:	d9ee      	bls.n	800280a <HAL_SD_ReadBlocks+0x10e>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
        }
        
        tempbuff += 8U;
 800282c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282e:	3320      	adds	r3, #32
 8002830:	63fb      	str	r3, [r7, #60]	; 0x3c
      return errorstate;
    }
    
    /* Poll on SDIO flags */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002838:	f240 332a 	movw	r3, #810	; 0x32a
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0d9      	beq.n	80027f6 <HAL_SD_ReadBlocks+0xfa>
 8002842:	e033      	b.n	80028ac <HAL_SD_ReadBlocks+0x1b0>
    }      
  }
  else
  {
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK); 
 8002844:	2111      	movs	r1, #17
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f001 f8ea 	bl	8003a20 <SD_CmdResp1Error>
 800284c:	4603      	mov	r3, r0
 800284e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    if (errorstate != SD_OK)
 8002852:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002856:	2b00      	cmp	r3, #0
 8002858:	d020      	beq.n	800289c <HAL_SD_ReadBlocks+0x1a0>
    {
      return errorstate;
 800285a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800285e:	e0a9      	b.n	80029b4 <HAL_SD_ReadBlocks+0x2b8>
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))      
#endif /* SDIO_STA_STBITERR */
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d016      	beq.n	800289c <HAL_SD_ReadBlocks+0x1a0>
      {
        /* Read data from SDIO Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800286e:	2300      	movs	r3, #0
 8002870:	643b      	str	r3, [r7, #64]	; 0x40
 8002872:	e00d      	b.n	8002890 <HAL_SD_ReadBlocks+0x194>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8002874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800287a:	18d4      	adds	r4, r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f002 f921 	bl	8004ac8 <SDIO_ReadFIFO>
 8002886:	4603      	mov	r3, r0
 8002888:	6023      	str	r3, [r4, #0]
#endif /* SDIO_STA_STBITERR */
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
      {
        /* Read data from SDIO Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800288a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288c:	3301      	adds	r3, #1
 800288e:	643b      	str	r3, [r7, #64]	; 0x40
 8002890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002892:	2b07      	cmp	r3, #7
 8002894:	d9ee      	bls.n	8002874 <HAL_SD_ReadBlocks+0x178>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
        }
        
        tempbuff += 8U;
 8002896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002898:	3320      	adds	r3, #32
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
      return errorstate;
    }    
    
    /* In case of single block transfer, no need of stop transfer at all */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a2:	f240 632a 	movw	r3, #1578	; 0x62a
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0d9      	beq.n	8002860 <HAL_SD_ReadBlocks+0x164>
      }
    }
  }
  
  /* Send stop transmission command in case of multiblock read */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d014      	beq.n	80028e4 <HAL_SD_ReadBlocks+0x1e8>
 80028ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d911      	bls.n	80028e4 <HAL_SD_ReadBlocks+0x1e8>
  {    
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) ||\
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <HAL_SD_ReadBlocks+0x1dc>
      (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
  }
  
  /* Send stop transmission command in case of multiblock read */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
  {    
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) ||\
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d003      	beq.n	80028d8 <HAL_SD_ReadBlocks+0x1dc>
      (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
        (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
  
  /* Send stop transmission command in case of multiblock read */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
  {    
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) ||\
      (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d105      	bne.n	80028e4 <HAL_SD_ReadBlocks+0x1e8>
        (hsd->CardType == HIGH_CAPACITY_SD_CARD))
    {
      /* Send stop transmission command */
      errorstate = HAL_SD_StopTransfer(hsd);
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fda7 	bl	800342c <HAL_SD_StopTransfer>
 80028de:	4603      	mov	r3, r0
 80028e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
  }
  
  /* Get error state */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_SD_ReadBlocks+0x20a>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2208      	movs	r2, #8
 80028f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
 80028fa:	2304      	movs	r3, #4
 80028fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    return errorstate;
 8002900:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002904:	e056      	b.n	80029b4 <HAL_SD_ReadBlocks+0x2b8>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d009      	beq.n	8002928 <HAL_SD_ReadBlocks+0x22c>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2202      	movs	r2, #2
 800291a:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_CRC_FAIL;
 800291c:	2302      	movs	r3, #2
 800291e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    return errorstate;
 8002922:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002926:	e045      	b.n	80029b4 <HAL_SD_ReadBlocks+0x2b8>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_SD_ReadBlocks+0x24e>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2220      	movs	r2, #32
 800293c:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_RX_OVERRUN;
 800293e:	2306      	movs	r3, #6
 8002940:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    return errorstate;
 8002944:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002948:	e034      	b.n	80029b4 <HAL_SD_ReadBlocks+0x2b8>
  }
#ifdef SDIO_STA_STBITERR
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_SD_ReadBlocks+0x272>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_START_BIT_ERR;
 8002962:	2307      	movs	r3, #7
 8002964:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    return errorstate;
 8002968:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800296c:	e022      	b.n	80029b4 <HAL_SD_ReadBlocks+0x2b8>
  else
  {
    /* No error flag set */
  }
  
  count = SD_DATATIMEOUT;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
 8002972:	643b      	str	r3, [r7, #64]	; 0x40
  
  /* Empty FIFO if there is still any data */
  while ((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (count > 0U))
 8002974:	e00d      	b.n	8002992 <HAL_SD_ReadBlocks+0x296>
  {
    *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f002 f8a4 	bl	8004ac8 <SDIO_ReadFIFO>
 8002980:	4602      	mov	r2, r0
 8002982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002984:	601a      	str	r2, [r3, #0]
    tempbuff++;
 8002986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002988:	3304      	adds	r3, #4
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
    count--;
 800298c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800298e:	3b01      	subs	r3, #1
 8002990:	643b      	str	r3, [r7, #64]	; 0x40
  }
  
  count = SD_DATATIMEOUT;
  
  /* Empty FIFO if there is still any data */
  while ((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (count > 0U))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_SD_ReadBlocks+0x2aa>
 80029a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e7      	bne.n	8002976 <HAL_SD_ReadBlocks+0x27a>
    tempbuff++;
    count--;
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80029ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 80029b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3748      	adds	r7, #72	; 0x48
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bdb0      	pop	{r4, r5, r7, pc}

080029bc <HAL_SD_WriteBlocks>:
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of SD blocks to write 
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint32_t *pWriteBuffer, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 80029bc:	b5b0      	push	{r4, r5, r7, lr}
 80029be:	b096      	sub	sp, #88	; 0x58
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint32_t totalnumberofbytes = 0U, bytestransferred = 0U, count = 0U, restwords = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	647b      	str	r3, [r7, #68]	; 0x44
 80029d4:	2300      	movs	r3, #0
 80029d6:	653b      	str	r3, [r7, #80]	; 0x50
 80029d8:	2300      	movs	r3, #0
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029dc:	2300      	movs	r3, #0
 80029de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t *tempbuff = (uint32_t *)pWriteBuffer;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	64bb      	str	r3, [r7, #72]	; 0x48
  uint8_t cardstate  = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	74fb      	strb	r3, [r7, #19]
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2200      	movs	r2, #0
 80029ee:	62da      	str	r2, [r3, #44]	; 0x2c
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d10a      	bne.n	8002a0e <HAL_SD_WriteBlocks+0x52>
  {
    BlockSize = 512U;
 80029f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029fc:	66bb      	str	r3, [r7, #104]	; 0x68
    WriteAddr /= 512U;
 80029fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a02:	0a54      	lsrs	r4, r2, #9
 8002a04:	ea44 54c3 	orr.w	r4, r4, r3, lsl #23
 8002a08:	0a5d      	lsrs	r5, r3, #9
 8002a0a:	e9c7 4500 	strd	r4, r5, [r7]
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8002a0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8002a12:	2310      	movs	r3, #16
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8002a16:	2340      	movs	r3, #64	; 0x40
 8002a18:	637b      	str	r3, [r7, #52]	; 0x34
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8002a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f002 f886 	bl	8004b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8002a34:	2110      	movs	r1, #16
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 fff2 	bl	8003a20 <SD_CmdResp1Error>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  
  if (errorstate != SD_OK)
 8002a42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_SD_WriteBlocks+0x94>
  {
    return errorstate;
 8002a4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a4e:	e17c      	b.n	8002d4a <HAL_SD_WriteBlocks+0x38e>
  }
  
  if(NumberOfBlocks > 1U)
 8002a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d902      	bls.n	8002a5c <HAL_SD_WriteBlocks+0xa0>
  {
    /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8002a56:	2319      	movs	r3, #25
 8002a58:	633b      	str	r3, [r7, #48]	; 0x30
 8002a5a:	e001      	b.n	8002a60 <HAL_SD_WriteBlocks+0xa4>
  }
  else
  {
    /* Send CMD24 WRITE_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 8002a5c:	2318      	movs	r3, #24
 8002a5e:	633b      	str	r3, [r7, #48]	; 0x30
  }
  
  sdio_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f002 f866 	bl	8004b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  if(NumberOfBlocks > 1U)
 8002a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d907      	bls.n	8002a8a <HAL_SD_WriteBlocks+0xce>
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 8002a7a:	2119      	movs	r1, #25
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 ffcf 	bl	8003a20 <SD_CmdResp1Error>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002a88:	e006      	b.n	8002a98 <HAL_SD_WriteBlocks+0xdc>
  }
  else
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8002a8a:	2118      	movs	r1, #24
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 ffc7 	bl	8003a20 <SD_CmdResp1Error>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  }  
  
  if (errorstate != SD_OK)
 8002a98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_SD_WriteBlocks+0xea>
  {
    return errorstate;
 8002aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002aa4:	e151      	b.n	8002d4a <HAL_SD_WriteBlocks+0x38e>
  }
  
  /* Set total number of bytes to write */
  totalnumberofbytes = NumberOfBlocks * BlockSize;
 8002aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	617b      	str	r3, [r7, #20]
  sdio_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
 8002ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	61bb      	str	r3, [r7, #24]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ac0:	2390      	movs	r3, #144	; 0x90
 8002ac2:	61fb      	str	r3, [r7, #28]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	623b      	str	r3, [r7, #32]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8002acc:	2301      	movs	r3, #1
 8002ace:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f107 0214 	add.w	r2, r7, #20
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f002 f8ca 	bl	8004c74 <SDIO_DataConfig>
  
  /* Write block(s) in polling mode */
  if(NumberOfBlocks > 1U)
 8002ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	f240 80a4 	bls.w	8002c30 <HAL_SD_WriteBlocks+0x274>
  {
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002ae8:	e04c      	b.n	8002b84 <HAL_SD_WriteBlocks+0x1c8>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */     
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d045      	beq.n	8002b84 <HAL_SD_WriteBlocks+0x1c8>
      {
        if ((totalnumberofbytes - bytestransferred) < 32U)
 8002af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b1f      	cmp	r3, #31
 8002b00:	d828      	bhi.n	8002b54 <HAL_SD_WriteBlocks+0x198>
        {
          restwords = ((totalnumberofbytes - bytestransferred) % 4U == 0U) ? ((totalnumberofbytes - bytestransferred) / 4U) : (( totalnumberofbytes -  bytestransferred) / 4U + 1U);
 8002b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <HAL_SD_WriteBlocks+0x15e>
 8002b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	e004      	b.n	8002b24 <HAL_SD_WriteBlocks+0x168>
 8002b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	3301      	adds	r3, #1
 8002b24:	643b      	str	r3, [r7, #64]	; 0x40
          
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < restwords; count++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b2a:	e00e      	b.n	8002b4a <HAL_SD_WriteBlocks+0x18e>
          {
            SDIO_WriteFIFO(hsd->Instance, tempbuff);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 ffd6 	bl	8004ae4 <SDIO_WriteFIFO>
            tempbuff++;
 8002b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	64bb      	str	r3, [r7, #72]	; 0x48
            bytestransferred += 4U;
 8002b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b40:	3304      	adds	r3, #4
 8002b42:	653b      	str	r3, [r7, #80]	; 0x50
        if ((totalnumberofbytes - bytestransferred) < 32U)
        {
          restwords = ((totalnumberofbytes - bytestransferred) % 4U == 0U) ? ((totalnumberofbytes - bytestransferred) / 4U) : (( totalnumberofbytes -  bytestransferred) / 4U + 1U);
          
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < restwords; count++)
 8002b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b46:	3301      	adds	r3, #1
 8002b48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d3ec      	bcc.n	8002b2c <HAL_SD_WriteBlocks+0x170>
 8002b52:	e017      	b.n	8002b84 <HAL_SD_WriteBlocks+0x1c8>
          }
        }
        else
        {
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < 8U; count++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b58:	e00b      	b.n	8002b72 <HAL_SD_WriteBlocks+0x1b6>
          {
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b64:	4413      	add	r3, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f001 ffbc 	bl	8004ae4 <SDIO_WriteFIFO>
          }
        }
        else
        {
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < 8U; count++)
 8002b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6e:	3301      	adds	r3, #1
 8002b70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b74:	2b07      	cmp	r3, #7
 8002b76:	d9f0      	bls.n	8002b5a <HAL_SD_WriteBlocks+0x19e>
          {
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
          }
          
          tempbuff += 8U;
 8002b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7a:	3320      	adds	r3, #32
 8002b7c:	64bb      	str	r3, [r7, #72]	; 0x48
          bytestransferred += 32U;
 8002b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b80:	3320      	adds	r3, #32
 8002b82:	653b      	str	r3, [r7, #80]	; 0x50
  
  /* Write block(s) in polling mode */
  if(NumberOfBlocks > 1U)
  {
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8a:	f240 331a 	movw	r3, #794	; 0x31a
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0aa      	beq.n	8002aea <HAL_SD_WriteBlocks+0x12e>
 8002b94:	e054      	b.n	8002c40 <HAL_SD_WriteBlocks+0x284>
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
#endif /* SDIO_STA_STBITERR */
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d045      	beq.n	8002c30 <HAL_SD_WriteBlocks+0x274>
      {
        if ((totalnumberofbytes - bytestransferred) < 32U)
 8002ba4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b1f      	cmp	r3, #31
 8002bac:	d828      	bhi.n	8002c00 <HAL_SD_WriteBlocks+0x244>
        {
          restwords = ((totalnumberofbytes - bytestransferred) % 4U == 0U) ? ((totalnumberofbytes - bytestransferred) / 4U) : (( totalnumberofbytes -  bytestransferred) / 4U + 1U);
 8002bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <HAL_SD_WriteBlocks+0x20a>
 8002bbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	e004      	b.n	8002bd0 <HAL_SD_WriteBlocks+0x214>
 8002bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3301      	adds	r3, #1
 8002bd0:	643b      	str	r3, [r7, #64]	; 0x40
          
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < restwords; count++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd6:	e00e      	b.n	8002bf6 <HAL_SD_WriteBlocks+0x23a>
          {
            SDIO_WriteFIFO(hsd->Instance, tempbuff);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 ff80 	bl	8004ae4 <SDIO_WriteFIFO>
            tempbuff++; 
 8002be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be6:	3304      	adds	r3, #4
 8002be8:	64bb      	str	r3, [r7, #72]	; 0x48
            bytestransferred += 4U;
 8002bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bec:	3304      	adds	r3, #4
 8002bee:	653b      	str	r3, [r7, #80]	; 0x50
        if ((totalnumberofbytes - bytestransferred) < 32U)
        {
          restwords = ((totalnumberofbytes - bytestransferred) % 4U == 0U) ? ((totalnumberofbytes - bytestransferred) / 4U) : (( totalnumberofbytes -  bytestransferred) / 4U + 1U);
          
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < restwords; count++)
 8002bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d3ec      	bcc.n	8002bd8 <HAL_SD_WriteBlocks+0x21c>
 8002bfe:	e017      	b.n	8002c30 <HAL_SD_WriteBlocks+0x274>
          }
        }
        else
        {
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < 8U; count++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c04:	e00b      	b.n	8002c1e <HAL_SD_WriteBlocks+0x262>
          {
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c10:	4413      	add	r3, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f001 ff66 	bl	8004ae4 <SDIO_WriteFIFO>
          }
        }
        else
        {
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < 8U; count++)
 8002c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c20:	2b07      	cmp	r3, #7
 8002c22:	d9f0      	bls.n	8002c06 <HAL_SD_WriteBlocks+0x24a>
          {
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
          }
          
          tempbuff += 8U;
 8002c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c26:	3320      	adds	r3, #32
 8002c28:	64bb      	str	r3, [r7, #72]	; 0x48
          bytestransferred += 32U;
 8002c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2c:	3320      	adds	r3, #32
 8002c2e:	653b      	str	r3, [r7, #80]	; 0x50
  }
  else
  {
    /* In case of single data block transfer no need of stop command at all */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c36:	f240 631a 	movw	r3, #1562	; 0x61a
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0aa      	beq.n	8002b96 <HAL_SD_WriteBlocks+0x1da>
      }
    }  
  }
  
  /* Send stop transmission command in case of multiblock write */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d014      	beq.n	8002c78 <HAL_SD_WriteBlocks+0x2bc>
 8002c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d911      	bls.n	8002c78 <HAL_SD_WriteBlocks+0x2bc>
  {    
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_SD_WriteBlocks+0x2b0>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d003      	beq.n	8002c6c <HAL_SD_WriteBlocks+0x2b0>
      (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
  }
  
  /* Send stop transmission command in case of multiblock write */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
  {    
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d105      	bne.n	8002c78 <HAL_SD_WriteBlocks+0x2bc>
      (hsd->CardType == HIGH_CAPACITY_SD_CARD))
    {
      /* Send stop transmission command */
      errorstate = HAL_SD_StopTransfer(hsd);
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fbdd 	bl	800342c <HAL_SD_StopTransfer>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }
  }
  
  /* Get error state */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d009      	beq.n	8002c9a <HAL_SD_WriteBlocks+0x2de>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    return errorstate;
 8002c94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c98:	e057      	b.n	8002d4a <HAL_SD_WriteBlocks+0x38e>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <HAL_SD_WriteBlocks+0x300>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2202      	movs	r2, #2
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_CRC_FAIL;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    return errorstate;
 8002cb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cba:	e046      	b.n	8002d4a <HAL_SD_WriteBlocks+0x38e>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_SD_WriteBlocks+0x322>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_TXUNDERR);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2210      	movs	r2, #16
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_TX_UNDERRUN;
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    return errorstate;
 8002cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cdc:	e035      	b.n	8002d4a <HAL_SD_WriteBlocks+0x38e>
  }
#ifdef SDIO_STA_STBITERR
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_SD_WriteBlocks+0x346>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_START_BIT_ERR;
 8002cf6:	2307      	movs	r3, #7
 8002cf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    return errorstate;
 8002cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d00:	e023      	b.n	8002d4a <HAL_SD_WriteBlocks+0x38e>
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Wait till the card is in programming state */
  errorstate = SD_IsCardProgramming(hsd, &cardstate);
 8002d0c:	f107 0313 	add.w	r3, r7, #19
 8002d10:	4619      	mov	r1, r3
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f001 fa24 	bl	8004160 <SD_IsCardProgramming>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  
  while ((errorstate == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
 8002d1e:	e008      	b.n	8002d32 <HAL_SD_WriteBlocks+0x376>
  {
    errorstate = SD_IsCardProgramming(hsd, &cardstate);
 8002d20:	f107 0313 	add.w	r3, r7, #19
 8002d24:	4619      	mov	r1, r3
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f001 fa1a 	bl	8004160 <SD_IsCardProgramming>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
  
  /* Wait till the card is in programming state */
  errorstate = SD_IsCardProgramming(hsd, &cardstate);
  
  while ((errorstate == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
 8002d32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d105      	bne.n	8002d46 <HAL_SD_WriteBlocks+0x38a>
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	2b07      	cmp	r3, #7
 8002d3e:	d0ef      	beq.n	8002d20 <HAL_SD_WriteBlocks+0x364>
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d0ec      	beq.n	8002d20 <HAL_SD_WriteBlocks+0x364>
  {
    errorstate = SD_IsCardProgramming(hsd, &cardstate);
  }
  
  return errorstate;
 8002d46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3758      	adds	r7, #88	; 0x58
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bdb0      	pop	{r4, r5, r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_SD_Get_CardInfo>:
  * @param  pCardInfo: Pointer to a HAL_SD_CardInfoTypedef structure that  
  *         contains all SD cardinformation  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_Get_CardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *pCardInfo)
{
 8002d54:	b4b0      	push	{r4, r5, r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8002d5e:	2200      	movs	r2, #0
 8002d60:	73fa      	strb	r2, [r7, #15]
  uint32_t tmp = 0U;
 8002d62:	2200      	movs	r2, #0
 8002d64:	60ba      	str	r2, [r7, #8]
  
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6a12      	ldr	r2, [r2, #32]
 8002d6a:	b2d1      	uxtb	r1, r2
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d76:	b291      	uxth	r1, r2
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	f8a2 1054 	strh.w	r1, [r2, #84]	; 0x54
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002d82:	0e12      	lsrs	r2, r2, #24
 8002d84:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	0992      	lsrs	r2, r2, #6
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	f002 0203 	and.w	r2, r2, #3
 8002d90:	b2d1      	uxtb	r1, r2
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	7011      	strb	r1, [r2, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	0892      	lsrs	r2, r2, #2
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f002 020f 	and.w	r2, r2, #15
 8002da0:	b2d1      	uxtb	r1, r2
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	7051      	strb	r1, [r2, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03U;
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f002 0203 	and.w	r2, r2, #3
 8002dae:	b2d1      	uxtb	r1, r2
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	7091      	strb	r1, [r2, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002db8:	0c12      	lsrs	r2, r2, #16
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	b2d1      	uxtb	r1, r2
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	70d1      	strb	r1, [r2, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002dca:	0a12      	lsrs	r2, r2, #8
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	b2d1      	uxtb	r1, r2
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	7111      	strb	r1, [r2, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	b2d1      	uxtb	r1, r2
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	7151      	strb	r1, [r2, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002dec:	0e12      	lsrs	r2, r2, #24
 8002dee:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4U);
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	b292      	uxth	r2, r2
 8002df4:	0112      	lsls	r2, r2, #4
 8002df6:	b291      	uxth	r1, r2
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	80d1      	strh	r1, [r2, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e00:	0c12      	lsrs	r2, r2, #16
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4U);
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	88d2      	ldrh	r2, [r2, #6]
 8002e0a:	b292      	uxth	r2, r2
 8002e0c:	b211      	sxth	r1, r2
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	0912      	lsrs	r2, r2, #4
 8002e12:	b212      	sxth	r2, r2
 8002e14:	f002 020f 	and.w	r2, r2, #15
 8002e18:	b212      	sxth	r2, r2
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	b212      	sxth	r2, r2
 8002e1e:	b291      	uxth	r1, r2
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	80d1      	strh	r1, [r2, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	f002 020f 	and.w	r2, r2, #15
 8002e2c:	b2d1      	uxtb	r1, r2
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	7211      	strb	r1, [r2, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e36:	0a12      	lsrs	r2, r2, #8
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	09d2      	lsrs	r2, r2, #7
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f002 0201 	and.w	r2, r2, #1
 8002e46:	b2d1      	uxtb	r1, r2
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	7251      	strb	r1, [r2, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	0992      	lsrs	r2, r2, #6
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f002 0201 	and.w	r2, r2, #1
 8002e56:	b2d1      	uxtb	r1, r2
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	7291      	strb	r1, [r2, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	0952      	lsrs	r2, r2, #5
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f002 0201 	and.w	r2, r2, #1
 8002e66:	b2d1      	uxtb	r1, r2
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	72d1      	strb	r1, [r2, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	0912      	lsrs	r2, r2, #4
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	f002 0201 	and.w	r2, r2, #1
 8002e76:	b2d1      	uxtb	r1, r2
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	7311      	strb	r1, [r2, #12]
  pCardInfo->SD_csd.Reserved2       = 0U; /*!< Reserved */
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	2100      	movs	r1, #0
 8002e80:	7351      	strb	r1, [r2, #13]
  
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6a12      	ldr	r2, [r2, #32]
 8002e86:	2a00      	cmp	r2, #0
 8002e88:	d004      	beq.n	8002e94 <HAL_SD_Get_CardInfo+0x140>
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6a12      	ldr	r2, [r2, #32]
 8002e8e:	2a01      	cmp	r2, #1
 8002e90:	f040 809a 	bne.w	8002fc8 <HAL_SD_Get_CardInfo+0x274>
  {
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03U) << 10U;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	029b      	lsls	r3, r3, #10
 8002e98:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2U;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	0e1b      	lsrs	r3, r3, #24
 8002ebc:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0U) >> 6U;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	611a      	str	r2, [r3, #16]
    
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	08db      	lsrs	r3, r3, #3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	751a      	strb	r2, [r3, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07U);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	759a      	strb	r2, [r3, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	75da      	strb	r2, [r3, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f003 0306 	and.w	r3, r3, #6
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	7e1b      	ldrb	r3, [r3, #24]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	09db      	lsrs	r3, r3, #7
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	4313      	orrs	r3, r2
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	761a      	strb	r2, [r3, #24]
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1U) ;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	3301      	adds	r3, #1
 8002f54:	f04f 0400 	mov.w	r4, #0
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    pCardInfo->CardCapacity *= (1U << (pCardInfo->SD_csd.DeviceSizeMul + 2U));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	7e1b      	ldrb	r3, [r3, #24]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3302      	adds	r3, #2
 8002f66:	2201      	movs	r2, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	e9d2 1212 	ldrd	r1, r2, [r2, #72]	; 0x48
 8002f72:	f04f 0400 	mov.w	r4, #0
 8002f76:	fb03 f502 	mul.w	r5, r3, r2
 8002f7a:	fb01 f004 	mul.w	r0, r1, r4
 8002f7e:	4428      	add	r0, r5
 8002f80:	fba1 3403 	umull	r3, r4, r1, r3
 8002f84:	1902      	adds	r2, r0, r4
 8002f86:	4614      	mov	r4, r2
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    pCardInfo->CardBlockSize = 1U << (pCardInfo->SD_csd.RdBlockLen);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	7a1b      	ldrb	r3, [r3, #8]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	2301      	movs	r3, #1
 8002f98:	fa03 f202 	lsl.w	r2, r3, r2
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	651a      	str	r2, [r3, #80]	; 0x50
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002faa:	f04f 0400 	mov.w	r4, #0
 8002fae:	fb03 f502 	mul.w	r5, r3, r2
 8002fb2:	fb01 f004 	mul.w	r0, r1, r4
 8002fb6:	4428      	add	r0, r5
 8002fb8:	fba1 3403 	umull	r3, r4, r1, r3
 8002fbc:	1902      	adds	r2, r0, r4
 8002fbe:	4614      	mov	r4, r2
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
 8002fc6:	e03e      	b.n	8003046 <HAL_SD_Get_CardInfo+0x2f2>
  }
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6a12      	ldr	r2, [r2, #32]
 8002fcc:	2a02      	cmp	r2, #2
 8002fce:	d138      	bne.n	8003042 <HAL_SD_Get_CardInfo+0x2ee>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	60ba      	str	r2, [r7, #8]
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3FU) << 16U;
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	0412      	lsls	r2, r2, #16
 8002fdc:	f402 117c 	and.w	r1, r2, #4128768	; 0x3f0000
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	6111      	str	r1, [r2, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fe8:	0e12      	lsrs	r2, r2, #24
 8002fea:	60ba      	str	r2, [r7, #8]
    
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8U);
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	6911      	ldr	r1, [r2, #16]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	0212      	lsls	r2, r2, #8
 8002ff4:	4311      	orrs	r1, r2
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	6111      	str	r1, [r2, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ffe:	0c12      	lsrs	r2, r2, #16
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	60ba      	str	r2, [r7, #8]
    
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	6911      	ldr	r1, [r2, #16]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	4311      	orrs	r1, r2
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	6111      	str	r1, [r2, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003014:	0a12      	lsrs	r2, r2, #8
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	60ba      	str	r2, [r7, #8]
    
    pCardInfo->CardCapacity = (uint64_t)((((uint64_t)pCardInfo->SD_csd.DeviceSize + 1U)) * 512U * 1024U);
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	6912      	ldr	r2, [r2, #16]
 800301e:	4611      	mov	r1, r2
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	3101      	adds	r1, #1
 8003026:	f142 0200 	adc.w	r2, r2, #0
 800302a:	04d4      	lsls	r4, r2, #19
 800302c:	ea44 3451 	orr.w	r4, r4, r1, lsr #13
 8003030:	04cb      	lsls	r3, r1, #19
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    pCardInfo->CardBlockSize = 512U;    
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800303e:	651a      	str	r2, [r3, #80]	; 0x50
 8003040:	e001      	b.n	8003046 <HAL_SD_Get_CardInfo+0x2f2>
  }
  else
  {
    /* Not supported card type */
    errorstate = SD_ERROR;
 8003042:	2329      	movs	r3, #41	; 0x29
 8003044:	73fb      	strb	r3, [r7, #15]
  }
    
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40U) >> 6U;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	b2da      	uxtb	r2, r3
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	765a      	strb	r2, [r3, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3FU) << 1U;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003062:	b2da      	uxtb	r2, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	b2db      	uxtb	r3, r3
 800306e:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	7e9b      	ldrb	r3, [r3, #26]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	09db      	lsrs	r3, r3, #7
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4313      	orrs	r3, r2
 8003084:	b2da      	uxtb	r2, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	769a      	strb	r2, [r3, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7FU);
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003092:	b2da      	uxtb	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309c:	0e1b      	lsrs	r3, r3, #24
 800309e:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	09db      	lsrs	r3, r3, #7
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	771a      	strb	r2, [r3, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60U) >> 5U;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	775a      	strb	r2, [r3, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	779a      	strb	r2, [r3, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	0c1b      	lsrs	r3, r3, #16
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	7fdb      	ldrb	r3, [r3, #31]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	4313      	orrs	r3, r2
 8003100:	b2da      	uxtb	r2, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	77da      	strb	r2, [r3, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	b2da      	uxtb	r2, r3
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f883 2020 	strb.w	r2, [r3, #32]
  pCardInfo->SD_csd.Reserved3           = 0U;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01U);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	b2da      	uxtb	r2, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	b2db      	uxtb	r3, r3
 8003138:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	09db      	lsrs	r3, r3, #7
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	b2da      	uxtb	r2, r3
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40U) >> 6U;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	099b      	lsrs	r3, r3, #6
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	b2da      	uxtb	r2, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20U) >> 5U;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	b2da      	uxtb	r2, r3
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10U) >> 4U;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	b2da      	uxtb	r2, r3
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0CU) >> 2U;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	b2da      	uxtb	r2, r3
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCardInfo->SD_csd.ECC              = (tmp & 0x03U);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	b2da      	uxtb	r2, r3
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	085b      	lsrs	r3, r3, #1
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1U;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* Byte 0 */
  tmp = (uint8_t)((hsd->CID[0U] & 0xFF000000U) >> 24U);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	0e1b      	lsrs	r3, r3, #24
 80031cc:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ManufacturerID = tmp;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Byte 1 */
  tmp = (uint8_t)((hsd->CID[0U] & 0x00FF0000U) >> 16U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	0c1b      	lsrs	r3, r3, #16
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8U;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  
  /* Byte 2 */
  tmp = (uint8_t)((hsd->CID[0U] & 0x0000FF00U) >> 8U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	0a1b      	lsrs	r3, r3, #8
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	b29b      	uxth	r3, r3
 8003202:	4313      	orrs	r3, r2
 8003204:	b29a      	uxth	r2, r3
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	85da      	strh	r2, [r3, #46]	; 0x2e
  
  /* Byte 3 */
  tmp = (uint8_t)(hsd->CID[0U] & 0x000000FFU);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	b2db      	uxtb	r3, r3
 8003210:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 = tmp << 24U;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	061a      	lsls	r2, r3, #24
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 4 */
  tmp = (uint8_t)((hsd->CID[1U] & 0xFF000000U) >> 24U);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321e:	0e1b      	lsrs	r3, r3, #24
 8003220:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 |= tmp << 16U;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	431a      	orrs	r2, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 5 */
  tmp = (uint8_t)((hsd->CID[1U] & 0x00FF0000U) >> 16U);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	b2db      	uxtb	r3, r3
 8003238:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 |= tmp << 8U;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	431a      	orrs	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 6 */
  tmp = (uint8_t)((hsd->CID[1U] & 0x0000FF00U) >> 8U);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	b2db      	uxtb	r3, r3
 8003250:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	431a      	orrs	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 7 */
  tmp = (uint8_t)(hsd->CID[1U] & 0x000000FFU);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003262:	b2db      	uxtb	r3, r3
 8003264:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName2 = tmp;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Byte 8 */
  tmp = (uint8_t)((hsd->CID[2U] & 0xFF000000U) >> 24U);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	0e1b      	lsrs	r3, r3, #24
 8003276:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdRev = tmp;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Byte 9 */
  tmp = (uint8_t)((hsd->CID[2U] & 0x00FF0000U) >> 16U);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	0c1b      	lsrs	r3, r3, #16
 8003288:	b2db      	uxtb	r3, r3
 800328a:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN = tmp << 24U;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	061a      	lsls	r2, r3, #24
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 10 */
  tmp = (uint8_t)((hsd->CID[2U] & 0x0000FF00U) >> 8U);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	b2db      	uxtb	r3, r3
 800329c:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN |= tmp << 16U;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	041b      	lsls	r3, r3, #16
 80032a6:	431a      	orrs	r2, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CID[2U] & 0x000000FFU);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN |= tmp << 8U;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	431a      	orrs	r2, r3
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CID[3U] & 0xFF000000U) >> 24U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	0e1b      	lsrs	r3, r3, #24
 80032c8:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN |= tmp;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	431a      	orrs	r2, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CID[3U] & 0x00FF0000U) >> 16U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	0c1b      	lsrs	r3, r3, #16
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0U) >> 4U;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	4313      	orrs	r3, r2
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0FU) << 8U;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	b29b      	uxth	r3, r3
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	b29b      	uxth	r3, r3
 8003306:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800330a:	b29a      	uxth	r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CID[3U] & 0x0000FF00U) >> 8U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	b2db      	uxtb	r3, r3
 8003318:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ManufactDate |= tmp;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331e:	b29a      	uxth	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	b29b      	uxth	r3, r3
 8003324:	4313      	orrs	r3, r2
 8003326:	b29a      	uxth	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CID[3U] & 0x000000FFU);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003330:	b2db      	uxtb	r3, r3
 8003332:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFEU) >> 1U;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	085b      	lsrs	r3, r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800333e:	b2da      	uxtb	r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1U;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  
  return errorstate;
 800334e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	bcb0      	pop	{r4, r5, r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop

0800335c <HAL_SD_WideBusOperation_Config>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WideBusOperation_Config(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800335c:	b5b0      	push	{r4, r5, r7, lr}
 800335e:	b08e      	sub	sp, #56	; 0x38
 8003360:	af04      	add	r7, sp, #16
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  SDIO_InitTypeDef tmpinit;
  
  /* MMC Card does not support this feature */
  if (hsd->CardType == MULTIMEDIA_CARD)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d105      	bne.n	8003380 <HAL_SD_WideBusOperation_Config+0x24>
  {
    errorstate = SD_UNSUPPORTED_FEATURE;
 8003374:	2327      	movs	r3, #39	; 0x27
 8003376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 800337a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800337e:	e051      	b.n	8003424 <HAL_SD_WideBusOperation_Config+0xc8>
  }
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d007      	beq.n	8003398 <HAL_SD_WideBusOperation_Config+0x3c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d003      	beq.n	8003398 <HAL_SD_WideBusOperation_Config+0x3c>
    (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
  {
    errorstate = SD_UNSUPPORTED_FEATURE;
    
    return errorstate;
  }
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8003394:	2b02      	cmp	r3, #2
 8003396:	d143      	bne.n	8003420 <HAL_SD_WideBusOperation_Config+0xc4>
    (hsd->CardType == HIGH_CAPACITY_SD_CARD))
  {
    if (WideMode == SDIO_BUS_WIDE_8B)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339e:	d103      	bne.n	80033a8 <HAL_SD_WideBusOperation_Config+0x4c>
    {
      errorstate = SD_UNSUPPORTED_FEATURE;
 80033a0:	2327      	movs	r3, #39	; 0x27
 80033a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033a6:	e017      	b.n	80033d8 <HAL_SD_WideBusOperation_Config+0x7c>
    }
    else if (WideMode == SDIO_BUS_WIDE_4B)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ae:	d106      	bne.n	80033be <HAL_SD_WideBusOperation_Config+0x62>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fcd9 	bl	8003d68 <SD_WideBus_Enable>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033bc:	e00c      	b.n	80033d8 <HAL_SD_WideBusOperation_Config+0x7c>
    }
    else if (WideMode == SDIO_BUS_WIDE_1B)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d106      	bne.n	80033d2 <HAL_SD_WideBusOperation_Config+0x76>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fd47 	bl	8003e58 <SD_WideBus_Disable>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033d0:	e002      	b.n	80033d8 <HAL_SD_WideBusOperation_Config+0x7c>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = SD_INVALID_PARAMETER;
 80033d2:	2326      	movs	r3, #38	; 0x26
 80033d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
      
    if (errorstate == SD_OK)
 80033d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d11f      	bne.n	8003420 <HAL_SD_WideBusOperation_Config+0xc4>
    {
      /* Configure the SDIO peripheral */
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	60fb      	str	r3, [r7, #12]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	613b      	str	r3, [r7, #16]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	617b      	str	r3, [r7, #20]
      tmpinit.BusWide             = WideMode;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	61bb      	str	r3, [r7, #24]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	61fb      	str	r3, [r7, #28]
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	623b      	str	r3, [r7, #32]
      SDIO_Init(hsd->Instance, tmpinit);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681d      	ldr	r5, [r3, #0]
 8003406:	466c      	mov	r4, sp
 8003408:	f107 0318 	add.w	r3, r7, #24
 800340c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003410:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800341a:	4628      	mov	r0, r5
 800341c:	f001 fada 	bl	80049d4 <SDIO_Init>
    }
  }
  
  return errorstate;
 8003420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003424:	4618      	mov	r0, r3
 8003426:	3728      	adds	r7, #40	; 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	bdb0      	pop	{r4, r5, r7, pc}

0800342c <HAL_SD_StopTransfer>:
  * @brief  Aborts an ongoing data transfer.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_StopTransfer(SD_HandleTypeDef *hsd)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	77fb      	strb	r3, [r7, #31]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdio_cmdinitstructure.Argument         = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 800343c:	230c      	movs	r3, #12
 800343e:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8003440:	2340      	movs	r3, #64	; 0x40
 8003442:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8003448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800344c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f107 0208 	add.w	r2, r7, #8
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f001 fb71 	bl	8004b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 800345e:	210c      	movs	r1, #12
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fadd 	bl	8003a20 <SD_CmdResp1Error>
 8003466:	4603      	mov	r3, r0
 8003468:	77fb      	strb	r3, [r7, #31]
  
  return errorstate;
 800346a:	7ffb      	ldrb	r3, [r7, #31]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3720      	adds	r7, #32
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_SD_GetStatus>:
  * @brief  Gets the current sd card data status.
  * @param  hsd: SD handle
  * @retval Data Transfer state
  */
HAL_SD_TransferStateTypedef HAL_SD_GetStatus(SD_HandleTypeDef *hsd)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypedef cardstate =  SD_CARD_TRANSFER;
 800347c:	2304      	movs	r3, #4
 800347e:	73fb      	strb	r3, [r7, #15]

  /* Get SD card state */
  cardstate = SD_GetState(hsd);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f811 	bl	80034a8 <SD_GetState>
 8003486:	4603      	mov	r3, r0
 8003488:	73fb      	strb	r3, [r7, #15]
  
  /* Find SD status according to card state*/
  if (cardstate == SD_CARD_TRANSFER)
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d101      	bne.n	8003494 <HAL_SD_GetStatus+0x20>
  {
    return SD_TRANSFER_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	e005      	b.n	80034a0 <HAL_SD_GetStatus+0x2c>
  }
  else if(cardstate == SD_CARD_ERROR)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2bff      	cmp	r3, #255	; 0xff
 8003498:	d101      	bne.n	800349e <HAL_SD_GetStatus+0x2a>
  {
    return SD_TRANSFER_ERROR;
 800349a:	2302      	movs	r3, #2
 800349c:	e000      	b.n	80034a0 <HAL_SD_GetStatus+0x2c>
  }
  else
  {
    return SD_TRANSFER_BUSY;
 800349e:	2301      	movs	r3, #1
  }
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <SD_GetState>:
  * @brief  Returns the SD current state.
  * @param  hsd: SD handle
  * @retval SD card current state
  */
static HAL_SD_CardStateTypedef SD_GetState(SD_HandleTypeDef *hsd)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t resp1 = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
  
  if (SD_SendStatus(hsd, &resp1) != SD_OK)
 80034b4:	f107 030c 	add.w	r3, r7, #12
 80034b8:	4619      	mov	r1, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f9e2 	bl	8003884 <SD_SendStatus>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <SD_GetState+0x22>
  {
    return SD_CARD_ERROR;
 80034c6:	23ff      	movs	r3, #255	; 0xff
 80034c8:	e005      	b.n	80034d6 <SD_GetState+0x2e>
  }
  else
  {
    return (HAL_SD_CardStateTypedef)((resp1 >> 9U) & 0x0FU);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	0a5b      	lsrs	r3, r3, #9
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	b2db      	uxtb	r3, r3
  }
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop

080034e0 <SD_Initialize_Cards>:
  *         into standby state.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_Initialize_Cards(SD_HandleTypeDef *hsd)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t sd_rca = 1U;
 80034ee:	2301      	movs	r3, #1
 80034f0:	81fb      	strh	r3, [r7, #14]
  
  if(SDIO_GetPowerState(hsd->Instance) == 0U) /* Power off */
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f001 fb14 	bl	8004b24 <SDIO_GetPowerState>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d105      	bne.n	800350e <SD_Initialize_Cards+0x2e>
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
 8003502:	2325      	movs	r3, #37	; 0x25
 8003504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8003508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800350c:	e0a7      	b.n	800365e <SD_Initialize_Cards+0x17e>
  }
  
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	2b04      	cmp	r3, #4
 8003514:	d037      	beq.n	8003586 <SD_Initialize_Cards+0xa6>
  {
    /* Send CMD2 ALL_SEND_CID */
    sdio_cmdinitstructure.Argument         = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 800351a:	2302      	movs	r3, #2
 800351c:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 800351e:	23c0      	movs	r3, #192	; 0xc0
 8003520:	61bb      	str	r3, [r7, #24]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8003526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800352a:	623b      	str	r3, [r7, #32]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f107 0210 	add.w	r2, r7, #16
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f001 fb02 	bl	8004b40 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb6f 	bl	8003c20 <SD_CmdResp2Error>
 8003542:	4603      	mov	r3, r0
 8003544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8003548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <SD_Initialize_Cards+0x76>
    {
      return errorstate;
 8003550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003554:	e083      	b.n	800365e <SD_Initialize_Cards+0x17e>
    }
    
    /* Get Card identification number data */
    hsd->CID[0U] = SDIO_GetResponse(SDIO_RESP1);
 8003556:	2000      	movs	r0, #0
 8003558:	f001 fb66 	bl	8004c28 <SDIO_GetResponse>
 800355c:	4602      	mov	r2, r0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->CID[1U] = SDIO_GetResponse(SDIO_RESP2);
 8003562:	2004      	movs	r0, #4
 8003564:	f001 fb60 	bl	8004c28 <SDIO_GetResponse>
 8003568:	4602      	mov	r2, r0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->CID[2U] = SDIO_GetResponse(SDIO_RESP3);
 800356e:	2008      	movs	r0, #8
 8003570:	f001 fb5a 	bl	8004c28 <SDIO_GetResponse>
 8003574:	4602      	mov	r2, r0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	641a      	str	r2, [r3, #64]	; 0x40
    hsd->CID[3U] = SDIO_GetResponse(SDIO_RESP4);
 800357a:	200c      	movs	r0, #12
 800357c:	f001 fb54 	bl	8004c28 <SDIO_GetResponse>
 8003580:	4602      	mov	r2, r0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <SD_Initialize_Cards+0xc6>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d007      	beq.n	80035a6 <SD_Initialize_Cards+0xc6>
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
    hsd->CID[1U] = SDIO_GetResponse(SDIO_RESP2);
    hsd->CID[2U] = SDIO_GetResponse(SDIO_RESP3);
    hsd->CID[3U] = SDIO_GetResponse(SDIO_RESP4);
  }
  
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 800359a:	2b06      	cmp	r3, #6
 800359c:	d003      	beq.n	80035a6 <SD_Initialize_Cards+0xc6>
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d11c      	bne.n	80035e0 <SD_Initialize_Cards+0x100>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 80035a6:	2303      	movs	r3, #3
 80035a8:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80035aa:	2340      	movs	r3, #64	; 0x40
 80035ac:	61bb      	str	r3, [r7, #24]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f107 0210 	add.w	r2, r7, #16
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 fac1 	bl	8004b40 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp6Error(hsd, SD_CMD_SET_REL_ADDR, &sd_rca);
 80035be:	f107 030e 	add.w	r3, r7, #14
 80035c2:	461a      	mov	r2, r3
 80035c4:	2103      	movs	r1, #3
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fb62 	bl	8003c90 <SD_CmdResp6Error>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 80035d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <SD_Initialize_Cards+0x100>
    {
      return errorstate;
 80035da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035de:	e03e      	b.n	800365e <SD_Initialize_Cards+0x17e>
    }
  }
  
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d038      	beq.n	800365a <SD_Initialize_Cards+0x17a>
  {
    /* Get the SD card RCA */
    hsd->RCA = sd_rca;
 80035e8:	89fb      	ldrh	r3, [r7, #14]
 80035ea:	461a      	mov	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	041b      	lsls	r3, r3, #16
 80035f6:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 80035f8:	2309      	movs	r3, #9
 80035fa:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 80035fc:	23c0      	movs	r3, #192	; 0xc0
 80035fe:	61bb      	str	r3, [r7, #24]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f107 0210 	add.w	r2, r7, #16
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f001 fa98 	bl	8004b40 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fb05 	bl	8003c20 <SD_CmdResp2Error>
 8003616:	4603      	mov	r3, r0
 8003618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 800361c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <SD_Initialize_Cards+0x14a>
    {
      return errorstate;
 8003624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003628:	e019      	b.n	800365e <SD_Initialize_Cards+0x17e>
    }
    
    /* Get Card Specific Data */
    hsd->CSD[0U] = SDIO_GetResponse(SDIO_RESP1);
 800362a:	2000      	movs	r0, #0
 800362c:	f001 fafc 	bl	8004c28 <SDIO_GetResponse>
 8003630:	4602      	mov	r2, r0
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->CSD[1U] = SDIO_GetResponse(SDIO_RESP2);
 8003636:	2004      	movs	r0, #4
 8003638:	f001 faf6 	bl	8004c28 <SDIO_GetResponse>
 800363c:	4602      	mov	r2, r0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->CSD[2U] = SDIO_GetResponse(SDIO_RESP3);
 8003642:	2008      	movs	r0, #8
 8003644:	f001 faf0 	bl	8004c28 <SDIO_GetResponse>
 8003648:	4602      	mov	r2, r0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
    hsd->CSD[3U] = SDIO_GetResponse(SDIO_RESP4);
 800364e:	200c      	movs	r0, #12
 8003650:	f001 faea 	bl	8004c28 <SDIO_GetResponse>
 8003654:	4602      	mov	r2, r0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	635a      	str	r2, [r3, #52]	; 0x34
  }
  
  /* All cards are initialized */
  return errorstate;
 800365a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800365e:	4618      	mov	r0, r3
 8003660:	3728      	adds	r7, #40	; 0x28
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop

08003668 <SD_Select_Deselect>:
  * @param  hsd: SD handle
  * @param  addr: Address of the card to be selected  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_Select_Deselect(SD_HandleTypeDef *hsd, uint64_t addr)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08a      	sub	sp, #40	; 0x28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 800367e:	2307      	movs	r3, #7
 8003680:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8003682:	2340      	movs	r3, #64	; 0x40
 8003684:	61bb      	str	r3, [r7, #24]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800368a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800368e:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f107 0210 	add.w	r2, r7, #16
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f001 fa50 	bl	8004b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 80036a0:	2107      	movs	r1, #7
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f9bc 	bl	8003a20 <SD_CmdResp1Error>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  return errorstate;
 80036ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3728      	adds	r7, #40	; 0x28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop

080036bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_PowerON(SD_HandleTypeDef *hsd)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08c      	sub	sp, #48	; 0x30
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 80036c4:	2300      	movs	r3, #0
 80036c6:	72fb      	strb	r3, [r7, #11]
  uint32_t response = 0U, count = 0U, validvoltage = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d0:	2300      	movs	r3, #0
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sdtype = SD_STD_CAPACITY;
 80036d4:	2300      	movs	r3, #0
 80036d6:	623b      	str	r3, [r7, #32]
  
  /* Power ON Sequence -------------------------------------------------------*/
  /* Disable SDIO Clock */
  __HAL_SD_SDIO_DISABLE(); 
 80036d8:	4b69      	ldr	r3, [pc, #420]	; (8003880 <SD_PowerON+0x1c4>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 fa10 	bl	8004b08 <SDIO_PowerState_ON>
  
  /* 1ms: required power up waiting time before starting the SD initialization 
     sequence */
  HAL_Delay(1);
 80036e8:	2001      	movs	r0, #1
 80036ea:	f7fd fd6f 	bl	80011cc <HAL_Delay>
  
  /* Enable SDIO Clock */
  __HAL_SD_SDIO_ENABLE();
 80036ee:	4b64      	ldr	r3, [pc, #400]	; (8003880 <SD_PowerON+0x1c4>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
  
  /* CMD0: GO_IDLE_STATE -----------------------------------------------------*/
  /* No CMD response required */
  sdio_cmdinitstructure.Argument         = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_NO;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8003704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003708:	61fb      	str	r3, [r7, #28]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f107 020c 	add.w	r2, r7, #12
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f001 fa13 	bl	8004b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdError(hsd);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8ec 	bl	80038f8 <SD_CmdError>
 8003720:	4603      	mov	r3, r0
 8003722:	72fb      	strb	r3, [r7, #11]
  
  if(errorstate != SD_OK)
 8003724:	7afb      	ldrb	r3, [r7, #11]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <SD_PowerON+0x76>
  {
    /* CMD Response Timeout (wait for CMDSENT flag) */
    return errorstate;
 800372c:	7afb      	ldrb	r3, [r7, #11]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	e0a2      	b.n	8003878 <SD_PowerON+0x1bc>
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdio_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 8003732:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003736:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_SDIO_SEND_IF_COND;
 8003738:	2308      	movs	r3, #8
 800373a:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800373c:	2340      	movs	r3, #64	; 0x40
 800373e:	617b      	str	r3, [r7, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f107 020c 	add.w	r2, r7, #12
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f001 f9f8 	bl	8004b40 <SDIO_SendCommand>
  
  /* Check for error conditions */ 
  errorstate = SD_CmdResp7Error(hsd);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f90d 	bl	8003970 <SD_CmdResp7Error>
 8003756:	4603      	mov	r3, r0
 8003758:	72fb      	strb	r3, [r7, #11]
  
  if (errorstate == SD_OK)
 800375a:	7afb      	ldrb	r3, [r7, #11]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d105      	bne.n	800376e <SD_PowerON+0xb2>
  {
    /* SD Card 2.0 */
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	621a      	str	r2, [r3, #32]
    sdtype        = SD_HIGH_CAPACITY;
 8003768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800376c:	623b      	str	r3, [r7, #32]
  }
  
  /* Send CMD55 */
  sdio_cmdinitstructure.Argument         = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8003772:	2337      	movs	r3, #55	; 0x37
 8003774:	613b      	str	r3, [r7, #16]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f107 020c 	add.w	r2, r7, #12
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f001 f9dd 	bl	8004b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8003786:	2137      	movs	r1, #55	; 0x37
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f949 	bl	8003a20 <SD_CmdResp1Error>
 800378e:	4603      	mov	r3, r0
 8003790:	72fb      	strb	r3, [r7, #11]
  
  /* If errorstate is Command Timeout, it is a MMC card */
  /* If errorstate is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  if(errorstate == SD_OK)
 8003792:	7afb      	ldrb	r3, [r7, #11]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d16c      	bne.n	8003874 <SD_PowerON+0x1b8>
  {
    /* SD CARD */
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 800379a:	e051      	b.n	8003840 <SD_PowerON+0x184>
    {
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      sdio_cmdinitstructure.Argument         = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80037a0:	2337      	movs	r3, #55	; 0x37
 80037a2:	613b      	str	r3, [r7, #16]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80037a4:	2340      	movs	r3, #64	; 0x40
 80037a6:	617b      	str	r3, [r7, #20]
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61bb      	str	r3, [r7, #24]
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80037ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037b0:	61fb      	str	r3, [r7, #28]
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f107 020c 	add.w	r2, r7, #12
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 f9bf 	bl	8004b40 <SDIO_SendCommand>
      
      /* Check for error conditions */
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80037c2:	2137      	movs	r1, #55	; 0x37
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f92b 	bl	8003a20 <SD_CmdResp1Error>
 80037ca:	4603      	mov	r3, r0
 80037cc:	72fb      	strb	r3, [r7, #11]
      
      if(errorstate != SD_OK)
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <SD_PowerON+0x120>
      {
        return errorstate;
 80037d6:	7afb      	ldrb	r3, [r7, #11]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e04d      	b.n	8003878 <SD_PowerON+0x1bc>
      }
      
      /* Send CMD41 */
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037e6:	60fb      	str	r3, [r7, #12]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 80037e8:	2329      	movs	r3, #41	; 0x29
 80037ea:	613b      	str	r3, [r7, #16]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80037ec:	2340      	movs	r3, #64	; 0x40
 80037ee:	617b      	str	r3, [r7, #20]
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80037f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037f8:	61fb      	str	r3, [r7, #28]
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f107 020c 	add.w	r2, r7, #12
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f001 f99b 	bl	8004b40 <SDIO_SendCommand>
      
      /* Check for error conditions */
      errorstate = SD_CmdResp3Error(hsd);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f9de 	bl	8003bcc <SD_CmdResp3Error>
 8003810:	4603      	mov	r3, r0
 8003812:	72fb      	strb	r3, [r7, #11]
      
      if(errorstate != SD_OK)
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <SD_PowerON+0x166>
      {
        return errorstate;
 800381c:	7afb      	ldrb	r3, [r7, #11]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	e02a      	b.n	8003878 <SD_PowerON+0x1bc>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(SDIO_RESP1);
 8003822:	2000      	movs	r0, #0
 8003824:	f001 fa00 	bl	8004c28 <SDIO_GetResponse>
 8003828:	62f8      	str	r0, [r7, #44]	; 0x2c
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	0fdb      	lsrs	r3, r3, #31
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <SD_PowerON+0x17a>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <SD_PowerON+0x17c>
 8003836:	2300      	movs	r3, #0
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
      
      count++;
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	3301      	adds	r3, #1
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
     or SD card 1.x */
  if(errorstate == SD_OK)
  {
    /* SD CARD */
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	2b00      	cmp	r3, #0
 8003844:	d104      	bne.n	8003850 <SD_PowerON+0x194>
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800384c:	4293      	cmp	r3, r2
 800384e:	d9a5      	bls.n	800379c <SD_PowerON+0xe0>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
      
      count++;
    }
    
    if(count >= SD_MAX_VOLT_TRIAL)
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003856:	4293      	cmp	r3, r2
 8003858:	d904      	bls.n	8003864 <SD_PowerON+0x1a8>
    {
      errorstate = SD_INVALID_VOLTRANGE;
 800385a:	231b      	movs	r3, #27
 800385c:	72fb      	strb	r3, [r7, #11]
      
      return errorstate;
 800385e:	7afb      	ldrb	r3, [r7, #11]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e009      	b.n	8003878 <SD_PowerON+0x1bc>
    }
    
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <SD_PowerON+0x1b8>
    {
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	621a      	str	r2, [r3, #32]
    }
    
  } /* else MMC Card */
  
  return errorstate;
 8003874:	7afb      	ldrb	r3, [r7, #11]
 8003876:	b2db      	uxtb	r3, r3
}
 8003878:	4618      	mov	r0, r3
 800387a:	3730      	adds	r7, #48	; 0x30
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	422580a0 	.word	0x422580a0

08003884 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	77fb      	strb	r3, [r7, #31]
  
  if(pCardStatus == NULL)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d103      	bne.n	80038a0 <SD_SendStatus+0x1c>
  {
    errorstate = SD_INVALID_PARAMETER;
 8003898:	2326      	movs	r3, #38	; 0x26
 800389a:	77fb      	strb	r3, [r7, #31]
    
    return errorstate;
 800389c:	7ffb      	ldrb	r3, [r7, #31]
 800389e:	e026      	b.n	80038ee <SD_SendStatus+0x6a>
  }
  
  /* Send Status command */
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	60bb      	str	r3, [r7, #8]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 80038a8:	230d      	movs	r3, #13
 80038aa:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80038ac:	2340      	movs	r3, #64	; 0x40
 80038ae:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80038b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038b8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f107 0208 	add.w	r2, r7, #8
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 f93b 	bl	8004b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 80038ca:	210d      	movs	r1, #13
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f8a7 	bl	8003a20 <SD_CmdResp1Error>
 80038d2:	4603      	mov	r3, r0
 80038d4:	77fb      	strb	r3, [r7, #31]
  
  if(errorstate != SD_OK)
 80038d6:	7ffb      	ldrb	r3, [r7, #31]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <SD_SendStatus+0x5c>
  {
    return errorstate;
 80038dc:	7ffb      	ldrb	r3, [r7, #31]
 80038de:	e006      	b.n	80038ee <SD_SendStatus+0x6a>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(SDIO_RESP1);
 80038e0:	2000      	movs	r0, #0
 80038e2:	f001 f9a1 	bl	8004c28 <SDIO_GetResponse>
 80038e6:	4602      	mov	r2, r0
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	601a      	str	r2, [r3, #0]
  
  return errorstate;
 80038ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop

080038f8 <SD_CmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdError(SD_HandleTypeDef *hsd)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout, tmp;
  
  timeout = SDIO_CMD0TIMEOUT;
 8003904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003908:	617b      	str	r3, [r7, #20]
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf14      	ite	ne
 8003918:	2301      	movne	r3, #1
 800391a:	2300      	moveq	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	613b      	str	r3, [r7, #16]
    
  while((timeout > 0U) && (!tmp))
 8003920:	e00d      	b.n	800393e <SD_CmdError+0x46>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	613b      	str	r3, [r7, #16]
    timeout--;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	3b01      	subs	r3, #1
 800393c:	617b      	str	r3, [r7, #20]
  
  timeout = SDIO_CMD0TIMEOUT;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
    
  while((timeout > 0U) && (!tmp))
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <SD_CmdError+0x52>
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0eb      	beq.n	8003922 <SD_CmdError+0x2a>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
    timeout--;
  }
  
  if(timeout == 0U)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d103      	bne.n	8003958 <SD_CmdError+0x60>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	73fb      	strb	r3, [r7, #15]
    return errorstate;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	e005      	b.n	8003964 <SD_CmdError+0x6c>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003960:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 8003962:	7bfb      	ldrb	r3, [r7, #15]
}
 8003964:	4618      	mov	r0, r3
 8003966:	371c      	adds	r7, #28
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <SD_CmdResp7Error>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp7Error(SD_HandleTypeDef *hsd)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_ERROR;
 8003978:	2329      	movs	r3, #41	; 0x29
 800397a:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = SDIO_CMD0TIMEOUT, tmp;
 800397c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003980:	617b      	str	r3, [r7, #20]
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT); 
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003988:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	613b      	str	r3, [r7, #16]
  
  while((!tmp) && (timeout > 0U))
 8003998:	e00d      	b.n	80039b6 <SD_CmdResp7Error+0x46>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf14      	ite	ne
 80039a8:	2301      	movne	r3, #1
 80039aa:	2300      	moveq	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	613b      	str	r3, [r7, #16]
    timeout--;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	617b      	str	r3, [r7, #20]
  HAL_SD_ErrorTypedef errorstate = SD_ERROR;
  uint32_t timeout = SDIO_CMD0TIMEOUT, tmp;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT); 
  
  while((!tmp) && (timeout > 0U))
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <SD_CmdResp7Error+0x52>
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1eb      	bne.n	800399a <SD_CmdResp7Error+0x2a>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT);
    timeout--;
  }
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT); 
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	613b      	str	r3, [r7, #16]
  
  if((timeout == 0U) || tmp)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <SD_CmdResp7Error+0x74>
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <SD_CmdResp7Error+0x84>
  {
    /* Card is not V2.0 compliant or card does not support the set voltage range */
    errorstate = SD_CMD_RSP_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2204      	movs	r2, #4
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	e00f      	b.n	8003a14 <SD_CmdResp7Error+0xa4>
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDREND))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <SD_CmdResp7Error+0xa2>
  {
    /* Card is SD V2.0 compliant */
    errorstate = SD_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CMDREND);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2240      	movs	r2, #64	; 0x40
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	e000      	b.n	8003a14 <SD_CmdResp7Error+0xa4>
  }
  
  return errorstate;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <SD_CmdResp1Error>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp1Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	70fb      	strb	r3, [r7, #3]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t response_r1;
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8003a30:	bf00      	nop
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a38:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f8      	beq.n	8003a32 <SD_CmdResp1Error+0x12>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d007      	beq.n	8003a5e <SD_CmdResp1Error+0x3e>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2204      	movs	r2, #4
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	e0b0      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <SD_CmdResp1Error+0x5c>
  {
    errorstate = SD_CMD_CRC_FAIL;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2201      	movs	r2, #1
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	e0a1      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 f8c3 	bl	8004c0c <SDIO_GetCommandResponse>
 8003a86:	4603      	mov	r3, r0
 8003a88:	461a      	mov	r2, r3
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <SD_CmdResp1Error+0x78>
  {
    errorstate = SD_ILLEGAL_CMD;
 8003a90:	2310      	movs	r3, #16
 8003a92:	73fb      	strb	r3, [r7, #15]
    
    return errorstate;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	e093      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f001 f8c0 	bl	8004c28 <SDIO_GetResponse>
 8003aa8:	60b8      	str	r0, [r7, #8]
  
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	4b46      	ldr	r3, [pc, #280]	; (8003bc8 <SD_CmdResp1Error+0x1a8>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <SD_CmdResp1Error+0x98>
  {
    return errorstate;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	e083      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	da01      	bge.n	8003ac2 <SD_CmdResp1Error+0xa2>
  {
    return(SD_ADDR_OUT_OF_RANGE);
 8003abe:	231c      	movs	r3, #28
 8003ac0:	e07e      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <SD_CmdResp1Error+0xb0>
  {
    return(SD_ADDR_MISALIGNED);
 8003acc:	2309      	movs	r3, #9
 8003ace:	e077      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <SD_CmdResp1Error+0xbe>
  {
    return(SD_BLOCK_LEN_ERR);
 8003ada:	230a      	movs	r3, #10
 8003adc:	e070      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <SD_CmdResp1Error+0xcc>
  {
    return(SD_ERASE_SEQ_ERR);
 8003ae8:	230b      	movs	r3, #11
 8003aea:	e069      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <SD_CmdResp1Error+0xda>
  {
    return(SD_BAD_ERASE_PARAM);
 8003af6:	230c      	movs	r3, #12
 8003af8:	e062      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <SD_CmdResp1Error+0xe8>
  {
    return(SD_WRITE_PROT_VIOLATION);
 8003b04:	230d      	movs	r3, #13
 8003b06:	e05b      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <SD_CmdResp1Error+0xf6>
  {
    return(SD_LOCK_UNLOCK_FAILED);
 8003b12:	230e      	movs	r3, #14
 8003b14:	e054      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <SD_CmdResp1Error+0x104>
  {
    return(SD_COM_CRC_FAILED);
 8003b20:	230f      	movs	r3, #15
 8003b22:	e04d      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <SD_CmdResp1Error+0x112>
  {
    return(SD_ILLEGAL_CMD);
 8003b2e:	2310      	movs	r3, #16
 8003b30:	e046      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <SD_CmdResp1Error+0x120>
  {
    return(SD_CARD_ECC_FAILED);
 8003b3c:	2311      	movs	r3, #17
 8003b3e:	e03f      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <SD_CmdResp1Error+0x12e>
  {
    return(SD_CC_ERROR);
 8003b4a:	2312      	movs	r3, #18
 8003b4c:	e038      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <SD_CmdResp1Error+0x13c>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 8003b58:	2313      	movs	r3, #19
 8003b5a:	e031      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <SD_CmdResp1Error+0x14a>
  {
    return(SD_STREAM_READ_UNDERRUN);
 8003b66:	2314      	movs	r3, #20
 8003b68:	e02a      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <SD_CmdResp1Error+0x158>
  {
    return(SD_STREAM_WRITE_OVERRUN);
 8003b74:	2315      	movs	r3, #21
 8003b76:	e023      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <SD_CmdResp1Error+0x166>
  {
    return(SD_CID_CSD_OVERWRITE);
 8003b82:	2316      	movs	r3, #22
 8003b84:	e01c      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <SD_CmdResp1Error+0x174>
  {
    return(SD_WP_ERASE_SKIP);
 8003b90:	2317      	movs	r3, #23
 8003b92:	e015      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <SD_CmdResp1Error+0x182>
  {
    return(SD_CARD_ECC_DISABLED);
 8003b9e:	2318      	movs	r3, #24
 8003ba0:	e00e      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <SD_CmdResp1Error+0x190>
  {
    return(SD_ERASE_RESET);
 8003bac:	2319      	movs	r3, #25
 8003bae:	e007      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <SD_CmdResp1Error+0x19e>
  {
    return(SD_AKE_SEQ_ERROR);
 8003bba:	231a      	movs	r3, #26
 8003bbc:	e000      	b.n	8003bc0 <SD_CmdResp1Error+0x1a0>
  }
  
  return errorstate;
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	fdffe008 	.word	0xfdffe008

08003bcc <SD_CmdResp3Error>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp3Error(SD_HandleTypeDef *hsd)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]
  
  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8003bd8:	bf00      	nop
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f8      	beq.n	8003bda <SD_CmdResp3Error+0xe>
  {
  }
  
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <SD_CmdResp3Error+0x3a>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	e005      	b.n	8003c12 <SD_CmdResp3Error+0x46>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop

08003c20 <SD_CmdResp2Error>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]
  
  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8003c2c:	bf00      	nop
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c34:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f8      	beq.n	8003c2e <SD_CmdResp2Error+0xe>
  {
  }
    
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <SD_CmdResp2Error+0x3a>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2204      	movs	r2, #4
 8003c54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	e014      	b.n	8003c84 <SD_CmdResp2Error+0x64>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <SD_CmdResp2Error+0x58>
  {
    errorstate = SD_CMD_CRC_FAIL;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2201      	movs	r2, #1
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	e005      	b.n	8003c84 <SD_CmdResp2Error+0x64>
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c80:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <SD_CmdResp6Error>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp6Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	72fb      	strb	r3, [r7, #11]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	75fb      	strb	r3, [r7, #23]
  uint32_t response_r1;
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8003ca2:	bf00      	nop
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003caa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f8      	beq.n	8003ca4 <SD_CmdResp6Error+0x14>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <SD_CmdResp6Error+0x40>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	75fb      	strb	r3, [r7, #23]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2204      	movs	r2, #4
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	e047      	b.n	8003d60 <SD_CmdResp6Error+0xd0>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <SD_CmdResp6Error+0x5e>
  {
    errorstate = SD_CMD_CRC_FAIL;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	e038      	b.n	8003d60 <SD_CmdResp6Error+0xd0>
  {
    /* No error flag set */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 ff8a 	bl	8004c0c <SDIO_GetCommandResponse>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	7afb      	ldrb	r3, [r7, #11]
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <SD_CmdResp6Error+0x7a>
  {
    errorstate = SD_ILLEGAL_CMD;
 8003d02:	2310      	movs	r3, #16
 8003d04:	75fb      	strb	r3, [r7, #23]
    
    return errorstate;
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
 8003d08:	e02a      	b.n	8003d60 <SD_CmdResp6Error+0xd0>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8003d14:	2000      	movs	r0, #0
 8003d16:	f000 ff87 	bl	8004c28 <SDIO_GetResponse>
 8003d1a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <SD_CmdResp6Error+0xa4>
  {
    *pRCA = (uint16_t) (response_r1 >> 16U);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	801a      	strh	r2, [r3, #0]
    
    return errorstate;
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	e015      	b.n	8003d60 <SD_CmdResp6Error+0xd0>
  }
  
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <SD_CmdResp6Error+0xb2>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 8003d3e:	2313      	movs	r3, #19
 8003d40:	e00e      	b.n	8003d60 <SD_CmdResp6Error+0xd0>
  }
  
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <SD_CmdResp6Error+0xc0>
  {
    return(SD_ILLEGAL_CMD);
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	e007      	b.n	8003d60 <SD_CmdResp6Error+0xd0>
  }
  
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <SD_CmdResp6Error+0xce>
  {
    return(SD_COM_CRC_FAILED);
 8003d5a:	230f      	movs	r3, #15
 8003d5c:	e000      	b.n	8003d60 <SD_CmdResp6Error+0xd0>
  }
  
  return errorstate;
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	; 0x28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  uint32_t scr[2U] = {0U, 0U};
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f000 ff52 	bl	8004c28 <SDIO_GetResponse>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <SD_WideBus_Enable+0x32>
  {
    errorstate = SD_LOCK_UNLOCK_FAILED;
 8003d8e:	230e      	movs	r3, #14
 8003d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8003d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d98:	e059      	b.n	8003e4e <SD_WideBus_Enable+0xe6>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003d9a:	f107 0308 	add.w	r3, r7, #8
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f8d1 	bl	8003f48 <SD_FindSCR>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if(errorstate != SD_OK)
 8003dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <SD_WideBus_Enable+0x52>
  {
    return errorstate;
 8003db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003db8:	e049      	b.n	8003e4e <SD_WideBus_Enable+0xe6>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d03f      	beq.n	8003e44 <SD_WideBus_Enable+0xdc>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	041b      	lsls	r3, r3, #16
 8003dca:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8003dcc:	2337      	movs	r3, #55	; 0x37
 8003dce:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8003dd0:	2340      	movs	r3, #64	; 0x40
 8003dd2:	61bb      	str	r3, [r7, #24]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61fb      	str	r3, [r7, #28]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8003dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ddc:	623b      	str	r3, [r7, #32]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f107 0210 	add.w	r2, r7, #16
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fea9 	bl	8004b40 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8003dee:	2137      	movs	r1, #55	; 0x37
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff fe15 	bl	8003a20 <SD_CmdResp1Error>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8003dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <SD_WideBus_Enable+0xa2>
    {
      return errorstate;
 8003e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e08:	e021      	b.n	8003e4e <SD_WideBus_Enable+0xe6>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    sdio_cmdinitstructure.Argument         = 2U;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8003e0e:	2306      	movs	r3, #6
 8003e10:	617b      	str	r3, [r7, #20]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f107 0210 	add.w	r2, r7, #16
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fe8f 	bl	8004b40 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8003e22:	2106      	movs	r1, #6
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff fdfb 	bl	8003a20 <SD_CmdResp1Error>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8003e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <SD_WideBus_Enable+0xd6>
    {
      return errorstate;
 8003e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e3c:	e007      	b.n	8003e4e <SD_WideBus_Enable+0xe6>
    }
    
    return errorstate;
 8003e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e42:	e004      	b.n	8003e4e <SD_WideBus_Enable+0xe6>
  }
  else
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
 8003e44:	2325      	movs	r3, #37	; 0x25
 8003e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8003e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  }
}   
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3728      	adds	r7, #40	; 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop

08003e58 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	; 0x28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  uint32_t scr[2U] = {0U, 0U};
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f000 feda 	bl	8004c28 <SDIO_GetResponse>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <SD_WideBus_Disable+0x32>
  {
    errorstate = SD_LOCK_UNLOCK_FAILED;
 8003e7e:	230e      	movs	r3, #14
 8003e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8003e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e88:	e059      	b.n	8003f3e <SD_WideBus_Disable+0xe6>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003e8a:	f107 0308 	add.w	r3, r7, #8
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f859 	bl	8003f48 <SD_FindSCR>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if(errorstate != SD_OK)
 8003e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <SD_WideBus_Disable+0x52>
  {
    return errorstate;
 8003ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ea8:	e049      	b.n	8003f3e <SD_WideBus_Disable+0xe6>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d03f      	beq.n	8003f34 <SD_WideBus_Disable+0xdc>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8003ebc:	2337      	movs	r3, #55	; 0x37
 8003ebe:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8003ec0:	2340      	movs	r3, #64	; 0x40
 8003ec2:	61bb      	str	r3, [r7, #24]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8003ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ecc:	623b      	str	r3, [r7, #32]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f107 0210 	add.w	r2, r7, #16
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fe31 	bl	8004b40 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8003ede:	2137      	movs	r1, #55	; 0x37
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff fd9d 	bl	8003a20 <SD_CmdResp1Error>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8003eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <SD_WideBus_Disable+0xa2>
    {
      return errorstate;
 8003ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ef8:	e021      	b.n	8003f3e <SD_WideBus_Disable+0xe6>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    sdio_cmdinitstructure.Argument         = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8003efe:	2306      	movs	r3, #6
 8003f00:	617b      	str	r3, [r7, #20]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f107 0210 	add.w	r2, r7, #16
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fe17 	bl	8004b40 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8003f12:	2106      	movs	r1, #6
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff fd83 	bl	8003a20 <SD_CmdResp1Error>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8003f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <SD_WideBus_Disable+0xd6>
    {
      return errorstate;
 8003f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f2c:	e007      	b.n	8003f3e <SD_WideBus_Disable+0xe6>
    }
    
    return errorstate;
 8003f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f32:	e004      	b.n	8003f3e <SD_WideBus_Disable+0xe6>
  }
  else
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
 8003f34:	2325      	movs	r3, #37	; 0x25
 8003f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8003f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  }
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3728      	adds	r7, #40	; 0x28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop

08003f48 <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b093      	sub	sp, #76	; 0x4c
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint32_t index = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tempscr[2U] = {0U, 0U};
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)8U;
 8003f64:	2308      	movs	r3, #8
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8003f68:	2310      	movs	r3, #16
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	637b      	str	r3, [r7, #52]	; 0x34
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8003f70:	2300      	movs	r3, #0
 8003f72:	63bb      	str	r3, [r7, #56]	; 0x38
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8003f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fddb 	bl	8004b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8003f8a:	2110      	movs	r1, #16
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff fd47 	bl	8003a20 <SD_CmdResp1Error>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  if(errorstate != SD_OK)
 8003f98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <SD_FindSCR+0x5e>
  {
    return errorstate;
 8003fa0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003fa4:	e0d7      	b.n	8004156 <SD_FindSCR+0x20e>
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8003fae:	2337      	movs	r3, #55	; 0x37
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fdbf 	bl	8004b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8003fc2:	2137      	movs	r1, #55	; 0x37
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff fd2b 	bl	8003a20 <SD_CmdResp1Error>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  if(errorstate != SD_OK)
 8003fd0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <SD_FindSCR+0x96>
  {
    return errorstate;
 8003fd8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003fdc:	e0bb      	b.n	8004156 <SD_FindSCR+0x20e>
  }
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe2:	617b      	str	r3, [r7, #20]
  sdio_datainitstructure.DataLength    = 8U;
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	61bb      	str	r3, [r7, #24]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003fe8:	2330      	movs	r3, #48	; 0x30
 8003fea:	61fb      	str	r3, [r7, #28]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003fec:	2302      	movs	r3, #2
 8003fee:	623b      	str	r3, [r7, #32]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f107 0214 	add.w	r2, r7, #20
 8004000:	4611      	mov	r1, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fe36 	bl	8004c74 <SDIO_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdio_cmdinitstructure.Argument         = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 800400c:	2333      	movs	r3, #51	; 0x33
 800400e:	633b      	str	r3, [r7, #48]	; 0x30
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fd90 	bl	8004b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8004020:	2133      	movs	r1, #51	; 0x33
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fcfc 	bl	8003a20 <SD_CmdResp1Error>
 8004028:	4603      	mov	r3, r0
 800402a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  if(errorstate != SD_OK)
 800402e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004032:	2b00      	cmp	r3, #0
 8004034:	d018      	beq.n	8004068 <SD_FindSCR+0x120>
  {
    return errorstate;
 8004036:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800403a:	e08c      	b.n	8004156 <SD_FindSCR+0x20e>
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
#endif /* SDIO_STA_STBITERR */
  {
    if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00e      	beq.n	8004068 <SD_FindSCR+0x120>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800404a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	f107 020c 	add.w	r2, r7, #12
 8004052:	18d4      	adds	r4, r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fd35 	bl	8004ac8 <SDIO_ReadFIFO>
 800405e:	4603      	mov	r3, r0
 8004060:	6023      	str	r3, [r4, #0]
      index++;
 8004062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004064:	3301      	adds	r3, #1
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
  if(errorstate != SD_OK)
  {
    return errorstate;
  }
#ifdef SDIO_STA_STBITERR  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406e:	f240 632a 	movw	r3, #1578	; 0x62a
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0e1      	beq.n	800403c <SD_FindSCR+0xf4>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
      index++;
    }
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <SD_FindSCR+0x152>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2208      	movs	r2, #8
 800408c:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
 800408e:	2304      	movs	r3, #4
 8004090:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 8004094:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004098:	e05d      	b.n	8004156 <SD_FindSCR+0x20e>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d009      	beq.n	80040bc <SD_FindSCR+0x174>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2202      	movs	r2, #2
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_CRC_FAIL;
 80040b0:	2302      	movs	r3, #2
 80040b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 80040b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80040ba:	e04c      	b.n	8004156 <SD_FindSCR+0x20e>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <SD_FindSCR+0x196>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2220      	movs	r2, #32
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_RX_OVERRUN;
 80040d2:	2306      	movs	r3, #6
 80040d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 80040d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80040dc:	e03b      	b.n	8004156 <SD_FindSCR+0x20e>
  }
#ifdef SDIO_STA_STBITERR
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <SD_FindSCR+0x1ba>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_START_BIT_ERR;
 80040f6:	2307      	movs	r3, #7
 80040f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 80040fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004100:	e029      	b.n	8004156 <SD_FindSCR+0x20e>
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800410a:	639a      	str	r2, [r3, #56]	; 0x38
  
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	3304      	adds	r3, #4
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	0611      	lsls	r1, r2, #24
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	0212      	lsls	r2, r2, #8
 8004118:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800411c:	4311      	orrs	r1, r2
    ((tempscr[0U] & SD_16TO23BITS) >> 8U) | ((tempscr[0U] & SD_24TO31BITS) >> 24U);
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	0a12      	lsrs	r2, r2, #8
 8004122:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
  
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
 8004126:	4311      	orrs	r1, r2
    ((tempscr[0U] & SD_16TO23BITS) >> 8U) | ((tempscr[0U] & SD_24TO31BITS) >> 24U);
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	0e12      	lsrs	r2, r2, #24
 800412c:	430a      	orrs	r2, r1
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
  
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
 800412e:	601a      	str	r2, [r3, #0]
    ((tempscr[0U] & SD_16TO23BITS) >> 8U) | ((tempscr[0U] & SD_24TO31BITS) >> 24U);
  
  *(pSCR) = ((tempscr[1U] & SD_0TO7BITS) << 24U)  | ((tempscr[1U] & SD_8TO15BITS) << 8U) |\
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	061a      	lsls	r2, r3, #24
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800413c:	431a      	orrs	r2, r3
    ((tempscr[1U] & SD_16TO23BITS) >> 8U) | ((tempscr[1U] & SD_24TO31BITS) >> 24U);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	0a1b      	lsrs	r3, r3, #8
 8004142:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
  
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
    ((tempscr[0U] & SD_16TO23BITS) >> 8U) | ((tempscr[0U] & SD_24TO31BITS) >> 24U);
  
  *(pSCR) = ((tempscr[1U] & SD_0TO7BITS) << 24U)  | ((tempscr[1U] & SD_8TO15BITS) << 8U) |\
 8004146:	431a      	orrs	r2, r3
    ((tempscr[1U] & SD_16TO23BITS) >> 8U) | ((tempscr[1U] & SD_24TO31BITS) >> 24U);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	0e1b      	lsrs	r3, r3, #24
 800414c:	431a      	orrs	r2, r3
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
  
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
    ((tempscr[0U] & SD_16TO23BITS) >> 8U) | ((tempscr[0U] & SD_24TO31BITS) >> 24U);
  
  *(pSCR) = ((tempscr[1U] & SD_0TO7BITS) << 24U)  | ((tempscr[1U] & SD_8TO15BITS) << 8U) |\
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	601a      	str	r2, [r3, #0]
    ((tempscr[1U] & SD_16TO23BITS) >> 8U) | ((tempscr[1U] & SD_24TO31BITS) >> 24U);
  
  return errorstate;
 8004152:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
 8004156:	4618      	mov	r0, r3
 8004158:	374c      	adds	r7, #76	; 0x4c
 800415a:	46bd      	mov	sp, r7
 800415c:	bd90      	pop	{r4, r7, pc}
 800415e:	bf00      	nop

08004160 <SD_IsCardProgramming>:
  * @param  hsd: SD handle
  * @param  pStatus: pointer to the variable that will contain the SD card state  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_IsCardProgramming(SD_HandleTypeDef *hsd, uint8_t *pStatus)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  __IO uint32_t responseR1 = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]
  
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 800417c:	230d      	movs	r3, #13
 800417e:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004180:	2340      	movs	r3, #64	; 0x40
 8004182:	61bb      	str	r3, [r7, #24]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004184:	2300      	movs	r3, #0
 8004186:	61fb      	str	r3, [r7, #28]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800418c:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f107 0210 	add.w	r2, r7, #16
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fcd1 	bl	8004b40 <SDIO_SendCommand>
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 800419e:	bf00      	nop
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f8      	beq.n	80041a0 <SD_IsCardProgramming+0x40>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <SD_IsCardProgramming+0x70>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2204      	movs	r2, #4
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 80041ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041ce:	e0bd      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <SD_IsCardProgramming+0x92>
  {
    errorstate = SD_CMD_CRC_FAIL;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2201      	movs	r2, #1
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 80041ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041f0:	e0ac      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  {
    /* No error flag set */
  }
  
  /* Check response received is of desired command */
  if((uint32_t)SDIO_GetCommandResponse(hsd->Instance) != SD_CMD_SEND_STATUS)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fd08 	bl	8004c0c <SDIO_GetCommandResponse>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b0d      	cmp	r3, #13
 8004200:	d005      	beq.n	800420e <SD_IsCardProgramming+0xae>
  {
    errorstate = SD_ILLEGAL_CMD;
 8004202:	2310      	movs	r3, #16
 8004204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8004208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800420c:	e09e      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
  
  
  /* We have received response, retrieve it for analysis */
  responseR1 = SDIO_GetResponse(SDIO_RESP1);
 8004218:	2000      	movs	r0, #0
 800421a:	f000 fd05 	bl	8004c28 <SDIO_GetResponse>
 800421e:	4603      	mov	r3, r0
 8004220:	60fb      	str	r3, [r7, #12]
  
  /* Find out card status */
  *pStatus = (uint8_t)((responseR1 >> 9U) & 0x0000000FU);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	0a5b      	lsrs	r3, r3, #9
 8004226:	b2db      	uxtb	r3, r3
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	b2da      	uxtb	r2, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	701a      	strb	r2, [r3, #0]
  
  if((responseR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4b47      	ldr	r3, [pc, #284]	; (8004354 <SD_IsCardProgramming+0x1f4>)
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <SD_IsCardProgramming+0xe2>
  {
    return errorstate;
 800423c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004240:	e084      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	da01      	bge.n	800424c <SD_IsCardProgramming+0xec>
  {
    return(SD_ADDR_OUT_OF_RANGE);
 8004248:	231c      	movs	r3, #28
 800424a:	e07f      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <SD_IsCardProgramming+0xfa>
  {
    return(SD_ADDR_MISALIGNED);
 8004256:	2309      	movs	r3, #9
 8004258:	e078      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <SD_IsCardProgramming+0x108>
  {
    return(SD_BLOCK_LEN_ERR);
 8004264:	230a      	movs	r3, #10
 8004266:	e071      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <SD_IsCardProgramming+0x116>
  {
    return(SD_ERASE_SEQ_ERR);
 8004272:	230b      	movs	r3, #11
 8004274:	e06a      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <SD_IsCardProgramming+0x124>
  {
    return(SD_BAD_ERASE_PARAM);
 8004280:	230c      	movs	r3, #12
 8004282:	e063      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <SD_IsCardProgramming+0x132>
  {
    return(SD_WRITE_PROT_VIOLATION);
 800428e:	230d      	movs	r3, #13
 8004290:	e05c      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <SD_IsCardProgramming+0x140>
  {
    return(SD_LOCK_UNLOCK_FAILED);
 800429c:	230e      	movs	r3, #14
 800429e:	e055      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <SD_IsCardProgramming+0x14e>
  {
    return(SD_COM_CRC_FAILED);
 80042aa:	230f      	movs	r3, #15
 80042ac:	e04e      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <SD_IsCardProgramming+0x15c>
  {
    return(SD_ILLEGAL_CMD);
 80042b8:	2310      	movs	r3, #16
 80042ba:	e047      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <SD_IsCardProgramming+0x16a>
  {
    return(SD_CARD_ECC_FAILED);
 80042c6:	2311      	movs	r3, #17
 80042c8:	e040      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <SD_IsCardProgramming+0x178>
  {
    return(SD_CC_ERROR);
 80042d4:	2312      	movs	r3, #18
 80042d6:	e039      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <SD_IsCardProgramming+0x186>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 80042e2:	2313      	movs	r3, #19
 80042e4:	e032      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <SD_IsCardProgramming+0x194>
  {
    return(SD_STREAM_READ_UNDERRUN);
 80042f0:	2314      	movs	r3, #20
 80042f2:	e02b      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <SD_IsCardProgramming+0x1a2>
  {
    return(SD_STREAM_WRITE_OVERRUN);
 80042fe:	2315      	movs	r3, #21
 8004300:	e024      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <SD_IsCardProgramming+0x1b0>
  {
    return(SD_CID_CSD_OVERWRITE);
 800430c:	2316      	movs	r3, #22
 800430e:	e01d      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <SD_IsCardProgramming+0x1be>
  {
    return(SD_WP_ERASE_SKIP);
 800431a:	2317      	movs	r3, #23
 800431c:	e016      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <SD_IsCardProgramming+0x1cc>
  {
    return(SD_CARD_ECC_DISABLED);
 8004328:	2318      	movs	r3, #24
 800432a:	e00f      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <SD_IsCardProgramming+0x1da>
  {
    return(SD_ERASE_RESET);
 8004336:	2319      	movs	r3, #25
 8004338:	e008      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <SD_IsCardProgramming+0x1e8>
  {
    return(SD_AKE_SEQ_ERROR);
 8004344:	231a      	movs	r3, #26
 8004346:	e001      	b.n	800434c <SD_IsCardProgramming+0x1ec>
  }
  
  return errorstate;
 8004348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}   
 800434c:	4618      	mov	r0, r3
 800434e:	3728      	adds	r7, #40	; 0x28
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	fdffe008 	.word	0xfdffe008

08004358 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e0be      	b.n	80044e8 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d031      	beq.n	80043d6 <HAL_UART_Init+0x7e>
  { 
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a5e      	ldr	r2, [pc, #376]	; (80044f0 <HAL_UART_Init+0x198>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d013      	beq.n	80043a4 <HAL_UART_Init+0x4c>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a5c      	ldr	r2, [pc, #368]	; (80044f4 <HAL_UART_Init+0x19c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00e      	beq.n	80043a4 <HAL_UART_Init+0x4c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a5b      	ldr	r2, [pc, #364]	; (80044f8 <HAL_UART_Init+0x1a0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d009      	beq.n	80043a4 <HAL_UART_Init+0x4c>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a59      	ldr	r2, [pc, #356]	; (80044fc <HAL_UART_Init+0x1a4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d004      	beq.n	80043a4 <HAL_UART_Init+0x4c>
 800439a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800439e:	4858      	ldr	r0, [pc, #352]	; (8004500 <HAL_UART_Init+0x1a8>)
 80043a0:	f004 f98e 	bl	80086c0 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d041      	beq.n	8004430 <HAL_UART_Init+0xd8>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b4:	d03c      	beq.n	8004430 <HAL_UART_Init+0xd8>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043be:	d037      	beq.n	8004430 <HAL_UART_Init+0xd8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c8:	d032      	beq.n	8004430 <HAL_UART_Init+0xd8>
 80043ca:	f240 1103 	movw	r1, #259	; 0x103
 80043ce:	484c      	ldr	r0, [pc, #304]	; (8004500 <HAL_UART_Init+0x1a8>)
 80043d0:	f004 f976 	bl	80086c0 <assert_failed>
 80043d4:	e02c      	b.n	8004430 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a45      	ldr	r2, [pc, #276]	; (80044f0 <HAL_UART_Init+0x198>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d027      	beq.n	8004430 <HAL_UART_Init+0xd8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a43      	ldr	r2, [pc, #268]	; (80044f4 <HAL_UART_Init+0x19c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d022      	beq.n	8004430 <HAL_UART_Init+0xd8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a42      	ldr	r2, [pc, #264]	; (80044f8 <HAL_UART_Init+0x1a0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d01d      	beq.n	8004430 <HAL_UART_Init+0xd8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a42      	ldr	r2, [pc, #264]	; (8004504 <HAL_UART_Init+0x1ac>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d018      	beq.n	8004430 <HAL_UART_Init+0xd8>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a41      	ldr	r2, [pc, #260]	; (8004508 <HAL_UART_Init+0x1b0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d013      	beq.n	8004430 <HAL_UART_Init+0xd8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a3b      	ldr	r2, [pc, #236]	; (80044fc <HAL_UART_Init+0x1a4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00e      	beq.n	8004430 <HAL_UART_Init+0xd8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a3d      	ldr	r2, [pc, #244]	; (800450c <HAL_UART_Init+0x1b4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d009      	beq.n	8004430 <HAL_UART_Init+0xd8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a3b      	ldr	r2, [pc, #236]	; (8004510 <HAL_UART_Init+0x1b8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d004      	beq.n	8004430 <HAL_UART_Init+0xd8>
 8004426:	f240 1107 	movw	r1, #263	; 0x107
 800442a:	4835      	ldr	r0, [pc, #212]	; (8004500 <HAL_UART_Init+0x1a8>)
 800442c:	f004 f948 	bl	80086c0 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d009      	beq.n	800444c <HAL_UART_Init+0xf4>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004440:	d004      	beq.n	800444c <HAL_UART_Init+0xf4>
 8004442:	f240 1109 	movw	r1, #265	; 0x109
 8004446:	482e      	ldr	r0, [pc, #184]	; (8004500 <HAL_UART_Init+0x1a8>)
 8004448:	f004 f93a 	bl	80086c0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <HAL_UART_Init+0x110>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445c:	d004      	beq.n	8004468 <HAL_UART_Init+0x110>
 800445e:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004462:	4827      	ldr	r0, [pc, #156]	; (8004500 <HAL_UART_Init+0x1a8>)
 8004464:	f004 f92c 	bl	80086c0 <assert_failed>
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d106      	bne.n	8004482 <HAL_UART_Init+0x12a>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f004 fa59 	bl	8008934 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2224      	movs	r2, #36	; 0x24
 8004486:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	68d2      	ldr	r2, [r2, #12]
 8004494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004498:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f83a 	bl	8004514 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	6912      	ldr	r2, [r2, #16]
 80044aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	6952      	ldr	r2, [r2, #20]
 80044ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044be:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	68d2      	ldr	r2, [r2, #12]
 80044ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ce:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40011000 	.word	0x40011000
 80044f4:	40004400 	.word	0x40004400
 80044f8:	40004800 	.word	0x40004800
 80044fc:	40011400 	.word	0x40011400
 8004500:	08008b80 	.word	0x08008b80
 8004504:	40004c00 	.word	0x40004c00
 8004508:	40005000 	.word	0x40005000
 800450c:	40007800 	.word	0x40007800
 8004510:	40007c00 	.word	0x40007c00

08004514 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4ab0      	ldr	r2, [pc, #704]	; (80047e8 <UART_SetConfig+0x2d4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d904      	bls.n	8004534 <UART_SetConfig+0x20>
 800452a:	f640 1184 	movw	r1, #2436	; 0x984
 800452e:	48af      	ldr	r0, [pc, #700]	; (80047ec <UART_SetConfig+0x2d8>)
 8004530:	f004 f8c6 	bl	80086c0 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d009      	beq.n	8004550 <UART_SetConfig+0x3c>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004544:	d004      	beq.n	8004550 <UART_SetConfig+0x3c>
 8004546:	f640 1185 	movw	r1, #2437	; 0x985
 800454a:	48a8      	ldr	r0, [pc, #672]	; (80047ec <UART_SetConfig+0x2d8>)
 800454c:	f004 f8b8 	bl	80086c0 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00e      	beq.n	8004576 <UART_SetConfig+0x62>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004560:	d009      	beq.n	8004576 <UART_SetConfig+0x62>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800456a:	d004      	beq.n	8004576 <UART_SetConfig+0x62>
 800456c:	f640 1186 	movw	r1, #2438	; 0x986
 8004570:	489e      	ldr	r0, [pc, #632]	; (80047ec <UART_SetConfig+0x2d8>)
 8004572:	f004 f8a5 	bl	80086c0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <UART_SetConfig+0x78>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d104      	bne.n	8004596 <UART_SetConfig+0x82>
 800458c:	f640 1187 	movw	r1, #2439	; 0x987
 8004590:	4896      	ldr	r0, [pc, #600]	; (80047ec <UART_SetConfig+0x2d8>)
 8004592:	f004 f895 	bl	80086c0 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80045c6:	f023 030c 	bic.w	r3, r3, #12
 80045ca:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fe:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461a:	f040 80ef 	bne.w	80047fc <UART_SetConfig+0x2e8>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a73      	ldr	r2, [pc, #460]	; (80047f0 <UART_SetConfig+0x2dc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <UART_SetConfig+0x11e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a71      	ldr	r2, [pc, #452]	; (80047f4 <UART_SetConfig+0x2e0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d16c      	bne.n	800470c <UART_SetConfig+0x1f8>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681c      	ldr	r4, [r3, #0]
 8004636:	f7fd ffc9 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 800463a:	4602      	mov	r2, r0
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009a      	lsls	r2, r3, #2
 8004644:	441a      	add	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	4a69      	ldr	r2, [pc, #420]	; (80047f8 <UART_SetConfig+0x2e4>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	011d      	lsls	r5, r3, #4
 800465a:	f7fd ffb7 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 800465e:	4602      	mov	r2, r0
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009a      	lsls	r2, r3, #2
 8004668:	441a      	add	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	fbb2 f6f3 	udiv	r6, r2, r3
 8004674:	f7fd ffaa 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8004678:	4602      	mov	r2, r0
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	009a      	lsls	r2, r3, #2
 8004682:	441a      	add	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	4a5a      	ldr	r2, [pc, #360]	; (80047f8 <UART_SetConfig+0x2e4>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	2264      	movs	r2, #100	; 0x64
 8004698:	fb02 f303 	mul.w	r3, r2, r3
 800469c:	1af3      	subs	r3, r6, r3
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	3332      	adds	r3, #50	; 0x32
 80046a2:	4a55      	ldr	r2, [pc, #340]	; (80047f8 <UART_SetConfig+0x2e4>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	441d      	add	r5, r3
 80046b2:	f7fd ff8b 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 80046b6:	4602      	mov	r2, r0
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	009a      	lsls	r2, r3, #2
 80046c0:	441a      	add	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80046cc:	f7fd ff7e 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009a      	lsls	r2, r3, #2
 80046da:	441a      	add	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	4a44      	ldr	r2, [pc, #272]	; (80047f8 <UART_SetConfig+0x2e4>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	2264      	movs	r2, #100	; 0x64
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	1af3      	subs	r3, r6, r3
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	3332      	adds	r3, #50	; 0x32
 80046fa:	4a3f      	ldr	r2, [pc, #252]	; (80047f8 <UART_SetConfig+0x2e4>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	442b      	add	r3, r5
 8004708:	60a3      	str	r3, [r4, #8]
 800470a:	e159      	b.n	80049c0 <UART_SetConfig+0x4ac>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681c      	ldr	r4, [r3, #0]
 8004710:	f7fd ff3a 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8004714:	4602      	mov	r2, r0
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	009a      	lsls	r2, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	4a33      	ldr	r2, [pc, #204]	; (80047f8 <UART_SetConfig+0x2e4>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	011d      	lsls	r5, r3, #4
 8004734:	f7fd ff28 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8004738:	4602      	mov	r2, r0
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009a      	lsls	r2, r3, #2
 8004742:	441a      	add	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fbb2 f6f3 	udiv	r6, r2, r3
 800474e:	f7fd ff1b 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8004752:	4602      	mov	r2, r0
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009a      	lsls	r2, r3, #2
 800475c:	441a      	add	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	4a23      	ldr	r2, [pc, #140]	; (80047f8 <UART_SetConfig+0x2e4>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	2264      	movs	r2, #100	; 0x64
 8004772:	fb02 f303 	mul.w	r3, r2, r3
 8004776:	1af3      	subs	r3, r6, r3
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	3332      	adds	r3, #50	; 0x32
 800477c:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <UART_SetConfig+0x2e4>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	441d      	add	r5, r3
 800478c:	f7fd fefc 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8004790:	4602      	mov	r2, r0
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009a      	lsls	r2, r3, #2
 800479a:	441a      	add	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80047a6:	f7fd feef 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 80047aa:	4602      	mov	r2, r0
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009a      	lsls	r2, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	4a0d      	ldr	r2, [pc, #52]	; (80047f8 <UART_SetConfig+0x2e4>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	2264      	movs	r2, #100	; 0x64
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	1af3      	subs	r3, r6, r3
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	3332      	adds	r3, #50	; 0x32
 80047d4:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <UART_SetConfig+0x2e4>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	442b      	add	r3, r5
 80047e2:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80047e4:	e0ec      	b.n	80049c0 <UART_SetConfig+0x4ac>
 80047e6:	bf00      	nop
 80047e8:	00a037a0 	.word	0x00a037a0
 80047ec:	08008b80 	.word	0x08008b80
 80047f0:	40011000 	.word	0x40011000
 80047f4:	40011400 	.word	0x40011400
 80047f8:	51eb851f 	.word	0x51eb851f
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a71      	ldr	r2, [pc, #452]	; (80049c8 <UART_SetConfig+0x4b4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <UART_SetConfig+0x2fc>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a70      	ldr	r2, [pc, #448]	; (80049cc <UART_SetConfig+0x4b8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d16b      	bne.n	80048e8 <UART_SetConfig+0x3d4>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681c      	ldr	r4, [r3, #0]
 8004814:	f7fd feda 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8004818:	4602      	mov	r2, r0
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	009a      	lsls	r2, r3, #2
 8004822:	441a      	add	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	fbb2 f3f3 	udiv	r3, r2, r3
 800482e:	4a68      	ldr	r2, [pc, #416]	; (80049d0 <UART_SetConfig+0x4bc>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	011d      	lsls	r5, r3, #4
 8004838:	f7fd fec8 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 800483c:	4602      	mov	r2, r0
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	009a      	lsls	r2, r3, #2
 8004846:	441a      	add	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004852:	f7fd febb 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8004856:	4602      	mov	r2, r0
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	009a      	lsls	r2, r3, #2
 8004860:	441a      	add	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	4a58      	ldr	r2, [pc, #352]	; (80049d0 <UART_SetConfig+0x4bc>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	2264      	movs	r2, #100	; 0x64
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	1af3      	subs	r3, r6, r3
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	3332      	adds	r3, #50	; 0x32
 8004880:	4a53      	ldr	r2, [pc, #332]	; (80049d0 <UART_SetConfig+0x4bc>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800488c:	441d      	add	r5, r3
 800488e:	f7fd fe9d 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8004892:	4602      	mov	r2, r0
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009a      	lsls	r2, r3, #2
 800489c:	441a      	add	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80048a8:	f7fd fe90 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 80048ac:	4602      	mov	r2, r0
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	009a      	lsls	r2, r3, #2
 80048b6:	441a      	add	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c2:	4a43      	ldr	r2, [pc, #268]	; (80049d0 <UART_SetConfig+0x4bc>)
 80048c4:	fba2 2303 	umull	r2, r3, r2, r3
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	2264      	movs	r2, #100	; 0x64
 80048cc:	fb02 f303 	mul.w	r3, r2, r3
 80048d0:	1af3      	subs	r3, r6, r3
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	3332      	adds	r3, #50	; 0x32
 80048d6:	4a3e      	ldr	r2, [pc, #248]	; (80049d0 <UART_SetConfig+0x4bc>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	442b      	add	r3, r5
 80048e4:	60a3      	str	r3, [r4, #8]
 80048e6:	e06b      	b.n	80049c0 <UART_SetConfig+0x4ac>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681c      	ldr	r4, [r3, #0]
 80048ec:	f7fd fe4c 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 80048f0:	4602      	mov	r2, r0
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	009a      	lsls	r2, r3, #2
 80048fa:	441a      	add	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	fbb2 f3f3 	udiv	r3, r2, r3
 8004906:	4a32      	ldr	r2, [pc, #200]	; (80049d0 <UART_SetConfig+0x4bc>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	011d      	lsls	r5, r3, #4
 8004910:	f7fd fe3a 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8004914:	4602      	mov	r2, r0
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	009a      	lsls	r2, r3, #2
 800491e:	441a      	add	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	fbb2 f6f3 	udiv	r6, r2, r3
 800492a:	f7fd fe2d 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 800492e:	4602      	mov	r2, r0
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	009a      	lsls	r2, r3, #2
 8004938:	441a      	add	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <UART_SetConfig+0x4bc>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	2264      	movs	r2, #100	; 0x64
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	1af3      	subs	r3, r6, r3
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	3332      	adds	r3, #50	; 0x32
 8004958:	4a1d      	ldr	r2, [pc, #116]	; (80049d0 <UART_SetConfig+0x4bc>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004964:	441d      	add	r5, r3
 8004966:	f7fd fe0f 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 800496a:	4602      	mov	r2, r0
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009a      	lsls	r2, r3, #2
 8004974:	441a      	add	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004980:	f7fd fe02 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8004984:	4602      	mov	r2, r0
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	009a      	lsls	r2, r3, #2
 800498e:	441a      	add	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	fbb2 f3f3 	udiv	r3, r2, r3
 800499a:	4a0d      	ldr	r2, [pc, #52]	; (80049d0 <UART_SetConfig+0x4bc>)
 800499c:	fba2 2303 	umull	r2, r3, r2, r3
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	2264      	movs	r2, #100	; 0x64
 80049a4:	fb02 f303 	mul.w	r3, r2, r3
 80049a8:	1af3      	subs	r3, r6, r3
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	3332      	adds	r3, #50	; 0x32
 80049ae:	4a08      	ldr	r2, [pc, #32]	; (80049d0 <UART_SetConfig+0x4bc>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	442b      	add	r3, r5
 80049bc:	60a3      	str	r3, [r4, #8]
    }
  }
}
 80049be:	e7ff      	b.n	80049c0 <UART_SetConfig+0x4ac>
 80049c0:	bf00      	nop
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c8:	40011000 	.word	0x40011000
 80049cc:	40011400 	.word	0x40011400
 80049d0:	51eb851f 	.word	0x51eb851f

080049d4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDIO register base
  * @param  Init: SDIO initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80049d4:	b084      	sub	sp, #16
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	f107 001c 	add.w	r0, r7, #28
 80049e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U; 
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(SDIOx));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a34      	ldr	r2, [pc, #208]	; (8004ac0 <SDIO_Init+0xec>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <SDIO_Init+0x26>
 80049f2:	21de      	movs	r1, #222	; 0xde
 80049f4:	4833      	ldr	r0, [pc, #204]	; (8004ac4 <SDIO_Init+0xf0>)
 80049f6:	f003 fe63 	bl	80086c0 <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(Init.ClockEdge)); 
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <SDIO_Init+0x3c>
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a06:	d003      	beq.n	8004a10 <SDIO_Init+0x3c>
 8004a08:	21df      	movs	r1, #223	; 0xdf
 8004a0a:	482e      	ldr	r0, [pc, #184]	; (8004ac4 <SDIO_Init+0xf0>)
 8004a0c:	f003 fe58 	bl	80086c0 <assert_failed>
  assert_param(IS_SDIO_CLOCK_BYPASS(Init.ClockBypass));
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <SDIO_Init+0x52>
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1c:	d003      	beq.n	8004a26 <SDIO_Init+0x52>
 8004a1e:	21e0      	movs	r1, #224	; 0xe0
 8004a20:	4828      	ldr	r0, [pc, #160]	; (8004ac4 <SDIO_Init+0xf0>)
 8004a22:	f003 fe4d 	bl	80086c0 <assert_failed>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <SDIO_Init+0x68>
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a32:	d003      	beq.n	8004a3c <SDIO_Init+0x68>
 8004a34:	21e1      	movs	r1, #225	; 0xe1
 8004a36:	4823      	ldr	r0, [pc, #140]	; (8004ac4 <SDIO_Init+0xf0>)
 8004a38:	f003 fe42 	bl	80086c0 <assert_failed>
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00b      	beq.n	8004a5a <SDIO_Init+0x86>
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a48:	d007      	beq.n	8004a5a <SDIO_Init+0x86>
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a50:	d003      	beq.n	8004a5a <SDIO_Init+0x86>
 8004a52:	21e2      	movs	r1, #226	; 0xe2
 8004a54:	481b      	ldr	r0, [pc, #108]	; (8004ac4 <SDIO_Init+0xf0>)
 8004a56:	f003 fe33 	bl	80086c0 <assert_failed>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <SDIO_Init+0x9c>
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a66:	d003      	beq.n	8004a70 <SDIO_Init+0x9c>
 8004a68:	21e3      	movs	r1, #227	; 0xe3
 8004a6a:	4816      	ldr	r0, [pc, #88]	; (8004ac4 <SDIO_Init+0xf0>)
 8004a6c:	f003 fe28 	bl	80086c0 <assert_failed>
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	2bff      	cmp	r3, #255	; 0xff
 8004a74:	d903      	bls.n	8004a7e <SDIO_Init+0xaa>
 8004a76:	21e4      	movs	r1, #228	; 0xe4
 8004a78:	4812      	ldr	r0, [pc, #72]	; (8004ac4 <SDIO_Init+0xf0>)
 8004a7a:	f003 fe21 	bl	80086c0 <assert_failed>
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004a7e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004a80:	6a3b      	ldr	r3, [r7, #32]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004a82:	431a      	orrs	r2, r3
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
 8004a86:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
             Init.BusWide             |\
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
 8004a8a:	431a      	orrs	r2, r3
             Init.BusWide             |\
             Init.HardwareFlowControl |\
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
             Init.BusWide             |\
 8004a8e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
             Init.ClockDiv
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
             Init.BusWide             |\
             Init.HardwareFlowControl |\
 8004a92:	4313      	orrs	r3, r2
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDIO CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004aa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aba:	b004      	add	sp, #16
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	08008bbc 	.word	0x08008bbc

08004ac8 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDIO register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop

08004ae4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDIO register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop

08004b08 <SDIO_PowerState_ON>:
  * @brief  Set SDIO Power state to ON. 
  * @param  SDIOx: Pointer to SDIO register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2203      	movs	r2, #3
 8004b14:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0303 	and.w	r3, r3, #3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <SDIO_SendCommand>:
  * @param  SDIO_CmdInitStruct: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDIO command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->CmdIndex));
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b3f      	cmp	r3, #63	; 0x3f
 8004b54:	d904      	bls.n	8004b60 <SDIO_SendCommand+0x20>
 8004b56:	f240 1169 	movw	r1, #361	; 0x169
 8004b5a:	482b      	ldr	r0, [pc, #172]	; (8004c08 <SDIO_SendCommand+0xc8>)
 8004b5c:	f003 fdb0 	bl	80086c0 <assert_failed>
  assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->Response));
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00c      	beq.n	8004b82 <SDIO_SendCommand+0x42>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d008      	beq.n	8004b82 <SDIO_SendCommand+0x42>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2bc0      	cmp	r3, #192	; 0xc0
 8004b76:	d004      	beq.n	8004b82 <SDIO_SendCommand+0x42>
 8004b78:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8004b7c:	4822      	ldr	r0, [pc, #136]	; (8004c08 <SDIO_SendCommand+0xc8>)
 8004b7e:	f003 fd9f 	bl	80086c0 <assert_failed>
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->WaitForInterrupt));
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00e      	beq.n	8004ba8 <SDIO_SendCommand+0x68>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b92:	d009      	beq.n	8004ba8 <SDIO_SendCommand+0x68>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9c:	d004      	beq.n	8004ba8 <SDIO_SendCommand+0x68>
 8004b9e:	f240 116b 	movw	r1, #363	; 0x16b
 8004ba2:	4819      	ldr	r0, [pc, #100]	; (8004c08 <SDIO_SendCommand+0xc8>)
 8004ba4:	f003 fd8c 	bl	80086c0 <assert_failed>
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->CPSM));
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <SDIO_SendCommand+0x84>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb8:	d004      	beq.n	8004bc4 <SDIO_SendCommand+0x84>
 8004bba:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8004bbe:	4812      	ldr	r0, [pc, #72]	; (8004c08 <SDIO_SendCommand+0xc8>)
 8004bc0:	f003 fd7e 	bl	80086c0 <assert_failed>

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	609a      	str	r2, [r3, #8]

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
                       SDIO_CmdInitStruct->Response         |\
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 8004bd4:	431a      	orrs	r2, r3
                       SDIO_CmdInitStruct->Response         |\
                       SDIO_CmdInitStruct->WaitForInterrupt |\
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
                       SDIO_CmdInitStruct->Response         |\
 8004bda:	431a      	orrs	r2, r3
                       SDIO_CmdInitStruct->WaitForInterrupt |\
                       SDIO_CmdInitStruct->CPSM);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
                       SDIO_CmdInitStruct->Response         |\
                       SDIO_CmdInitStruct->WaitForInterrupt |\
 8004be0:	4313      	orrs	r3, r2

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
                       SDIO_CmdInitStruct->Response         |\
                       SDIO_CmdInitStruct->WaitForInterrupt |\
                       SDIO_CmdInitStruct->CPSM);
  
  /* Write to SDIO CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004bf0:	f023 030f 	bic.w	r3, r3, #15
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	08008bbc 	.word	0x08008bbc

08004c0c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDIO register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	b2db      	uxtb	r3, r3
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop

08004c28 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00d      	beq.n	8004c56 <SDIO_GetResponse+0x2e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d00a      	beq.n	8004c56 <SDIO_GetResponse+0x2e>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d007      	beq.n	8004c56 <SDIO_GetResponse+0x2e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b0c      	cmp	r3, #12
 8004c4a:	d004      	beq.n	8004c56 <SDIO_GetResponse+0x2e>
 8004c4c:	f240 1197 	movw	r1, #407	; 0x197
 8004c50:	4806      	ldr	r0, [pc, #24]	; (8004c6c <SDIO_GetResponse+0x44>)
 8004c52:	f003 fd35 	bl	80086c0 <assert_failed>

  /* Get the response */
  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <SDIO_GetResponse+0x48>)
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
}  
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	08008bbc 	.word	0x08008bbc
 8004c70:	40012c14 	.word	0x40012c14

08004c74 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_DataConfig(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->DataLength));
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c8a:	d304      	bcc.n	8004c96 <SDIO_DataConfig+0x22>
 8004c8c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004c90:	4846      	ldr	r0, [pc, #280]	; (8004dac <SDIO_DataConfig+0x138>)
 8004c92:	f003 fd15 	bl	80086c0 <assert_failed>
  assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->DataBlockSize));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d03c      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d038      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d034      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b30      	cmp	r3, #48	; 0x30
 8004cb4:	d030      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d02c      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2b50      	cmp	r3, #80	; 0x50
 8004cc4:	d028      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b60      	cmp	r3, #96	; 0x60
 8004ccc:	d024      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2b70      	cmp	r3, #112	; 0x70
 8004cd4:	d020      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b80      	cmp	r3, #128	; 0x80
 8004cdc:	d01c      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b90      	cmp	r3, #144	; 0x90
 8004ce4:	d018      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2ba0      	cmp	r3, #160	; 0xa0
 8004cec:	d014      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2bb0      	cmp	r3, #176	; 0xb0
 8004cf4:	d010      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8004cfc:	d00c      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2bd0      	cmp	r3, #208	; 0xd0
 8004d04:	d008      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2be0      	cmp	r3, #224	; 0xe0
 8004d0c:	d004      	beq.n	8004d18 <SDIO_DataConfig+0xa4>
 8004d0e:	f240 11ad 	movw	r1, #429	; 0x1ad
 8004d12:	4826      	ldr	r0, [pc, #152]	; (8004dac <SDIO_DataConfig+0x138>)
 8004d14:	f003 fcd4 	bl	80086c0 <assert_failed>
  assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->TransferDir));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <SDIO_DataConfig+0xbe>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d004      	beq.n	8004d32 <SDIO_DataConfig+0xbe>
 8004d28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004d2c:	481f      	ldr	r0, [pc, #124]	; (8004dac <SDIO_DataConfig+0x138>)
 8004d2e:	f003 fcc7 	bl	80086c0 <assert_failed>
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->TransferMode));
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d008      	beq.n	8004d4c <SDIO_DataConfig+0xd8>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d004      	beq.n	8004d4c <SDIO_DataConfig+0xd8>
 8004d42:	f240 11af 	movw	r1, #431	; 0x1af
 8004d46:	4819      	ldr	r0, [pc, #100]	; (8004dac <SDIO_DataConfig+0x138>)
 8004d48:	f003 fcba 	bl	80086c0 <assert_failed>
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->DPSM));
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <SDIO_DataConfig+0xf2>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d004      	beq.n	8004d66 <SDIO_DataConfig+0xf2>
 8004d5c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004d60:	4812      	ldr	r0, [pc, #72]	; (8004dac <SDIO_DataConfig+0x138>)
 8004d62:	f003 fcad 	bl	80086c0 <assert_failed>

  /* Set the SDIO Data Timeout value */
  SDIOx->DTIMER = SDIO_DataInitStruct->DataTimeOut;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
                       SDIO_DataInitStruct->TransferDir   |\
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8004d7e:	431a      	orrs	r2, r3
                       SDIO_DataInitStruct->TransferDir   |\
                       SDIO_DataInitStruct->TransferMode  |\
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
                       SDIO_DataInitStruct->TransferDir   |\
 8004d84:	431a      	orrs	r2, r3
                       SDIO_DataInitStruct->TransferMode  |\
                       SDIO_DataInitStruct->DPSM);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
                       SDIO_DataInitStruct->TransferDir   |\
                       SDIO_DataInitStruct->TransferMode  |\
 8004d8a:	4313      	orrs	r3, r2

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
                       SDIO_DataInitStruct->TransferDir   |\
                       SDIO_DataInitStruct->TransferMode  |\
                       SDIO_DataInitStruct->DPSM);
  
  /* Write to SDIO DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0

}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	08008bbc 	.word	0x08008bbc

08004db0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <disk_status+0x30>)
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	79fa      	ldrb	r2, [r7, #7]
 8004dc8:	4905      	ldr	r1, [pc, #20]	; (8004de0 <disk_status+0x30>)
 8004dca:	440a      	add	r2, r1
 8004dcc:	7a12      	ldrb	r2, [r2, #8]
 8004dce:	4610      	mov	r0, r2
 8004dd0:	4798      	blx	r3
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	2000059c 	.word	0x2000059c

08004de4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <disk_initialize+0x48>)
 8004df6:	5cd3      	ldrb	r3, [r2, r3]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d111      	bne.n	8004e20 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	4a0b      	ldr	r2, [pc, #44]	; (8004e2c <disk_initialize+0x48>)
 8004e00:	2101      	movs	r1, #1
 8004e02:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <disk_initialize+0x48>)
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	79fa      	ldrb	r2, [r7, #7]
 8004e12:	4906      	ldr	r1, [pc, #24]	; (8004e2c <disk_initialize+0x48>)
 8004e14:	440a      	add	r2, r1
 8004e16:	7a12      	ldrb	r2, [r2, #8]
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4798      	blx	r3
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	2000059c 	.word	0x2000059c

08004e30 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004e30:	b590      	push	{r4, r7, lr}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	4a0a      	ldr	r2, [pc, #40]	; (8004e6c <disk_read+0x3c>)
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	689c      	ldr	r4, [r3, #8]
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	4a07      	ldr	r2, [pc, #28]	; (8004e6c <disk_read+0x3c>)
 8004e50:	4413      	add	r3, r2
 8004e52:	7a18      	ldrb	r0, [r3, #8]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	47a0      	blx	r4
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd90      	pop	{r4, r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	2000059c 	.word	0x2000059c

08004e70 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004e70:	b590      	push	{r4, r7, lr}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <disk_write+0x3c>)
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	68dc      	ldr	r4, [r3, #12]
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	4a07      	ldr	r2, [pc, #28]	; (8004eac <disk_write+0x3c>)
 8004e90:	4413      	add	r3, r2
 8004e92:	7a18      	ldrb	r0, [r3, #8]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	47a0      	blx	r4
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd90      	pop	{r4, r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	2000059c 	.word	0x2000059c

08004eb0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	603a      	str	r2, [r7, #0]
 8004eba:	71fb      	strb	r3, [r7, #7]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	4a09      	ldr	r2, [pc, #36]	; (8004ee8 <disk_ioctl+0x38>)
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	79fa      	ldrb	r2, [r7, #7]
 8004ece:	4906      	ldr	r1, [pc, #24]	; (8004ee8 <disk_ioctl+0x38>)
 8004ed0:	440a      	add	r2, r1
 8004ed2:	7a10      	ldrb	r0, [r2, #8]
 8004ed4:	79b9      	ldrb	r1, [r7, #6]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	4798      	blx	r3
 8004eda:	4603      	mov	r3, r0
 8004edc:	73fb      	strb	r3, [r7, #15]
  return res;
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	2000059c 	.word	0x2000059c

08004eec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <SD_initialize+0x38>)
 8004ef8:	2201      	movs	r2, #1
 8004efa:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8004efc:	f003 f9e2 	bl	80082c4 <BSP_SD_Init>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004f06:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <SD_initialize+0x38>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <SD_initialize+0x38>)
 8004f14:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004f16:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <SD_initialize+0x38>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	b2db      	uxtb	r3, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20000000 	.word	0x20000000

08004f28 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <SD_status+0x38>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 8004f38:	f003 fa30 	bl	800839c <BSP_SD_GetStatus>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d107      	bne.n	8004f52 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004f42:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <SD_status+0x38>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <SD_status+0x38>)
 8004f50:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8004f52:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <SD_status+0x38>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	b2db      	uxtb	r3, r3
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20000000 	.word	0x20000000

08004f64 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004f64:	b590      	push	{r4, r7, lr}
 8004f66:	b089      	sub	sp, #36	; 0x24
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	4603      	mov	r3, r0
 8004f72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
                       (uint64_t) (sector * BLOCK_SIZE), 
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	025b      	lsls	r3, r3, #9
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8004f7c:	f04f 0400 	mov.w	r4, #0
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	9201      	str	r2, [sp, #4]
 8004f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f88:	9200      	str	r2, [sp, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	4623      	mov	r3, r4
 8004f8e:	68b8      	ldr	r0, [r7, #8]
 8004f90:	f003 f9c4 	bl	800831c <BSP_SD_ReadBlocks>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <SD_read+0x3a>
                       (uint64_t) (sector * BLOCK_SIZE), 
                       BLOCK_SIZE, 
                       count) != MSD_OK)
  {
    res = RES_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8004f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd90      	pop	{r4, r7, pc}

08004fa8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b089      	sub	sp, #36	; 0x24
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
                        (uint64_t)(sector * BLOCK_SIZE), 
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	025b      	lsls	r3, r3, #9
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8004fc0:	f04f 0400 	mov.w	r4, #0
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	9201      	str	r2, [sp, #4]
 8004fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fcc:	9200      	str	r2, [sp, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	4623      	mov	r3, r4
 8004fd2:	68b8      	ldr	r0, [r7, #8]
 8004fd4:	f003 f9c2 	bl	800835c <BSP_SD_WriteBlocks>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <SD_write+0x3a>
                        (uint64_t)(sector * BLOCK_SIZE), 
                        BLOCK_SIZE, count) != MSD_OK)
  {
    res = RES_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8004fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd90      	pop	{r4, r7, pc}

08004fec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004fec:	b5b0      	push	{r4, r5, r7, lr}
 8004fee:	b09a      	sub	sp, #104	; 0x68
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	603a      	str	r2, [r7, #0]
 8004ff6:	71fb      	strb	r3, [r7, #7]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005002:	4b21      	ldr	r3, [pc, #132]	; (8005088 <SD_ioctl+0x9c>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <SD_ioctl+0x28>
 8005010:	2303      	movs	r3, #3
 8005012:	e035      	b.n	8005080 <SD_ioctl+0x94>
  
  switch (cmd)
 8005014:	79bb      	ldrb	r3, [r7, #6]
 8005016:	2b03      	cmp	r3, #3
 8005018:	d82d      	bhi.n	8005076 <SD_ioctl+0x8a>
 800501a:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <SD_ioctl+0x34>)
 800501c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005020:	08005031 	.word	0x08005031
 8005024:	08005039 	.word	0x08005039
 8005028:	0800505d 	.word	0x0800505d
 800502c:	0800506d 	.word	0x0800506d
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    break;
 8005036:	e021      	b.n	800507c <SD_ioctl+0x90>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005038:	f107 0308 	add.w	r3, r7, #8
 800503c:	4618      	mov	r0, r3
 800503e:	f003 f9b7 	bl	80083b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 8005042:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005046:	0a54      	lsrs	r4, r2, #9
 8005048:	ea44 54c3 	orr.w	r4, r4, r3, lsl #23
 800504c:	0a5d      	lsrs	r5, r3, #9
 800504e:	4622      	mov	r2, r4
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    break;
 800505a:	e00f      	b.n	800507c <SD_ioctl+0x90>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = BLOCK_SIZE;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005062:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    break;
 800506a:	e007      	b.n	800507c <SD_ioctl+0x90>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005072:	601a      	str	r2, [r3, #0]
    break;
 8005074:	e002      	b.n	800507c <SD_ioctl+0x90>
  
  default:
    res = RES_PARERR;
 8005076:	2304      	movs	r3, #4
 8005078:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  return res;
 800507c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005080:	4618      	mov	r0, r3
 8005082:	3768      	adds	r7, #104	; 0x68
 8005084:	46bd      	mov	sp, r7
 8005086:	bdb0      	pop	{r4, r5, r7, pc}
 8005088:	20000000 	.word	0x20000000

0800508c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80050a0:	e007      	b.n	80050b2 <mem_cpy+0x26>
		*d++ = *s++;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	617a      	str	r2, [r7, #20]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	1c51      	adds	r1, r2, #1
 80050ac:	6139      	str	r1, [r7, #16]
 80050ae:	7812      	ldrb	r2, [r2, #0]
 80050b0:	701a      	strb	r2, [r3, #0]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	1e5a      	subs	r2, r3, #1
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f2      	bne.n	80050a2 <mem_cpy+0x16>
		*d++ = *s++;
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80050d8:	e005      	b.n	80050e6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	617a      	str	r2, [r7, #20]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	1e5a      	subs	r2, r3, #1
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f4      	bne.n	80050da <mem_set+0x12>
		*d++ = (BYTE)val;
}
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80050fc:	b480      	push	{r7}
 80050fe:	b089      	sub	sp, #36	; 0x24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005114:	bf00      	nop
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	1e5a      	subs	r2, r3, #1
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00d      	beq.n	800513c <mem_cmp+0x40>
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	61fa      	str	r2, [r7, #28]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	4619      	mov	r1, r3
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	61ba      	str	r2, [r7, #24]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	1acb      	subs	r3, r1, r3
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0ec      	beq.n	8005116 <mem_cmp+0x1a>
	return r;
 800513c:	697b      	ldr	r3, [r7, #20]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3724      	adds	r7, #36	; 0x24
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop

0800514c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005156:	e002      	b.n	800515e <chk_chr+0x12>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3301      	adds	r3, #1
 800515c:	607b      	str	r3, [r7, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <chk_chr+0x26>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d1f2      	bne.n	8005158 <chk_chr+0xc>
	return *str;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	781b      	ldrb	r3, [r3, #0]
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop

08005184 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800518e:	2300      	movs	r3, #0
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e038      	b.n	800520a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8005198:	4930      	ldr	r1, [pc, #192]	; (800525c <chk_lock+0xd8>)
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4613      	mov	r3, r2
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d029      	beq.n	8005200 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80051ac:	492b      	ldr	r1, [pc, #172]	; (800525c <chk_lock+0xd8>)
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4613      	mov	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d11e      	bne.n	8005204 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80051c6:	4925      	ldr	r1, [pc, #148]	; (800525c <chk_lock+0xd8>)
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4613      	mov	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	3304      	adds	r3, #4
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80051de:	429a      	cmp	r2, r3
 80051e0:	d110      	bne.n	8005204 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
				Files[i].idx == dp->index) break;
 80051e2:	491e      	ldr	r1, [pc, #120]	; (800525c <chk_lock+0xd8>)
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	3308      	adds	r3, #8
 80051f2:	881a      	ldrh	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->sclust &&
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d102      	bne.n	8005204 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80051fe:	e007      	b.n	8005210 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8005200:	2301      	movs	r3, #1
 8005202:	60bb      	str	r3, [r7, #8]
)
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3301      	adds	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d9c3      	bls.n	8005198 <chk_lock+0x14>
				Files[i].idx == dp->index) break;
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d109      	bne.n	800522a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <chk_lock+0x9e>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d101      	bne.n	8005226 <chk_lock+0xa2>
 8005222:	2300      	movs	r3, #0
 8005224:	e013      	b.n	800524e <chk_lock+0xca>
 8005226:	2312      	movs	r3, #18
 8005228:	e011      	b.n	800524e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10b      	bne.n	8005248 <chk_lock+0xc4>
 8005230:	490a      	ldr	r1, [pc, #40]	; (800525c <chk_lock+0xd8>)
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4613      	mov	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4413      	add	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	330a      	adds	r3, #10
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005246:	d101      	bne.n	800524c <chk_lock+0xc8>
 8005248:	2310      	movs	r3, #16
 800524a:	e000      	b.n	800524e <chk_lock+0xca>
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	20000584 	.word	0x20000584

08005260 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005266:	2300      	movs	r3, #0
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	e002      	b.n	8005272 <enq_lock+0x12>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3301      	adds	r3, #1
 8005270:	607b      	str	r3, [r7, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d809      	bhi.n	800528c <enq_lock+0x2c>
 8005278:	490a      	ldr	r1, [pc, #40]	; (80052a4 <enq_lock+0x44>)
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1ef      	bne.n	800526c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b02      	cmp	r3, #2
 8005290:	bf14      	ite	ne
 8005292:	2301      	movne	r3, #1
 8005294:	2300      	moveq	r3, #0
 8005296:	b2db      	uxtb	r3, r3
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	20000584 	.word	0x20000584

080052a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	e02b      	b.n	8005310 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80052b8:	4956      	ldr	r1, [pc, #344]	; (8005414 <inc_lock+0x16c>)
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4613      	mov	r3, r2
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d11b      	bne.n	800530a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80052d2:	4950      	ldr	r1, [pc, #320]	; (8005414 <inc_lock+0x16c>)
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4613      	mov	r3, r2
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	440b      	add	r3, r1
 80052e0:	3304      	adds	r3, #4
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d10d      	bne.n	800530a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
 80052ee:	4949      	ldr	r1, [pc, #292]	; (8005414 <inc_lock+0x16c>)
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4613      	mov	r3, r2
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	3308      	adds	r3, #8
 80052fe:	881a      	ldrh	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
			Files[i].clu == dp->sclust &&
 8005306:	429a      	cmp	r2, r3
 8005308:	d006      	beq.n	8005318 <inc_lock+0x70>
)
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3301      	adds	r3, #1
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d9d0      	bls.n	80052b8 <inc_lock+0x10>
 8005316:	e000      	b.n	800531a <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
 8005318:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d145      	bne.n	80053ac <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e002      	b.n	800532c <inc_lock+0x84>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3301      	adds	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d809      	bhi.n	8005346 <inc_lock+0x9e>
 8005332:	4938      	ldr	r1, [pc, #224]	; (8005414 <inc_lock+0x16c>)
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4613      	mov	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1ef      	bne.n	8005326 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d101      	bne.n	8005350 <inc_lock+0xa8>
 800534c:	2300      	movs	r3, #0
 800534e:	e05a      	b.n	8005406 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8005356:	482f      	ldr	r0, [pc, #188]	; (8005414 <inc_lock+0x16c>)
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4613      	mov	r3, r2
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4403      	add	r3, r0
 8005364:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800536c:	4829      	ldr	r0, [pc, #164]	; (8005414 <inc_lock+0x16c>)
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4613      	mov	r3, r2
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4403      	add	r3, r0
 800537a:	3304      	adds	r3, #4
 800537c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8005384:	4923      	ldr	r1, [pc, #140]	; (8005414 <inc_lock+0x16c>)
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4613      	mov	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	3308      	adds	r3, #8
 8005394:	4602      	mov	r2, r0
 8005396:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005398:	491e      	ldr	r1, [pc, #120]	; (8005414 <inc_lock+0x16c>)
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4613      	mov	r3, r2
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	330a      	adds	r3, #10
 80053a8:	2200      	movs	r2, #0
 80053aa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00c      	beq.n	80053cc <inc_lock+0x124>
 80053b2:	4918      	ldr	r1, [pc, #96]	; (8005414 <inc_lock+0x16c>)
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4613      	mov	r3, r2
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	330a      	adds	r3, #10
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <inc_lock+0x124>
 80053c8:	2300      	movs	r3, #0
 80053ca:	e01c      	b.n	8005406 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10b      	bne.n	80053ea <inc_lock+0x142>
 80053d2:	4910      	ldr	r1, [pc, #64]	; (8005414 <inc_lock+0x16c>)
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4613      	mov	r3, r2
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	330a      	adds	r3, #10
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	3301      	adds	r3, #1
 80053e6:	b299      	uxth	r1, r3
 80053e8:	e001      	b.n	80053ee <inc_lock+0x146>
 80053ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053ee:	4809      	ldr	r0, [pc, #36]	; (8005414 <inc_lock+0x16c>)
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4613      	mov	r3, r2
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4403      	add	r3, r0
 80053fc:	330a      	adds	r3, #10
 80053fe:	460a      	mov	r2, r1
 8005400:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3301      	adds	r3, #1
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000584 	.word	0x20000584

08005418 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3b01      	subs	r3, #1
 8005424:	607b      	str	r3, [r7, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d82e      	bhi.n	800548a <dec_lock+0x72>
		n = Files[i].ctr;
 800542c:	491b      	ldr	r1, [pc, #108]	; (800549c <dec_lock+0x84>)
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	4613      	mov	r3, r2
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	330a      	adds	r3, #10
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005440:	89fb      	ldrh	r3, [r7, #14]
 8005442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005446:	d101      	bne.n	800544c <dec_lock+0x34>
 8005448:	2300      	movs	r3, #0
 800544a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800544c:	89fb      	ldrh	r3, [r7, #14]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <dec_lock+0x40>
 8005452:	89fb      	ldrh	r3, [r7, #14]
 8005454:	3b01      	subs	r3, #1
 8005456:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005458:	4910      	ldr	r1, [pc, #64]	; (800549c <dec_lock+0x84>)
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	330a      	adds	r3, #10
 8005468:	89fa      	ldrh	r2, [r7, #14]
 800546a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800546c:	89fb      	ldrh	r3, [r7, #14]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d108      	bne.n	8005484 <dec_lock+0x6c>
 8005472:	490a      	ldr	r1, [pc, #40]	; (800549c <dec_lock+0x84>)
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	737b      	strb	r3, [r7, #13]
 8005488:	e001      	b.n	800548e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800548a:	2302      	movs	r3, #2
 800548c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800548e:	7b7b      	ldrb	r3, [r7, #13]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	20000584 	.word	0x20000584

080054a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80054a8:	2300      	movs	r3, #0
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	e016      	b.n	80054dc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80054ae:	4910      	ldr	r1, [pc, #64]	; (80054f0 <clear_lock+0x50>)
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4613      	mov	r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d108      	bne.n	80054d6 <clear_lock+0x36>
 80054c4:	490a      	ldr	r1, [pc, #40]	; (80054f0 <clear_lock+0x50>)
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4613      	mov	r3, r2
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	4413      	add	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3301      	adds	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d9e5      	bls.n	80054ae <clear_lock+0xe>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20000584 	.word	0x20000584

080054f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005506:	2b00      	cmp	r3, #0
 8005508:	d038      	beq.n	800557c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005510:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	2301      	movs	r3, #1
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	f7ff fca7 	bl	8004e70 <disk_write>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
 800552c:	e026      	b.n	800557c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005546:	429a      	cmp	r2, r3
 8005548:	d218      	bcs.n	800557c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	e010      	b.n	8005576 <sync_window+0x82>
					wsect += fs->fsize;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4413      	add	r3, r2
 800555e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	2301      	movs	r3, #1
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	f7ff fc80 	bl	8004e70 <disk_write>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	3b01      	subs	r3, #1
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d8eb      	bhi.n	8005554 <sync_window+0x60>
					disk_write(fs->drv, fs->win.d8, wsect, 1);
				}
			}
		}
	}
	return res;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop

08005588 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d01b      	beq.n	80055da <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff ffa6 	bl	80054f4 <sync_window>
 80055a8:	4603      	mov	r3, r0
 80055aa:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d113      	bne.n	80055da <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	2301      	movs	r3, #1
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	f7ff fc37 	bl	8004e30 <disk_read>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80055c8:	f04f 33ff 	mov.w	r3, #4294967295
 80055cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80055da:	7bfb      	ldrb	r3, [r7, #15]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff ff81 	bl	80054f4 <sync_window>
 80055f2:	4603      	mov	r3, r0
 80055f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f040 8096 	bne.w	800572a <sync_fs+0x146>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005604:	2b03      	cmp	r3, #3
 8005606:	f040 8083 	bne.w	8005710 <sync_fs+0x12c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005610:	2b01      	cmp	r3, #1
 8005612:	d17d      	bne.n	8005710 <sync_fs+0x12c>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800561a:	2100      	movs	r1, #0
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff fd53 	bl	80050c8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2255      	movs	r2, #85	; 0x55
 8005626:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	22aa      	movs	r2, #170	; 0xaa
 800562e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2252      	movs	r2, #82	; 0x52
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2252      	movs	r2, #82	; 0x52
 800563c:	705a      	strb	r2, [r3, #1]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2261      	movs	r2, #97	; 0x61
 8005642:	709a      	strb	r2, [r3, #2]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2241      	movs	r2, #65	; 0x41
 8005648:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2272      	movs	r2, #114	; 0x72
 800564e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2272      	movs	r2, #114	; 0x72
 8005656:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2241      	movs	r2, #65	; 0x41
 800565e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2261      	movs	r2, #97	; 0x61
 8005666:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005670:	b2da      	uxtb	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800567e:	121b      	asrs	r3, r3, #8
 8005680:	b2da      	uxtb	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800568e:	0c1b      	lsrs	r3, r3, #16
 8005690:	b2da      	uxtb	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800569e:	0e1b      	lsrs	r3, r3, #24
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80056bc:	121b      	asrs	r3, r3, #8
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80056cc:	0c1b      	lsrs	r3, r3, #16
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80056dc:	0e1b      	lsrs	r3, r3, #24
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005702:	2301      	movs	r3, #1
 8005704:	f7ff fbb4 	bl	8004e70 <disk_write>
			fs->fsi_flag = 0;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005716:	2200      	movs	r2, #0
 8005718:	2100      	movs	r1, #0
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fbc8 	bl	8004eb0 <disk_ioctl>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <sync_fs+0x146>
			res = FR_DISK_ERR;
 8005726:	2301      	movs	r3, #1
 8005728:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800572a:	7bfb      	ldrb	r3, [r7, #15]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	3b02      	subs	r3, #2
 8005742:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800574a:	1e9a      	subs	r2, r3, #2
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d801      	bhi.n	8005756 <clust2sect+0x22>
 8005752:	2300      	movs	r3, #0
 8005754:	e00a      	b.n	800576c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800575c:	461a      	mov	r2, r3
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	fb03 f202 	mul.w	r2, r3, r2
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800576a:	4413      	add	r3, r2
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d905      	bls.n	8005794 <get_fat+0x1c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d802      	bhi.n	800579a <get_fat+0x22>
		val = 1;	/* Internal error */
 8005794:	2301      	movs	r3, #1
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	e0a0      	b.n	80058dc <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800579a:	f04f 33ff 	mov.w	r3, #4294967295
 800579e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d044      	beq.n	8005834 <get_fat+0xbc>
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d063      	beq.n	8005876 <get_fat+0xfe>
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	f040 808a 	bne.w	80058c8 <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4413      	add	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	0a5b      	lsrs	r3, r3, #9
 80057cc:	4413      	add	r3, r2
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff fed9 	bl	8005588 <move_window>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d178      	bne.n	80058ce <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	613a      	str	r2, [r7, #16]
 80057e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	5cd3      	ldrb	r3, [r2, r3]
 80057ea:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	0a5b      	lsrs	r3, r3, #9
 80057f6:	4413      	add	r3, r2
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff fec4 	bl	8005588 <move_window>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d165      	bne.n	80058d2 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	5cd3      	ldrb	r3, [r2, r3]
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	461a      	mov	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <get_fat+0xb2>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	e002      	b.n	8005830 <get_fat+0xb8>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005830:	617b      	str	r3, [r7, #20]
			break;
 8005832:	e053      	b.n	80058dc <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	0a1b      	lsrs	r3, r3, #8
 800583e:	4413      	add	r3, r2
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff fea0 	bl	8005588 <move_window>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d143      	bne.n	80058d6 <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	4413      	add	r3, r2
 800585a:	60bb      	str	r3, [r7, #8]
			val = LD_WORD(p);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	3301      	adds	r3, #1
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	b21a      	sxth	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	b21b      	sxth	r3, r3
 800586c:	4313      	orrs	r3, r2
 800586e:	b21b      	sxth	r3, r3
 8005870:	b29b      	uxth	r3, r3
 8005872:	617b      	str	r3, [r7, #20]
			break;
 8005874:	e032      	b.n	80058dc <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	09db      	lsrs	r3, r3, #7
 8005880:	4413      	add	r3, r2
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fe7f 	bl	8005588 <move_window>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d124      	bne.n	80058da <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	4413      	add	r3, r2
 800589c:	60bb      	str	r3, [r7, #8]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	3303      	adds	r3, #3
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	061a      	lsls	r2, r3, #24
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	3302      	adds	r3, #2
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	041b      	lsls	r3, r3, #16
 80058ae:	4313      	orrs	r3, r2
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	3201      	adds	r2, #1
 80058b4:	7812      	ldrb	r2, [r2, #0]
 80058b6:	0212      	lsls	r2, r2, #8
 80058b8:	4313      	orrs	r3, r2
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	7812      	ldrb	r2, [r2, #0]
 80058be:	4313      	orrs	r3, r2
 80058c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80058c4:	617b      	str	r3, [r7, #20]
			break;
 80058c6:	e009      	b.n	80058dc <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 80058c8:	2301      	movs	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	e006      	b.n	80058dc <get_fat+0x164>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058ce:	bf00      	nop
 80058d0:	e004      	b.n	80058dc <get_fat+0x164>
			wc = fs->win.d8[bc++ % SS(fs)];
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058d2:	bf00      	nop
 80058d4:	e002      	b.n	80058dc <get_fat+0x164>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80058d6:	bf00      	nop
 80058d8:	e000      	b.n	80058dc <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
			val = LD_WORD(p);
			break;

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80058da:	bf00      	nop
		default:
			val = 1;	/* Internal error */
		}
	}

	return val;
 80058dc:	697b      	ldr	r3, [r7, #20]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop

080058e8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d905      	bls.n	8005906 <put_fat+0x1e>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	429a      	cmp	r2, r3
 8005904:	d802      	bhi.n	800590c <put_fat+0x24>
		res = FR_INT_ERR;
 8005906:	2302      	movs	r3, #2
 8005908:	77fb      	strb	r3, [r7, #31]
 800590a:	e0f1      	b.n	8005af0 <put_fat+0x208>

	} else {
		switch (fs->fs_type) {
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005912:	2b02      	cmp	r3, #2
 8005914:	d076      	beq.n	8005a04 <put_fat+0x11c>
 8005916:	2b03      	cmp	r3, #3
 8005918:	f000 8099 	beq.w	8005a4e <put_fat+0x166>
 800591c:	2b01      	cmp	r3, #1
 800591e:	f040 80dd 	bne.w	8005adc <put_fat+0x1f4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	085b      	lsrs	r3, r3, #1
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4413      	add	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	0a5b      	lsrs	r3, r3, #9
 800593a:	4413      	add	r3, r2
 800593c:	4619      	mov	r1, r3
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7ff fe22 	bl	8005588 <move_window>
 8005944:	4603      	mov	r3, r0
 8005946:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005948:	7ffb      	ldrb	r3, [r7, #31]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 80c9 	bne.w	8005ae2 <put_fat+0x1fa>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	61ba      	str	r2, [r7, #24]
 8005956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00f      	beq.n	800598a <put_fat+0xa2>
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	b25b      	sxtb	r3, r3
 8005970:	f003 030f 	and.w	r3, r3, #15
 8005974:	b25a      	sxtb	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	b25b      	sxtb	r3, r3
 800597c:	f023 030f 	bic.w	r3, r3, #15
 8005980:	b25b      	sxtb	r3, r3
 8005982:	4313      	orrs	r3, r2
 8005984:	b25b      	sxtb	r3, r3
 8005986:	b2db      	uxtb	r3, r3
 8005988:	e001      	b.n	800598e <put_fat+0xa6>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	0a5b      	lsrs	r3, r3, #9
 80059a4:	4413      	add	r3, r2
 80059a6:	4619      	mov	r1, r3
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f7ff fded 	bl	8005588 <move_window>
 80059ae:	4603      	mov	r3, r0
 80059b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059b2:	7ffb      	ldrb	r3, [r7, #31]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f040 8096 	bne.w	8005ae6 <put_fat+0x1fe>
			p = &fs->win.d8[bc % SS(fs)];
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <put_fat+0xf0>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	091b      	lsrs	r3, r3, #4
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	e00e      	b.n	80059f6 <put_fat+0x10e>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	b25b      	sxtb	r3, r3
 80059de:	f023 030f 	bic.w	r3, r3, #15
 80059e2:	b25a      	sxtb	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	0a1b      	lsrs	r3, r3, #8
 80059e8:	b25b      	sxtb	r3, r3
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	b25b      	sxtb	r3, r3
 80059f0:	4313      	orrs	r3, r2
 80059f2:	b25b      	sxtb	r3, r3
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005a02:	e075      	b.n	8005af0 <put_fat+0x208>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	0a1b      	lsrs	r3, r3, #8
 8005a0e:	4413      	add	r3, r2
 8005a10:	4619      	mov	r1, r3
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7ff fdb8 	bl	8005588 <move_window>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a1c:	7ffb      	ldrb	r3, [r7, #31]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d163      	bne.n	8005aea <put_fat+0x202>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	1212      	asrs	r2, r2, #8
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005a4c:	e050      	b.n	8005af0 <put_fat+0x208>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	09db      	lsrs	r3, r3, #7
 8005a58:	4413      	add	r3, r2
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f7ff fd93 	bl	8005588 <move_window>
 8005a62:	4603      	mov	r3, r0
 8005a64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a66:	7ffb      	ldrb	r3, [r7, #31]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d140      	bne.n	8005aee <put_fat+0x206>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	3303      	adds	r3, #3
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	061a      	lsls	r2, r3, #24
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	3302      	adds	r3, #2
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	041b      	lsls	r3, r3, #16
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	3201      	adds	r2, #1
 8005a90:	7812      	ldrb	r2, [r2, #0]
 8005a92:	0212      	lsls	r2, r2, #8
 8005a94:	4313      	orrs	r3, r2
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	7812      	ldrb	r2, [r2, #0]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	1212      	asrs	r2, r2, #8
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	3302      	adds	r3, #2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	0c12      	lsrs	r2, r2, #16
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	3303      	adds	r3, #3
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	0e12      	lsrs	r2, r2, #24
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005ada:	e009      	b.n	8005af0 <put_fat+0x208>

		default :
			res = FR_INT_ERR;
 8005adc:	2302      	movs	r3, #2
 8005ade:	77fb      	strb	r3, [r7, #31]
 8005ae0:	e006      	b.n	8005af0 <put_fat+0x208>
	} else {
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
 8005ae2:	bf00      	nop
 8005ae4:	e004      	b.n	8005af0 <put_fat+0x208>
			p = &fs->win.d8[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
 8005ae6:	bf00      	nop
 8005ae8:	e002      	b.n	8005af0 <put_fat+0x208>
			fs->wflag = 1;
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
 8005aea:	bf00      	nop
 8005aec:	e000      	b.n	8005af0 <put_fat+0x208>
			fs->wflag = 1;
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
			if (res != FR_OK) break;
 8005aee:	bf00      	nop
		default :
			res = FR_INT_ERR;
		}
	}

	return res;
 8005af0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop

08005afc <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d905      	bls.n	8005b18 <remove_chain+0x1c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d802      	bhi.n	8005b1e <remove_chain+0x22>
		res = FR_INT_ERR;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	73fb      	strb	r3, [r7, #15]
 8005b1c:	e043      	b.n	8005ba6 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005b22:	e036      	b.n	8005b92 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff fe26 	bl	8005778 <get_fat>
 8005b2c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d035      	beq.n	8005ba0 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d102      	bne.n	8005b40 <remove_chain+0x44>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	73fb      	strb	r3, [r7, #15]
 8005b3e:	e032      	b.n	8005ba6 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	d102      	bne.n	8005b4e <remove_chain+0x52>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
 8005b4c:	e02b      	b.n	8005ba6 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005b4e:	2200      	movs	r2, #0
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff fec8 	bl	80058e8 <put_fat>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d120      	bne.n	8005ba4 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6c:	d00f      	beq.n	8005b8e <remove_chain+0x92>
				fs->free_clust++;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	603b      	str	r3, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d8c2      	bhi.n	8005b24 <remove_chain+0x28>
 8005b9e:	e002      	b.n	8005ba6 <remove_chain+0xaa>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
 8005ba0:	bf00      	nop
 8005ba2:	e000      	b.n	8005ba6 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
 8005ba4:	bf00      	nop
#endif
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10f      	bne.n	8005be0 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005bc6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <create_chain+0x2a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d81c      	bhi.n	8005c14 <create_chain+0x64>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	e019      	b.n	8005c14 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff fdc8 	bl	8005778 <get_fat>
 8005be8:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d801      	bhi.n	8005bf4 <create_chain+0x44>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e076      	b.n	8005ce2 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d101      	bne.n	8005c00 <create_chain+0x50>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	e070      	b.n	8005ce2 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d901      	bls.n	8005c10 <create_chain+0x60>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	e068      	b.n	8005ce2 <create_chain+0x132>
		scl = clst;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d807      	bhi.n	8005c3a <create_chain+0x8a>
			ncl = 2;
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d901      	bls.n	8005c3a <create_chain+0x8a>
 8005c36:	2300      	movs	r3, #0
 8005c38:	e053      	b.n	8005ce2 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005c3a:	6979      	ldr	r1, [r7, #20]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff fd9b 	bl	8005778 <get_fat>
 8005c42:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00e      	beq.n	8005c68 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c50:	d002      	beq.n	8005c58 <create_chain+0xa8>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <create_chain+0xac>
			return cs;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	e042      	b.n	8005ce2 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d1d9      	bne.n	8005c18 <create_chain+0x68>
 8005c64:	2300      	movs	r3, #0
 8005c66:	e03c      	b.n	8005ce2 <create_chain+0x132>
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
 8005c68:	bf00      	nop
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005c6a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005c6e:	6979      	ldr	r1, [r7, #20]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff fe39 	bl	80058e8 <put_fat>
 8005c76:	4603      	mov	r3, r0
 8005c78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <create_chain+0xe4>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d006      	beq.n	8005c94 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff fe2c 	bl	80058e8 <put_fat>
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d11a      	bne.n	8005cd0 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d018      	beq.n	8005ce0 <create_chain+0x130>
			fs->free_clust--;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005cb4:	1e5a      	subs	r2, r3, #1
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005cc2:	f043 0301 	orr.w	r3, r3, #1
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8005cce:	e007      	b.n	8005ce0 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d102      	bne.n	8005cdc <create_chain+0x12c>
 8005cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cda:	e000      	b.n	8005cde <create_chain+0x12e>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005ce0:	697b      	ldr	r3, [r7, #20]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop

08005cec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	0a5b      	lsrs	r3, r3, #9
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005d0a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d12:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1d1a      	adds	r2, r3, #4
 8005d18:	613a      	str	r2, [r7, #16]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <clmt_clust+0x3c>
 8005d24:	2300      	movs	r3, #0
 8005d26:	e010      	b.n	8005d4a <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d307      	bcc.n	8005d40 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	613b      	str	r3, [r7, #16]
	}
 8005d3e:	e7e9      	b.n	8005d14 <clmt_clust+0x28>
	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (!ncl) return 0;		/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
 8005d40:	bf00      	nop
		cl -= ncl; tbl++;		/* Next fragment */
	}
	return cl + *tbl;	/* Return the cluster number */
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	4413      	add	r3, r2
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop

08005d58 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005d72:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d007      	beq.n	8005d8a <dir_sdi+0x32>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d801      	bhi.n	8005d8e <dir_sdi+0x36>
		return FR_INT_ERR;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e074      	b.n	8005e78 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10c      	bne.n	8005dae <dir_sdi+0x56>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d105      	bne.n	8005dae <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005da8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005dac:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d111      	bne.n	8005dd8 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dba:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d801      	bhi.n	8005dca <dir_sdi+0x72>
			return FR_INT_ERR;
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e056      	b.n	8005e78 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dd0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	e032      	b.n	8005e3e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dde:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005de6:	e01e      	b.n	8005e26 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dee:	6979      	ldr	r1, [r7, #20]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff fcc1 	bl	8005778 <get_fat>
 8005df6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d101      	bne.n	8005e04 <dir_sdi+0xac>
 8005e00:	2301      	movs	r3, #1
 8005e02:	e039      	b.n	8005e78 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d907      	bls.n	8005e1a <dir_sdi+0xc2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e10:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d801      	bhi.n	8005e1e <dir_sdi+0xc6>
				return FR_INT_ERR;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e02c      	b.n	8005e78 <dir_sdi+0x120>
			idx -= ic;
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	603b      	str	r3, [r7, #0]
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d2dc      	bcs.n	8005de8 <dir_sdi+0x90>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e34:	6979      	ldr	r1, [r7, #20]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff fc7c 	bl	8005734 <clust2sect>
 8005e3c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <dir_sdi+0xf8>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e013      	b.n	8005e78 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	091a      	lsrs	r2, r3, #4
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	441a      	add	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e64:	461a      	mov	r2, r3
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	f003 030f 	and.w	r3, r3, #15
 8005e6c:	015b      	lsls	r3, r3, #5
 8005e6e:	441a      	add	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005e80:	b590      	push	{r4, r7, lr}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8005e90:	3301      	adds	r3, #1
 8005e92:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <dir_next+0x26>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <dir_next+0x2a>
		return FR_NO_FILE;
 8005ea6:	2304      	movs	r3, #4
 8005ea8:	e0dd      	b.n	8006066 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f040 80c6 	bne.w	8006042 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10b      	bne.n	8005ee6 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ed4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	f200 80b0 	bhi.w	8006042 <dir_next+0x1c2>
				return FR_NO_FILE;
 8005ee2:	2304      	movs	r3, #4
 8005ee4:	e0bf      	b.n	8006066 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	091b      	lsrs	r3, r3, #4
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005ef0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005ef4:	3a01      	subs	r2, #1
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f040 80a2 	bne.w	8006042 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f7ff fc33 	bl	8005778 <get_fat>
 8005f12:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d801      	bhi.n	8005f1e <dir_next+0x9e>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e0a3      	b.n	8006066 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f24:	d101      	bne.n	8005f2a <dir_next+0xaa>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e09d      	b.n	8006066 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f30:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d874      	bhi.n	8006024 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <dir_next+0xc4>
 8005f40:	2304      	movs	r3, #4
 8005f42:	e090      	b.n	8006066 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f7ff fe2c 	bl	8005bb0 <create_chain>
 8005f58:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <dir_next+0xe4>
 8005f60:	2307      	movs	r3, #7
 8005f62:	e080      	b.n	8006066 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <dir_next+0xee>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e07b      	b.n	8006066 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f74:	d101      	bne.n	8005f7a <dir_next+0xfa>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e075      	b.n	8006066 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fab7 	bl	80054f4 <sync_window>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <dir_next+0x110>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e06a      	b.n	8006066 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff f893 	bl	80050c8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005fae:	6979      	ldr	r1, [r7, #20]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff fbbf 	bl	8005734 <clust2sect>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	e01b      	b.n	8005ffa <dir_next+0x17a>
						dp->fs->wflag = 1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fa8d 	bl	80054f4 <sync_window>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <dir_next+0x164>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e040      	b.n	8006066 <dir_next+0x1e6>
						dp->fs->winsect++;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005fea:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005fee:	3201      	adds	r2, #1
 8005ff0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006000:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006004:	461a      	mov	r2, r3
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	429a      	cmp	r2, r3
 800600a:	d8da      	bhi.n	8005fc2 <dir_next+0x142>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006018:	f8d2 122c 	ldr.w	r1, [r2, #556]	; 0x22c
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	1a8a      	subs	r2, r1, r2
 8006020:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006032:	6979      	ldr	r1, [r7, #20]
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff fb7d 	bl	8005734 <clust2sect>
 800603a:	4602      	mov	r2, r0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	b29a      	uxth	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006052:	461a      	mov	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	015b      	lsls	r3, r3, #5
 800605c:	441a      	add	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	bd90      	pop	{r4, r7, pc}
 800606e:	bf00      	nop

08006070 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800607a:	2100      	movs	r1, #0
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff fe6b 	bl	8005d58 <dir_sdi>
 8006082:	4603      	mov	r3, r0
 8006084:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d131      	bne.n	80060f0 <dir_alloc+0x80>
		n = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800609c:	4619      	mov	r1, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	f7ff fa72 	bl	8005588 <move_window>
 80060a4:	4603      	mov	r3, r0
 80060a6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d11f      	bne.n	80060ee <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2be5      	cmp	r3, #229	; 0xe5
 80060b8:	d005      	beq.n	80060c6 <dir_alloc+0x56>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d107      	bne.n	80060d6 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	3301      	adds	r3, #1
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d102      	bne.n	80060da <dir_alloc+0x6a>
 80060d4:	e00c      	b.n	80060f0 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80060da:	2101      	movs	r1, #1
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff fecf 	bl	8005e80 <dir_next>
 80060e2:	4603      	mov	r3, r0
 80060e4:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0d1      	beq.n	8006090 <dir_alloc+0x20>
 80060ec:	e000      	b.n	80060f0 <dir_alloc+0x80>
	res = dir_sdi(dp, 0);
	if (res == FR_OK) {
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
			if (res != FR_OK) break;
 80060ee:	bf00      	nop
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d101      	bne.n	80060fa <dir_alloc+0x8a>
 80060f6:	2307      	movs	r3, #7
 80060f8:	73fb      	strb	r3, [r7, #15]
	return res;
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	331b      	adds	r3, #27
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	b21a      	sxth	r2, r3
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	331a      	adds	r3, #26
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	b21b      	sxth	r3, r3
 8006120:	4313      	orrs	r3, r2
 8006122:	b21b      	sxth	r3, r3
 8006124:	b29b      	uxth	r3, r3
 8006126:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800612e:	2b03      	cmp	r3, #3
 8006130:	d10f      	bne.n	8006152 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	3315      	adds	r3, #21
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	b21a      	sxth	r2, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	3314      	adds	r3, #20
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	b21b      	sxth	r3, r3
 8006144:	4313      	orrs	r3, r2
 8006146:	b21b      	sxth	r3, r3
 8006148:	b29b      	uxth	r3, r3
 800614a:	041b      	lsls	r3, r3, #16
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

	return cl;
 8006152:	68fb      	ldr	r3, [r7, #12]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	331a      	adds	r3, #26
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	331b      	adds	r3, #27
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	1212      	asrs	r2, r2, #8
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3314      	adds	r3, #20
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	0c12      	lsrs	r2, r2, #16
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3315      	adds	r3, #21
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	0c12      	lsrs	r2, r2, #16
 8006194:	1212      	asrs	r2, r2, #8
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop

080061a8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80061b0:	2100      	movs	r1, #0
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fdd0 	bl	8005d58 <dir_sdi>
 80061b8:	4603      	mov	r3, r0
 80061ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <dir_find+0x1e>
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	e03b      	b.n	800623e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f7ff f9d7 	bl	8005588 <move_window>
 80061da:	4603      	mov	r3, r0
 80061dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d128      	bne.n	8006236 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061ea:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d102      	bne.n	80061fe <dir_find+0x56>
 80061f8:	2304      	movs	r3, #4
 80061fa:	75fb      	strb	r3, [r7, #23]
 80061fc:	e01e      	b.n	800623c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	330b      	adds	r3, #11
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <dir_find+0x7a>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006212:	220b      	movs	r2, #11
 8006214:	4619      	mov	r1, r3
 8006216:	6938      	ldr	r0, [r7, #16]
 8006218:	f7fe ff70 	bl	80050fc <mem_cmp>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00b      	beq.n	800623a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006222:	2100      	movs	r1, #0
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff fe2b 	bl	8005e80 <dir_next>
 800622a:	4603      	mov	r3, r0
 800622c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0c8      	beq.n	80061c6 <dir_find+0x1e>
 8006234:	e002      	b.n	800623c <dir_find+0x94>
#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
 8006236:	bf00      	nop
 8006238:	e000      	b.n	800623c <dir_find+0x94>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
 800623a:	bf00      	nop
#endif
		res = dir_next(dp, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
 800623c:	7dfb      	ldrb	r3, [r7, #23]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop

08006248 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006250:	2101      	movs	r1, #1
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff ff0c 	bl	8006070 <dir_alloc>
 8006258:	4603      	mov	r3, r0
 800625a:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d126      	bne.n	80062b0 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7ff f989 	bl	8005588 <move_window>
 8006276:	4603      	mov	r3, r0
 8006278:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d117      	bne.n	80062b0 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006286:	2220      	movs	r2, #32
 8006288:	2100      	movs	r1, #0
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe ff1c 	bl	80050c8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800629c:	220b      	movs	r2, #11
 800629e:	4619      	mov	r1, r3
 80062a0:	f7fe fef4 	bl	800508c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop

080062bc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	e002      	b.n	80062d4 <create_name+0x18>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3301      	adds	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b2f      	cmp	r3, #47	; 0x2f
 80062da:	d0f8      	beq.n	80062ce <create_name+0x12>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b5c      	cmp	r3, #92	; 0x5c
 80062e2:	d0f4      	beq.n	80062ce <create_name+0x12>
	sfn = dp->fn;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80062ea:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80062ec:	220b      	movs	r2, #11
 80062ee:	2120      	movs	r1, #32
 80062f0:	68b8      	ldr	r0, [r7, #8]
 80062f2:	f7fe fee9 	bl	80050c8 <mem_set>
	si = i = b = 0; ni = 8;
 80062f6:	2300      	movs	r3, #0
 80062f8:	77fb      	strb	r3, [r7, #31]
 80062fa:	2300      	movs	r3, #0
 80062fc:	613b      	str	r3, [r7, #16]
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	2308      	movs	r3, #8
 8006304:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	617a      	str	r2, [r7, #20]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006314:	7fbb      	ldrb	r3, [r7, #30]
 8006316:	2b20      	cmp	r3, #32
 8006318:	d953      	bls.n	80063c2 <create_name+0x106>
 800631a:	7fbb      	ldrb	r3, [r7, #30]
 800631c:	2b2f      	cmp	r3, #47	; 0x2f
 800631e:	d050      	beq.n	80063c2 <create_name+0x106>
 8006320:	7fbb      	ldrb	r3, [r7, #30]
 8006322:	2b5c      	cmp	r3, #92	; 0x5c
 8006324:	d04d      	beq.n	80063c2 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8006326:	7fbb      	ldrb	r3, [r7, #30]
 8006328:	2b2e      	cmp	r3, #46	; 0x2e
 800632a:	d003      	beq.n	8006334 <create_name+0x78>
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	429a      	cmp	r2, r3
 8006332:	d30f      	bcc.n	8006354 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	2b08      	cmp	r3, #8
 8006338:	d102      	bne.n	8006340 <create_name+0x84>
 800633a:	7fbb      	ldrb	r3, [r7, #30]
 800633c:	2b2e      	cmp	r3, #46	; 0x2e
 800633e:	d001      	beq.n	8006344 <create_name+0x88>
 8006340:	2306      	movs	r3, #6
 8006342:	e073      	b.n	800642c <create_name+0x170>
			i = 8; ni = 11;
 8006344:	2308      	movs	r3, #8
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	230b      	movs	r3, #11
 800634a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800634c:	7ffb      	ldrb	r3, [r7, #31]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	77fb      	strb	r3, [r7, #31]
 8006352:	e035      	b.n	80063c0 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006354:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006358:	2b00      	cmp	r3, #0
 800635a:	da08      	bge.n	800636e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800635c:	7ffb      	ldrb	r3, [r7, #31]
 800635e:	f043 0303 	orr.w	r3, r3, #3
 8006362:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006364:	7fbb      	ldrb	r3, [r7, #30]
 8006366:	3b80      	subs	r3, #128	; 0x80
 8006368:	4a32      	ldr	r2, [pc, #200]	; (8006434 <create_name+0x178>)
 800636a:	5cd3      	ldrb	r3, [r2, r3]
 800636c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800636e:	7fbb      	ldrb	r3, [r7, #30]
 8006370:	4619      	mov	r1, r3
 8006372:	4831      	ldr	r0, [pc, #196]	; (8006438 <create_name+0x17c>)
 8006374:	f7fe feea 	bl	800514c <chk_chr>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <create_name+0xc6>
				return FR_INVALID_NAME;
 800637e:	2306      	movs	r3, #6
 8006380:	e054      	b.n	800642c <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8006382:	7fbb      	ldrb	r3, [r7, #30]
 8006384:	2b40      	cmp	r3, #64	; 0x40
 8006386:	d907      	bls.n	8006398 <create_name+0xdc>
 8006388:	7fbb      	ldrb	r3, [r7, #30]
 800638a:	2b5a      	cmp	r3, #90	; 0x5a
 800638c:	d804      	bhi.n	8006398 <create_name+0xdc>
				b |= 2;
 800638e:	7ffb      	ldrb	r3, [r7, #31]
 8006390:	f043 0302 	orr.w	r3, r3, #2
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e00c      	b.n	80063b2 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8006398:	7fbb      	ldrb	r3, [r7, #30]
 800639a:	2b60      	cmp	r3, #96	; 0x60
 800639c:	d909      	bls.n	80063b2 <create_name+0xf6>
 800639e:	7fbb      	ldrb	r3, [r7, #30]
 80063a0:	2b7a      	cmp	r3, #122	; 0x7a
 80063a2:	d806      	bhi.n	80063b2 <create_name+0xf6>
					b |= 1; c -= 0x20;
 80063a4:	7ffb      	ldrb	r3, [r7, #31]
 80063a6:	f043 0301 	orr.w	r3, r3, #1
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	7fbb      	ldrb	r3, [r7, #30]
 80063ae:	3b20      	subs	r3, #32
 80063b0:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	613a      	str	r2, [r7, #16]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	4413      	add	r3, r2
 80063bc:	7fba      	ldrb	r2, [r7, #30]
 80063be:	701a      	strb	r2, [r3, #0]
		}
	}
 80063c0:	e7a1      	b.n	8006306 <create_name+0x4a>
	*path = &p[si];						/* Return pointer to the next segment */
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	441a      	add	r2, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80063cc:	7fbb      	ldrb	r3, [r7, #30]
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d801      	bhi.n	80063d6 <create_name+0x11a>
 80063d2:	2304      	movs	r3, #4
 80063d4:	e000      	b.n	80063d8 <create_name+0x11c>
 80063d6:	2300      	movs	r3, #0
 80063d8:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <create_name+0x128>
 80063e0:	2306      	movs	r3, #6
 80063e2:	e023      	b.n	800642c <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2be5      	cmp	r3, #229	; 0xe5
 80063ea:	d102      	bne.n	80063f2 <create_name+0x136>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2205      	movs	r2, #5
 80063f0:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d102      	bne.n	80063fe <create_name+0x142>
 80063f8:	7ffb      	ldrb	r3, [r7, #31]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80063fe:	7ffb      	ldrb	r3, [r7, #31]
 8006400:	f003 0303 	and.w	r3, r3, #3
 8006404:	2b01      	cmp	r3, #1
 8006406:	d103      	bne.n	8006410 <create_name+0x154>
 8006408:	7fbb      	ldrb	r3, [r7, #30]
 800640a:	f043 0310 	orr.w	r3, r3, #16
 800640e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8006410:	7ffb      	ldrb	r3, [r7, #31]
 8006412:	f003 030c 	and.w	r3, r3, #12
 8006416:	2b04      	cmp	r3, #4
 8006418:	d103      	bne.n	8006422 <create_name+0x166>
 800641a:	7fbb      	ldrb	r3, [r7, #30]
 800641c:	f043 0308 	orr.w	r3, r3, #8
 8006420:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	330b      	adds	r3, #11
 8006426:	7fba      	ldrb	r2, [r7, #30]
 8006428:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800642a:	2300      	movs	r3, #0
#endif
}
 800642c:	4618      	mov	r0, r3
 800642e:	3720      	adds	r7, #32
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	08008c90 	.word	0x08008c90
 8006438:	08008bf8 	.word	0x08008bf8

0800643c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b2f      	cmp	r3, #47	; 0x2f
 800644c:	d003      	beq.n	8006456 <follow_path+0x1a>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b5c      	cmp	r3, #92	; 0x5c
 8006454:	d102      	bne.n	800645c <follow_path+0x20>
		path++;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b1f      	cmp	r3, #31
 800646a:	d80a      	bhi.n	8006482 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800646c:	2100      	movs	r1, #0
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff fc72 	bl	8005d58 <dir_sdi>
 8006474:	4603      	mov	r3, r0
 8006476:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006480:	e045      	b.n	800650e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006482:	463b      	mov	r3, r7
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff ff18 	bl	80062bc <create_name>
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d136      	bne.n	8006504 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff fe86 	bl	80061a8 <dir_find>
 800649c:	4603      	mov	r3, r0
 800649e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80064a6:	7adb      	ldrb	r3, [r3, #11]
 80064a8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d128      	bne.n	8006508 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80064b6:	7bbb      	ldrb	r3, [r7, #14]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d123      	bne.n	8006508 <follow_path+0xcc>
 80064c0:	2305      	movs	r3, #5
 80064c2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80064c4:	e020      	b.n	8006508 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80064c6:	7bbb      	ldrb	r3, [r7, #14]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d11d      	bne.n	800650c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064d6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	330b      	adds	r3, #11
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d102      	bne.n	80064ec <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80064e6:	2305      	movs	r3, #5
 80064e8:	73fb      	strb	r3, [r7, #15]
 80064ea:	e010      	b.n	800650e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff fe05 	bl	8006104 <ld_clust>
 80064fa:	4602      	mov	r2, r0
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		}
 8006502:	e7be      	b.n	8006482 <follow_path+0x46>
		res = dir_sdi(dp, 0);
		dp->dir = 0;
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
 8006504:	bf00      	nop
 8006506:	e002      	b.n	800650e <follow_path+0xd2>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8006508:	bf00      	nop
 800650a:	e000      	b.n	800650e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800650c:	bf00      	nop
			}
			dp->sclust = ld_clust(dp->fs, dir);
		}
	}

	return res;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006520:	f04f 33ff 	mov.w	r3, #4294967295
 8006524:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d031      	beq.n	8006592 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	e002      	b.n	800653c <get_ldnumber+0x24>
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	3301      	adds	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b20      	cmp	r3, #32
 8006542:	d903      	bls.n	800654c <get_ldnumber+0x34>
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b3a      	cmp	r3, #58	; 0x3a
 800654a:	d1f4      	bne.n	8006536 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b3a      	cmp	r3, #58	; 0x3a
 8006552:	d11c      	bne.n	800658e <get_ldnumber+0x76>
			tp = *path;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	60fa      	str	r2, [r7, #12]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	3b30      	subs	r3, #48	; 0x30
 8006564:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b09      	cmp	r3, #9
 800656a:	d80e      	bhi.n	800658a <get_ldnumber+0x72>
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	429a      	cmp	r2, r3
 8006572:	d10a      	bne.n	800658a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d107      	bne.n	800658a <get_ldnumber+0x72>
					vol = (int)i;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	3301      	adds	r3, #1
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	e002      	b.n	8006594 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006592:	693b      	ldr	r3, [r7, #16]
}
 8006594:	4618      	mov	r0, r3
 8006596:	371c      	adds	r7, #28
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f04f 32ff 	mov.w	r2, #4294967295
 80065b8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fe ffe2 	bl	8005588 <move_window>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <check_fs+0x2e>
		return 3;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e04a      	b.n	8006664 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80065d4:	3301      	adds	r3, #1
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	021b      	lsls	r3, r3, #8
 80065da:	b21a      	sxth	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80065e2:	b21b      	sxth	r3, r3
 80065e4:	4313      	orrs	r3, r2
 80065e6:	b21b      	sxth	r3, r3
 80065e8:	4a20      	ldr	r2, [pc, #128]	; (800666c <check_fs+0xcc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d001      	beq.n	80065f2 <check_fs+0x52>
		return 2;
 80065ee:	2302      	movs	r3, #2
 80065f0:	e038      	b.n	8006664 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3336      	adds	r3, #54	; 0x36
 80065f6:	3303      	adds	r3, #3
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	061a      	lsls	r2, r3, #24
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3336      	adds	r3, #54	; 0x36
 8006600:	3302      	adds	r3, #2
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	041b      	lsls	r3, r3, #16
 8006606:	4313      	orrs	r3, r2
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	3236      	adds	r2, #54	; 0x36
 800660c:	3201      	adds	r2, #1
 800660e:	7812      	ldrb	r2, [r2, #0]
 8006610:	0212      	lsls	r2, r2, #8
 8006612:	4313      	orrs	r3, r2
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800661a:	4313      	orrs	r3, r2
 800661c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006620:	4a13      	ldr	r2, [pc, #76]	; (8006670 <check_fs+0xd0>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d101      	bne.n	800662a <check_fs+0x8a>
		return 0;
 8006626:	2300      	movs	r3, #0
 8006628:	e01c      	b.n	8006664 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3352      	adds	r3, #82	; 0x52
 800662e:	3303      	adds	r3, #3
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	061a      	lsls	r2, r3, #24
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3352      	adds	r3, #82	; 0x52
 8006638:	3302      	adds	r3, #2
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	041b      	lsls	r3, r3, #16
 800663e:	4313      	orrs	r3, r2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	3252      	adds	r2, #82	; 0x52
 8006644:	3201      	adds	r2, #1
 8006646:	7812      	ldrb	r2, [r2, #0]
 8006648:	0212      	lsls	r2, r2, #8
 800664a:	4313      	orrs	r3, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006652:	4313      	orrs	r3, r2
 8006654:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006658:	4a05      	ldr	r2, [pc, #20]	; (8006670 <check_fs+0xd0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d101      	bne.n	8006662 <check_fs+0xc2>
		return 0;
 800665e:	2300      	movs	r3, #0
 8006660:	e000      	b.n	8006664 <check_fs+0xc4>

	return 1;
 8006662:	2301      	movs	r3, #1
}
 8006664:	4618      	mov	r0, r3
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	ffffaa55 	.word	0xffffaa55
 8006670:	00544146 	.word	0x00544146

08006674 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b096      	sub	sp, #88	; 0x58
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	4613      	mov	r3, r2
 8006680:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006688:	68b8      	ldr	r0, [r7, #8]
 800668a:	f7ff ff45 	bl	8006518 <get_ldnumber>
 800668e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006692:	2b00      	cmp	r3, #0
 8006694:	da01      	bge.n	800669a <find_volume+0x26>
 8006696:	230b      	movs	r3, #11
 8006698:	e2aa      	b.n	8006bf0 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800669a:	4a9e      	ldr	r2, [pc, #632]	; (8006914 <find_volume+0x2a0>)
 800669c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <find_volume+0x3a>
 80066aa:	230c      	movs	r3, #12
 80066ac:	e2a0      	b.n	8006bf0 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066b2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d01b      	beq.n	80066f6 <find_volume+0x82>
		stat = disk_status(fs->drv);
 80066be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe fb73 	bl	8004db0 <disk_status>
 80066ca:	4603      	mov	r3, r0
 80066cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80066d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10c      	bne.n	80066f6 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d007      	beq.n	80066f2 <find_volume+0x7e>
 80066e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80066ee:	230a      	movs	r3, #10
 80066f0:	e27e      	b.n	8006bf0 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 80066f2:	2300      	movs	r3, #0
 80066f4:	e27c      	b.n	8006bf0 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80066fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006700:	b2da      	uxtb	r2, r3
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800670e:	4618      	mov	r0, r3
 8006710:	f7fe fb68 	bl	8004de4 <disk_initialize>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800671a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006726:	2303      	movs	r3, #3
 8006728:	e262      	b.n	8006bf0 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <find_volume+0xcc>
 8006730:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800673c:	230a      	movs	r3, #10
 800673e:	e257      	b.n	8006bf0 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006744:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006746:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006748:	f7ff ff2a 	bl	80065a0 <check_fs>
 800674c:	4603      	mov	r3, r0
 800674e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006752:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006756:	2b01      	cmp	r3, #1
 8006758:	d155      	bne.n	8006806 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800675a:	2300      	movs	r3, #0
 800675c:	643b      	str	r3, [r7, #64]	; 0x40
 800675e:	e029      	b.n	80067b4 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800676a:	4413      	add	r3, r2
 800676c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	3304      	adds	r3, #4
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d012      	beq.n	800679e <find_volume+0x12a>
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	330b      	adds	r3, #11
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	061a      	lsls	r2, r3, #24
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	330a      	adds	r3, #10
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	041b      	lsls	r3, r3, #16
 8006788:	4313      	orrs	r3, r2
 800678a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800678c:	3209      	adds	r2, #9
 800678e:	7812      	ldrb	r2, [r2, #0]
 8006790:	0212      	lsls	r2, r2, #8
 8006792:	4313      	orrs	r3, r2
 8006794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006796:	3208      	adds	r2, #8
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	431a      	orrs	r2, r3
 800679c:	e000      	b.n	80067a0 <find_volume+0x12c>
 800679e:	2200      	movs	r2, #0
 80067a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80067a8:	440b      	add	r3, r1
 80067aa:	f843 2c44 	str.w	r2, [r3, #-68]
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80067ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b0:	3301      	adds	r3, #1
 80067b2:	643b      	str	r3, [r7, #64]	; 0x40
 80067b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d9d2      	bls.n	8006760 <find_volume+0xec>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80067ba:	2300      	movs	r3, #0
 80067bc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80067be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <find_volume+0x156>
 80067c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c6:	3b01      	subs	r3, #1
 80067c8:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80067ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80067d2:	4413      	add	r3, r2
 80067d4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80067d8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80067da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <find_volume+0x178>
 80067e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067e4:	f7ff fedc 	bl	80065a0 <check_fs>
 80067e8:	4603      	mov	r3, r0
 80067ea:	e000      	b.n	80067ee <find_volume+0x17a>
 80067ec:	2302      	movs	r3, #2
 80067ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80067f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <find_volume+0x192>
 80067fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067fc:	3301      	adds	r3, #1
 80067fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006802:	2b03      	cmp	r3, #3
 8006804:	d9e1      	bls.n	80067ca <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006806:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800680a:	2b03      	cmp	r3, #3
 800680c:	d101      	bne.n	8006812 <find_volume+0x19e>
 800680e:	2301      	movs	r3, #1
 8006810:	e1ee      	b.n	8006bf0 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006812:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <find_volume+0x1aa>
 800681a:	230d      	movs	r3, #13
 800681c:	e1e8      	b.n	8006bf0 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	7b1b      	ldrb	r3, [r3, #12]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	b21a      	sxth	r2, r3
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	7adb      	ldrb	r3, [r3, #11]
 800682a:	b21b      	sxth	r3, r3
 800682c:	4313      	orrs	r3, r2
 800682e:	b21b      	sxth	r3, r3
 8006830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006834:	d001      	beq.n	800683a <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8006836:	230d      	movs	r3, #13
 8006838:	e1da      	b.n	8006bf0 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	7ddb      	ldrb	r3, [r3, #23]
 800683e:	021b      	lsls	r3, r3, #8
 8006840:	b21a      	sxth	r2, r3
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	7d9b      	ldrb	r3, [r3, #22]
 8006846:	b21b      	sxth	r3, r3
 8006848:	4313      	orrs	r3, r2
 800684a:	b21b      	sxth	r3, r3
 800684c:	b29b      	uxth	r3, r3
 800684e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d112      	bne.n	800687c <find_volume+0x208>
 8006856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006858:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800685c:	061a      	lsls	r2, r3, #24
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006864:	041b      	lsls	r3, r3, #16
 8006866:	4313      	orrs	r3, r2
 8006868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800686a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800686e:	0212      	lsls	r2, r2, #8
 8006870:	4313      	orrs	r3, r2
 8006872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006874:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006878:	4313      	orrs	r3, r2
 800687a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006880:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006886:	7c1a      	ldrb	r2, [r3, #16]
 8006888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006894:	2b01      	cmp	r3, #1
 8006896:	d006      	beq.n	80068a6 <find_volume+0x232>
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d001      	beq.n	80068a6 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 80068a2:	230d      	movs	r3, #13
 80068a4:	e1a4      	b.n	8006bf0 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80068a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80068ac:	461a      	mov	r2, r3
 80068ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b0:	fb02 f303 	mul.w	r3, r2, r3
 80068b4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	7b5a      	ldrb	r2, [r3, #13]
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <find_volume+0x26c>
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80068d0:	461a      	mov	r2, r3
 80068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80068d8:	3b01      	subs	r3, #1
 80068da:	4013      	ands	r3, r2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 80068e0:	230d      	movs	r3, #13
 80068e2:	e185      	b.n	8006bf0 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	7c9b      	ldrb	r3, [r3, #18]
 80068e8:	021b      	lsls	r3, r3, #8
 80068ea:	b21a      	sxth	r2, r3
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	7c5b      	ldrb	r3, [r3, #17]
 80068f0:	b21b      	sxth	r3, r3
 80068f2:	4313      	orrs	r3, r2
 80068f4:	b21b      	sxth	r3, r3
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 800690e:	230d      	movs	r3, #13
 8006910:	e16e      	b.n	8006bf0 <find_volume+0x57c>
 8006912:	bf00      	nop
 8006914:	2000057c 	.word	0x2000057c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	7d1b      	ldrb	r3, [r3, #20]
 800691c:	021b      	lsls	r3, r3, #8
 800691e:	b21a      	sxth	r2, r3
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	7cdb      	ldrb	r3, [r3, #19]
 8006924:	b21b      	sxth	r3, r3
 8006926:	4313      	orrs	r3, r2
 8006928:	b21b      	sxth	r3, r3
 800692a:	b29b      	uxth	r3, r3
 800692c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800692e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006930:	2b00      	cmp	r3, #0
 8006932:	d112      	bne.n	800695a <find_volume+0x2e6>
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800693a:	061a      	lsls	r2, r3, #24
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006942:	041b      	lsls	r3, r3, #16
 8006944:	4313      	orrs	r3, r2
 8006946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006948:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800694c:	0212      	lsls	r2, r2, #8
 800694e:	4313      	orrs	r3, r2
 8006950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006952:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006956:	4313      	orrs	r3, r2
 8006958:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800695a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695c:	7bdb      	ldrb	r3, [r3, #15]
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	b21a      	sxth	r2, r3
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	7b9b      	ldrb	r3, [r3, #14]
 8006966:	b21b      	sxth	r3, r3
 8006968:	4313      	orrs	r3, r2
 800696a:	b21b      	sxth	r3, r3
 800696c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800696e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <find_volume+0x304>
 8006974:	230d      	movs	r3, #13
 8006976:	e13b      	b.n	8006bf0 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006978:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800697a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697c:	4413      	add	r3, r2
 800697e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006980:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8006984:	0912      	lsrs	r2, r2, #4
 8006986:	b292      	uxth	r2, r2
 8006988:	4413      	add	r3, r2
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800698c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	429a      	cmp	r2, r3
 8006992:	d201      	bcs.n	8006998 <find_volume+0x324>
 8006994:	230d      	movs	r3, #13
 8006996:	e12b      	b.n	8006bf0 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069a0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80069a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <find_volume+0x340>
 80069b0:	230d      	movs	r3, #13
 80069b2:	e11d      	b.n	8006bf0 <find_volume+0x57c>
	fmt = FS_FAT12;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d902      	bls.n	80069ca <find_volume+0x356>
 80069c4:	2302      	movs	r3, #2
 80069c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d902      	bls.n	80069da <find_volume+0x366>
 80069d4:	2303      	movs	r3, #3
 80069d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	1c9a      	adds	r2, r3, #2
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80069ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f0:	441a      	add	r2, r3
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80069f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	441a      	add	r2, r3
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8006a04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d121      	bne.n	8006a50 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <find_volume+0x3a6>
 8006a16:	230d      	movs	r3, #13
 8006a18:	e0ea      	b.n	8006bf0 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006a20:	061a      	lsls	r2, r3, #24
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006a28:	041b      	lsls	r3, r3, #16
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a2e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006a32:	0212      	lsls	r2, r2, #8
 8006a34:	4313      	orrs	r3, r2
 8006a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a38:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a4e:	e025      	b.n	8006a9c <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <find_volume+0x3ea>
 8006a5a:	230d      	movs	r3, #13
 8006a5c:	e0c8      	b.n	8006bf0 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a66:	441a      	add	r2, r3
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d104      	bne.n	8006a80 <find_volume+0x40c>
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	e00c      	b.n	8006a9a <find_volume+0x426>
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006a86:	4613      	mov	r3, r2
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	4413      	add	r3, r2
 8006a8c:	085a      	lsrs	r2, r3, #1
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	4413      	add	r3, r2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006a9a:	647b      	str	r3, [r7, #68]	; 0x44
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aa4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006aa8:	0a5b      	lsrs	r3, r3, #9
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d201      	bcs.n	8006ab2 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 8006aae:	230d      	movs	r3, #13
 8006ab0:	e09e      	b.n	8006bf0 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8006abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	2280      	movs	r2, #128	; 0x80
 8006acc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d177      	bne.n	8006bc8 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	b21a      	sxth	r2, r3
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ae8:	b21b      	sxth	r3, r3
 8006aea:	4313      	orrs	r3, r2
 8006aec:	b21b      	sxth	r3, r3
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d16a      	bne.n	8006bc8 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af4:	3301      	adds	r3, #1
 8006af6:	4619      	mov	r1, r3
 8006af8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006afa:	f7fe fd45 	bl	8005588 <move_window>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d161      	bne.n	8006bc8 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8006b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	b21a      	sxth	r2, r3
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006b1c:	b21b      	sxth	r3, r3
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	b21b      	sxth	r3, r3
 8006b22:	4a35      	ldr	r2, [pc, #212]	; (8006bf8 <find_volume+0x584>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d14f      	bne.n	8006bc8 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	78db      	ldrb	r3, [r3, #3]
 8006b2c:	061a      	lsls	r2, r3, #24
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	789b      	ldrb	r3, [r3, #2]
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	4313      	orrs	r3, r2
 8006b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b38:	7852      	ldrb	r2, [r2, #1]
 8006b3a:	0212      	lsls	r2, r2, #8
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b40:	7812      	ldrb	r2, [r2, #0]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	4a2d      	ldr	r2, [pc, #180]	; (8006bfc <find_volume+0x588>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d13e      	bne.n	8006bc8 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8006b50:	061a      	lsls	r2, r3, #24
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006b58:	041b      	lsls	r3, r3, #16
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b5e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8006b62:	0212      	lsls	r2, r2, #8
 8006b64:	4313      	orrs	r3, r2
 8006b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b68:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	4a24      	ldr	r2, [pc, #144]	; (8006c00 <find_volume+0x58c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d129      	bne.n	8006bc8 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b76:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006b7a:	061a      	lsls	r2, r3, #24
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8006b82:	041b      	lsls	r3, r3, #16
 8006b84:	4313      	orrs	r3, r2
 8006b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b88:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006b8c:	0212      	lsls	r2, r2, #8
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b92:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006b96:	431a      	orrs	r2, r3
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba0:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006ba4:	061a      	lsls	r2, r3, #24
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006bac:	041b      	lsls	r3, r3, #16
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bb2:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006bb6:	0212      	lsls	r2, r2, #8
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bbc:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006bce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8006bd2:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <find_volume+0x590>)
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <find_volume+0x590>)
 8006bdc:	801a      	strh	r2, [r3, #0]
 8006bde:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <find_volume+0x590>)
 8006be0:	881a      	ldrh	r2, [r3, #0]
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006be8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bea:	f7fe fc59 	bl	80054a0 <clear_lock>
#endif

	return FR_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3758      	adds	r7, #88	; 0x58
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	ffffaa55 	.word	0xffffaa55
 8006bfc:	41615252 	.word	0x41615252
 8006c00:	61417272 	.word	0x61417272
 8006c04:	20000580 	.word	0x20000580

08006c08 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d022      	beq.n	8006c60 <validate+0x58>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01d      	beq.n	8006c60 <validate+0x58>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c2a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d016      	beq.n	8006c60 <validate+0x58>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c38:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d10c      	bne.n	8006c60 <validate+0x58>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c4c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fe f8ad 	bl	8004db0 <disk_status>
 8006c56:	4603      	mov	r3, r0
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8006c60:	2309      	movs	r3, #9
 8006c62:	e000      	b.n	8006c66 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop

08006c70 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	f107 030c 	add.w	r3, r7, #12
 8006c7c:	6018      	str	r0, [r3, #0]
 8006c7e:	f107 0308 	add.w	r3, r7, #8
 8006c82:	6019      	str	r1, [r3, #0]
 8006c84:	1dfb      	adds	r3, r7, #7
 8006c86:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006c88:	f107 030c 	add.w	r3, r7, #12
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <f_open+0x26>
 8006c92:	2309      	movs	r3, #9
 8006c94:	e1f0      	b.n	8007078 <f_open+0x408>
	fp->fs = 0;			/* Clear file object */
 8006c96:	f107 030c 	add.w	r3, r7, #12
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006ca2:	1dfb      	adds	r3, r7, #7
 8006ca4:	1dfa      	adds	r2, r7, #7
 8006ca6:	7812      	ldrb	r2, [r2, #0]
 8006ca8:	f002 021f 	and.w	r2, r2, #31
 8006cac:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006cae:	1dfb      	adds	r3, r7, #7
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	f023 0301 	bic.w	r3, r3, #1
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	f107 0108 	add.w	r1, r7, #8
 8006cbc:	f107 0320 	add.w	r3, r7, #32
 8006cc0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff fcd5 	bl	8006674 <find_volume>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006cd0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 81cd 	bne.w	8007074 <f_open+0x404>
		INIT_BUF(dj);
 8006cda:	f107 0320 	add.w	r3, r7, #32
 8006cde:	f107 0214 	add.w	r2, r7, #20
 8006ce2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8006ce6:	f107 0308 	add.w	r3, r7, #8
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	f107 0320 	add.w	r3, r7, #32
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fba2 	bl	800643c <follow_path>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8006cfe:	f107 0320 	add.w	r3, r7, #32
 8006d02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d06:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d0a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d11a      	bne.n	8006d48 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8006d12:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <f_open+0xb2>
				res = FR_INVALID_NAME;
 8006d1a:	2306      	movs	r3, #6
 8006d1c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006d20:	e012      	b.n	8006d48 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d22:	1dfb      	adds	r3, r7, #7
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	f023 0301 	bic.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	bf14      	ite	ne
 8006d2e:	2301      	movne	r3, #1
 8006d30:	2300      	moveq	r3, #0
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	f107 0320 	add.w	r3, r7, #32
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fe fa21 	bl	8005184 <chk_lock>
 8006d42:	4603      	mov	r3, r0
 8006d44:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d48:	1dfb      	adds	r3, r7, #7
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	f003 031c 	and.w	r3, r3, #28
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 80ca 	beq.w	8006eea <f_open+0x27a>
			if (res != FR_OK) {					/* No file, create new */
 8006d56:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d01f      	beq.n	8006d9e <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006d5e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d10e      	bne.n	8006d84 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006d66:	f7fe fa7b 	bl	8005260 <enq_lock>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d006      	beq.n	8006d7e <f_open+0x10e>
 8006d70:	f107 0320 	add.w	r3, r7, #32
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff fa67 	bl	8006248 <dir_register>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	e000      	b.n	8006d80 <f_open+0x110>
 8006d7e:	2312      	movs	r3, #18
 8006d80:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006d84:	1dfb      	adds	r3, r7, #7
 8006d86:	1dfa      	adds	r2, r7, #7
 8006d88:	7812      	ldrb	r2, [r2, #0]
 8006d8a:	f042 0208 	orr.w	r2, r2, #8
 8006d8e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8006d90:	f107 0320 	add.w	r3, r7, #32
 8006d94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d98:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006d9c:	e014      	b.n	8006dc8 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006d9e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006da2:	330b      	adds	r3, #11
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	f003 0311 	and.w	r3, r3, #17
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <f_open+0x146>
					res = FR_DENIED;
 8006dae:	2307      	movs	r3, #7
 8006db0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006db4:	e008      	b.n	8006dc8 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006db6:	1dfb      	adds	r3, r7, #7
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	f003 0304 	and.w	r3, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <f_open+0x158>
						res = FR_EXIST;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006dc8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f040 80ad 	bne.w	8006f2c <f_open+0x2bc>
 8006dd2:	1dfb      	adds	r3, r7, #7
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f003 0308 	and.w	r3, r3, #8
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 80a6 	beq.w	8006f2c <f_open+0x2bc>
				dw = GET_FATTIME();				/* Created time */
 8006de0:	f001 fb02 	bl	80083e8 <get_fattime>
 8006de4:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006de8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006dec:	330e      	adds	r3, #14
 8006dee:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006dfa:	330f      	adds	r3, #15
 8006dfc:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006e00:	1212      	asrs	r2, r2, #8
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006e0a:	3310      	adds	r3, #16
 8006e0c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006e10:	0c12      	lsrs	r2, r2, #16
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006e1a:	3311      	adds	r3, #17
 8006e1c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006e20:	0e12      	lsrs	r2, r2, #24
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006e26:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006e2a:	330b      	adds	r3, #11
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006e30:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006e34:	331c      	adds	r3, #28
 8006e36:	2200      	movs	r2, #0
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006e3e:	331d      	adds	r3, #29
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
 8006e44:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006e48:	331e      	adds	r3, #30
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006e52:	331f      	adds	r3, #31
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006e58:	f107 0320 	add.w	r3, r7, #32
 8006e5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e60:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff f94d 	bl	8006104 <ld_clust>
 8006e6a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8006e6e:	2100      	movs	r1, #0
 8006e70:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8006e74:	f7ff f974 	bl	8006160 <st_clust>
				dj.fs->wflag = 1;
 8006e78:	f107 0320 	add.w	r3, r7, #32
 8006e7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8006e86:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d04e      	beq.n	8006f2c <f_open+0x2bc>
					dw = dj.fs->winsect;
 8006e8e:	f107 0320 	add.w	r3, r7, #32
 8006e92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e96:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006e9a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8006e9e:	f107 0320 	add.w	r3, r7, #32
 8006ea2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ea6:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe fe26 	bl	8005afc <remove_chain>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8006eb6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d136      	bne.n	8006f2c <f_open+0x2bc>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006ebe:	f107 0320 	add.w	r3, r7, #32
 8006ec2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ec6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8006eca:	3a01      	subs	r2, #1
 8006ecc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8006ed0:	f107 0320 	add.w	r3, r7, #32
 8006ed4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ed8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fe fb53 	bl	8005588 <move_window>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006ee8:	e020      	b.n	8006f2c <f_open+0x2bc>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006eea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d11c      	bne.n	8006f2c <f_open+0x2bc>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006ef2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006ef6:	330b      	adds	r3, #11
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	f003 0310 	and.w	r3, r3, #16
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <f_open+0x29a>
					res = FR_NO_FILE;
 8006f02:	2304      	movs	r3, #4
 8006f04:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006f08:	e010      	b.n	8006f2c <f_open+0x2bc>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006f0a:	1dfb      	adds	r3, r7, #7
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <f_open+0x2bc>
 8006f16:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006f1a:	330b      	adds	r3, #11
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <f_open+0x2bc>
						res = FR_DENIED;
 8006f26:	2307      	movs	r3, #7
 8006f28:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8006f2c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d13d      	bne.n	8006fb0 <f_open+0x340>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006f34:	1dfb      	adds	r3, r7, #7
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <f_open+0x2dc>
				mode |= FA__WRITTEN;
 8006f40:	1dfb      	adds	r3, r7, #7
 8006f42:	1dfa      	adds	r2, r7, #7
 8006f44:	7812      	ldrb	r2, [r2, #0]
 8006f46:	f042 0220 	orr.w	r2, r2, #32
 8006f4a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006f4c:	f107 0320 	add.w	r3, r7, #32
 8006f50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f54:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006f58:	f107 030c 	add.w	r3, r7, #12
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8006f62:	f107 030c 	add.w	r3, r7, #12
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006f6c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f70:	1dfb      	adds	r3, r7, #7
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f023 0301 	bic.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	bf14      	ite	ne
 8006f7c:	2301      	movne	r3, #1
 8006f7e:	2300      	moveq	r3, #0
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	461a      	mov	r2, r3
 8006f84:	f107 0320 	add.w	r3, r7, #32
 8006f88:	4611      	mov	r1, r2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe f98c 	bl	80052a8 <inc_lock>
 8006f90:	4602      	mov	r2, r0
 8006f92:	f107 030c 	add.w	r3, r7, #12
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8006f9c:	f107 030c 	add.w	r3, r7, #12
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d102      	bne.n	8006fb0 <f_open+0x340>
 8006faa:	2302      	movs	r3, #2
 8006fac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006fb0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d15d      	bne.n	8007074 <f_open+0x404>
			fp->flag = mode;					/* File access mode */
 8006fb8:	f107 030c 	add.w	r3, r7, #12
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	1dfa      	adds	r2, r7, #7
 8006fc0:	7812      	ldrb	r2, [r2, #0]
 8006fc2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8006fc6:	f107 030c 	add.w	r3, r7, #12
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006fd2:	f107 0320 	add.w	r3, r7, #32
 8006fd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006fda:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff f890 	bl	8006104 <ld_clust>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	f107 030c 	add.w	r3, r7, #12
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006ff0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006ff4:	331f      	adds	r3, #31
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	061a      	lsls	r2, r3, #24
 8006ffa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006ffe:	331e      	adds	r3, #30
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	041b      	lsls	r3, r3, #16
 8007004:	4313      	orrs	r3, r2
 8007006:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800700a:	321d      	adds	r2, #29
 800700c:	7812      	ldrb	r2, [r2, #0]
 800700e:	0212      	lsls	r2, r2, #8
 8007010:	4313      	orrs	r3, r2
 8007012:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007016:	321c      	adds	r2, #28
 8007018:	7812      	ldrb	r2, [r2, #0]
 800701a:	431a      	orrs	r2, r3
 800701c:	f107 030c 	add.w	r3, r7, #12
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8007026:	f107 030c 	add.w	r3, r7, #12
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2200      	movs	r2, #0
 800702e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8007032:	f107 030c 	add.w	r3, r7, #12
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2200      	movs	r2, #0
 800703a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800703e:	f107 030c 	add.w	r3, r7, #12
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2200      	movs	r2, #0
 8007046:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800704a:	f107 0320 	add.w	r3, r7, #32
 800704e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007052:	f107 030c 	add.w	r3, r7, #12
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800705c:	f107 030c 	add.w	r3, r7, #12
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007066:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800706a:	f107 030c 	add.w	r3, r7, #12
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8007074:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8007078:	4618      	mov	r0, r3
 800707a:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop

08007084 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08c      	sub	sp, #48	; 0x30
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f7ff fdb3 	bl	8006c08 <validate>
 80070a2:	4603      	mov	r3, r0
 80070a4:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80070a6:	7ffb      	ldrb	r3, [r7, #31]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <f_read+0x2c>
 80070ac:	7ffb      	ldrb	r3, [r7, #31]
 80070ae:	e150      	b.n	8007352 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80070c0:	e147      	b.n	8007352 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80070d0:	2307      	movs	r3, #7
 80070d2:	e13e      	b.n	8007352 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	f240 812d 	bls.w	8007348 <f_read+0x2c4>
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80070f2:	e129      	b.n	8007348 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80070fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f040 80f2 	bne.w	80072e8 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800710a:	0a5b      	lsrs	r3, r3, #9
 800710c:	b2da      	uxtb	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007114:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007118:	3b01      	subs	r3, #1
 800711a:	b2db      	uxtb	r3, r3
 800711c:	4013      	ands	r3, r2
 800711e:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d139      	bne.n	800719a <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007138:	e018      	b.n	800716c <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007140:	2b00      	cmp	r3, #0
 8007142:	d008      	beq.n	8007156 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800714a:	4619      	mov	r1, r3
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7fe fdcd 	bl	8005cec <clmt_clust>
 8007152:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007154:	e00a      	b.n	800716c <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007162:	4619      	mov	r1, r3
 8007164:	4610      	mov	r0, r2
 8007166:	f7fe fb07 	bl	8005778 <get_fat>
 800716a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	2b01      	cmp	r3, #1
 8007170:	d805      	bhi.n	800717e <f_read+0xfa>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2202      	movs	r2, #2
 8007176:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800717a:	2302      	movs	r3, #2
 800717c:	e0e9      	b.n	8007352 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007184:	d105      	bne.n	8007192 <f_read+0x10e>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800718e:	2301      	movs	r3, #1
 8007190:	e0df      	b.n	8007352 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007196:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071a6:	4619      	mov	r1, r3
 80071a8:	4610      	mov	r0, r2
 80071aa:	f7fe fac3 	bl	8005734 <clust2sect>
 80071ae:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d105      	bne.n	80071c2 <f_read+0x13e>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2202      	movs	r2, #2
 80071ba:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80071be:	2302      	movs	r3, #2
 80071c0:	e0c7      	b.n	8007352 <f_read+0x2ce>
			sect += csect;
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4413      	add	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	0a5b      	lsrs	r3, r3, #9
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d046      	beq.n	8007264 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80071d6:	7dfa      	ldrb	r2, [r7, #23]
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	4413      	add	r3, r2
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80071e2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d908      	bls.n	80071fc <f_read+0x178>
					cc = fp->fs->csize - csect;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071f0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80071f4:	461a      	mov	r2, r3
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007202:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	6a39      	ldr	r1, [r7, #32]
 800720c:	f7fd fe10 	bl	8004e30 <disk_read>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d005      	beq.n	8007222 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800721e:	2301      	movs	r3, #1
 8007220:	e097      	b.n	8007352 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722c:	2b00      	cmp	r3, #0
 800722e:	d015      	beq.n	800725c <f_read+0x1d8>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	1ad2      	subs	r2, r2, r3
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	429a      	cmp	r2, r3
 800723e:	d20d      	bcs.n	800725c <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	025b      	lsls	r3, r3, #9
 800724c:	6a3a      	ldr	r2, [r7, #32]
 800724e:	4413      	add	r3, r2
 8007250:	68f9      	ldr	r1, [r7, #12]
 8007252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007256:	4618      	mov	r0, r3
 8007258:	f7fd ff18 	bl	800508c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	025b      	lsls	r3, r3, #9
 8007260:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8007262:	e05b      	b.n	800731c <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	429a      	cmp	r2, r3
 800726e:	d037      	beq.n	80072e0 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01d      	beq.n	80072ba <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007284:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007288:	68f9      	ldr	r1, [r7, #12]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007290:	2301      	movs	r3, #1
 8007292:	f7fd fded 	bl	8004e70 <disk_write>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d005      	beq.n	80072a8 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80072a4:	2301      	movs	r3, #1
 80072a6:	e054      	b.n	8007352 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80072ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80072c0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80072c4:	68f9      	ldr	r1, [r7, #12]
 80072c6:	2301      	movs	r3, #1
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	f7fd fdb1 	bl	8004e30 <disk_read>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80072dc:	2301      	movs	r3, #1
 80072de:	e038      	b.n	8007352 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80072f6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80072f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d901      	bls.n	8007304 <f_read+0x280>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800730a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007314:	4619      	mov	r1, r3
 8007316:	6a38      	ldr	r0, [r7, #32]
 8007318:	f7fd feb8 	bl	800508c <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800731c:	6a3a      	ldr	r2, [r7, #32]
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	4413      	add	r3, r2
 8007322:	623b      	str	r3, [r7, #32]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	441a      	add	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	441a      	add	r2, r3
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	607b      	str	r3, [r7, #4]
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f47f aed2 	bne.w	80070f4 <f_read+0x70>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3730      	adds	r7, #48	; 0x30
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop

0800735c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	; 0x28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7ff fc47 	bl	8006c08 <validate>
 800737a:	4603      	mov	r3, r0
 800737c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <f_write+0x2c>
 8007384:	7dfb      	ldrb	r3, [r7, #23]
 8007386:	e192      	b.n	80076ae <f_write+0x352>
	if (fp->err)							/* Check error */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007398:	e189      	b.n	80076ae <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80073a8:	2307      	movs	r3, #7
 80073aa:	e180      	b.n	80076ae <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	441a      	add	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80073bc:	429a      	cmp	r2, r3
 80073be:	f080 8158 	bcs.w	8007672 <f_write+0x316>
 80073c2:	2300      	movs	r3, #0
 80073c4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80073c6:	e154      	b.n	8007672 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80073ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f040 8114 	bne.w	8007600 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80073de:	0a5b      	lsrs	r3, r3, #9
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80073e8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80073ec:	3b01      	subs	r3, #1
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	4013      	ands	r3, r2
 80073f2:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80073f4:	7dbb      	ldrb	r3, [r7, #22]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d151      	bne.n	800749e <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10f      	bne.n	8007424 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800740a:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	d121      	bne.n	8007456 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007418:	2100      	movs	r1, #0
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe fbc8 	bl	8005bb0 <create_chain>
 8007420:	6278      	str	r0, [r7, #36]	; 0x24
 8007422:	e018      	b.n	8007456 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800742a:	2b00      	cmp	r3, #0
 800742c:	d008      	beq.n	8007440 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007434:	4619      	mov	r1, r3
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7fe fc58 	bl	8005cec <clmt_clust>
 800743c:	6278      	str	r0, [r7, #36]	; 0x24
 800743e:	e00a      	b.n	8007456 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800744c:	4619      	mov	r1, r3
 800744e:	4610      	mov	r0, r2
 8007450:	f7fe fbae 	bl	8005bb0 <create_chain>
 8007454:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 810f 	beq.w	800767c <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	2b01      	cmp	r3, #1
 8007462:	d105      	bne.n	8007470 <f_write+0x114>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800746c:	2302      	movs	r3, #2
 800746e:	e11e      	b.n	80076ae <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d105      	bne.n	8007484 <f_write+0x128>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007480:	2301      	movs	r3, #1
 8007482:	e114      	b.n	80076ae <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007488:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007492:	2b00      	cmp	r3, #0
 8007494:	d103      	bne.n	800749e <f_write+0x142>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800749a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80074a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01d      	beq.n	80074e8 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074b2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80074b6:	68f9      	ldr	r1, [r7, #12]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80074be:	2301      	movs	r3, #1
 80074c0:	f7fd fcd6 	bl	8004e70 <disk_write>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80074d2:	2301      	movs	r3, #1
 80074d4:	e0eb      	b.n	80076ae <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80074dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074f4:	4619      	mov	r1, r3
 80074f6:	4610      	mov	r0, r2
 80074f8:	f7fe f91c 	bl	8005734 <clust2sect>
 80074fc:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d105      	bne.n	8007510 <f_write+0x1b4>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800750c:	2302      	movs	r3, #2
 800750e:	e0ce      	b.n	80076ae <f_write+0x352>
			sect += csect;
 8007510:	7dbb      	ldrb	r3, [r7, #22]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4413      	add	r3, r2
 8007516:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	0a5b      	lsrs	r3, r3, #9
 800751c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d048      	beq.n	80075b6 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007524:	7dba      	ldrb	r2, [r7, #22]
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007530:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007534:	4293      	cmp	r3, r2
 8007536:	d908      	bls.n	800754a <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800753e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007542:	461a      	mov	r2, r3
 8007544:	7dbb      	ldrb	r3, [r7, #22]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007550:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	69b9      	ldr	r1, [r7, #24]
 800755a:	f7fd fc89 	bl	8004e70 <disk_write>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d005      	beq.n	8007570 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800756c:	2301      	movs	r3, #1
 800756e:	e09e      	b.n	80076ae <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad2      	subs	r2, r2, r3
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	429a      	cmp	r2, r3
 800757e:	d216      	bcs.n	80075ae <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	025b      	lsls	r3, r3, #9
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	4413      	add	r3, r2
 8007592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007596:	4619      	mov	r1, r3
 8007598:	f7fd fd78 	bl	800508c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80075a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	025b      	lsls	r3, r3, #9
 80075b2:	623b      	str	r3, [r7, #32]
				continue;
 80075b4:	e047      	b.n	8007646 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d01a      	beq.n	80075f8 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d212      	bcs.n	80075f8 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075d8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80075dc:	68f9      	ldr	r1, [r7, #12]
 80075de:	2301      	movs	r3, #1
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	f7fd fc25 	bl	8004e30 <disk_read>
 80075e6:	4603      	mov	r3, r0
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80075f4:	2301      	movs	r3, #1
 80075f6:	e05a      	b.n	80076ae <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800760e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007610:	6a3a      	ldr	r2, [r7, #32]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	429a      	cmp	r2, r3
 8007616:	d901      	bls.n	800761c <f_write+0x2c0>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	6a3a      	ldr	r2, [r7, #32]
 800762c:	69b9      	ldr	r1, [r7, #24]
 800762e:	4618      	mov	r0, r3
 8007630:	f7fd fd2c 	bl	800508c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800763a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800763e:	b2da      	uxtb	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	4413      	add	r3, r2
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	441a      	add	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	441a      	add	r2, r3
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	607b      	str	r3, [r7, #4]
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	f47f aea7 	bne.w	80073c8 <f_write+0x6c>
 800767a:	e000      	b.n	800767e <f_write+0x322>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800767c:	bf00      	nop
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800768a:	429a      	cmp	r2, r3
 800768c:	d905      	bls.n	800769a <f_write+0x33e>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80076a0:	f043 0320 	orr.w	r3, r3, #32
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3728      	adds	r7, #40	; 0x28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop

080076b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7ff faa1 	bl	8006c08 <validate>
 80076c6:	4603      	mov	r3, r0
 80076c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f040 80a4 	bne.w	800781a <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 809c 	beq.w	800781a <f_sync+0x162>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80076e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d019      	beq.n	8007724 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076f6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007702:	2301      	movs	r3, #1
 8007704:	f7fd fbb4 	bl	8004e70 <disk_write>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800770e:	2301      	movs	r3, #1
 8007710:	e084      	b.n	800781c <f_sync+0x164>
				fp->flag &= ~FA__DIRTY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771c:	b2da      	uxtb	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007730:	4619      	mov	r1, r3
 8007732:	4610      	mov	r0, r2
 8007734:	f7fd ff28 	bl	8005588 <move_window>
 8007738:	4603      	mov	r3, r0
 800773a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d16b      	bne.n	800781a <f_sync+0x162>
				dir = fp->dir_ptr;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007748:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	330b      	adds	r3, #11
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	320b      	adds	r2, #11
 8007752:	7812      	ldrb	r2, [r2, #0]
 8007754:	f042 0220 	orr.w	r2, r2, #32
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	331c      	adds	r3, #28
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 8007766:	b2d2      	uxtb	r2, r2
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	331d      	adds	r3, #29
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 8007774:	1212      	asrs	r2, r2, #8
 8007776:	b2d2      	uxtb	r2, r2
 8007778:	701a      	strb	r2, [r3, #0]
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	331e      	adds	r3, #30
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 8007784:	0c12      	lsrs	r2, r2, #16
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	331f      	adds	r3, #31
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 8007794:	0e12      	lsrs	r2, r2, #24
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80077a0:	4619      	mov	r1, r3
 80077a2:	6938      	ldr	r0, [r7, #16]
 80077a4:	f7fe fcdc 	bl	8006160 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80077a8:	f000 fe1e 	bl	80083e8 <get_fattime>
 80077ac:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	3316      	adds	r3, #22
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	b2d2      	uxtb	r2, r2
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	3317      	adds	r3, #23
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	1212      	asrs	r2, r2, #8
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	701a      	strb	r2, [r3, #0]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	3318      	adds	r3, #24
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	0c12      	lsrs	r2, r2, #16
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	701a      	strb	r2, [r3, #0]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	3319      	adds	r3, #25
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	0e12      	lsrs	r2, r2, #24
 80077d8:	b2d2      	uxtb	r2, r2
 80077da:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	3312      	adds	r3, #18
 80077e0:	2200      	movs	r2, #0
 80077e2:	701a      	strb	r2, [r3, #0]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	3313      	adds	r3, #19
 80077e8:	2200      	movs	r2, #0
 80077ea:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80077f2:	f023 0320 	bic.w	r3, r3, #32
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007810:	4618      	mov	r0, r3
 8007812:	f7fd fee7 	bl	80055e4 <sync_fs>
 8007816:	4603      	mov	r3, r0
 8007818:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800781a:	7dfb      	ldrb	r3, [r7, #23]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff ff43 	bl	80076b8 <f_sync>
 8007832:	4603      	mov	r3, r0
 8007834:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d116      	bne.n	800786a <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff f9e3 	bl	8006c08 <validate>
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10e      	bne.n	800786a <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007852:	4618      	mov	r0, r3
 8007854:	f7fd fde0 	bl	8005418 <dec_lock>
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <f_mkfs>:
FRESULT f_mkfs (
	const TCHAR* path,	/* Logical drive number */
	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au				/* Size of allocation unit in unit of byte or sector */
)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b098      	sub	sp, #96	; 0x60
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	460b      	mov	r3, r1
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	72fb      	strb	r3, [r7, #11]
	DWORD eb[2];
#endif


	/* Check mounted drive and clear work area */
	if (sfd > 1) return FR_INVALID_PARAMETER;
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d902      	bls.n	800788e <f_mkfs+0x1a>
 8007888:	2313      	movs	r3, #19
 800788a:	f000 bc70 	b.w	800816e <f_mkfs+0x8fa>
	vol = get_ldnumber(&path);
 800788e:	f107 030c 	add.w	r3, r7, #12
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe fe40 	bl	8006518 <get_ldnumber>
 8007898:	6438      	str	r0, [r7, #64]	; 0x40
	if (vol < 0) return FR_INVALID_DRIVE;
 800789a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	da02      	bge.n	80078a6 <f_mkfs+0x32>
 80078a0:	230b      	movs	r3, #11
 80078a2:	f000 bc64 	b.w	800816e <f_mkfs+0x8fa>
	fs = FatFs[vol];
 80078a6:	4aa5      	ldr	r2, [pc, #660]	; (8007b3c <f_mkfs+0x2c8>)
 80078a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (!fs) return FR_NOT_ENABLED;
 80078b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d102      	bne.n	80078bc <f_mkfs+0x48>
 80078b6:	230c      	movs	r3, #12
 80078b8:	f000 bc59 	b.w	800816e <f_mkfs+0x8fa>
	fs->fs_type = 0;
 80078bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	pdrv = LD2PD(vol);	/* Physical drive */
 80078c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 80078ca:	2300      	movs	r3, #0
 80078cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Get disk statics */
	stat = disk_initialize(pdrv);
 80078d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fd fa85 	bl	8004de4 <disk_initialize>
 80078da:	4603      	mov	r3, r0
 80078dc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80078e0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <f_mkfs+0x7e>
 80078ec:	2303      	movs	r3, #3
 80078ee:	f000 bc3e 	b.w	800816e <f_mkfs+0x8fa>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80078f2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <f_mkfs+0x90>
 80078fe:	230a      	movs	r3, #10
 8007900:	f000 bc35 	b.w	800816e <f_mkfs+0x8fa>
		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
 8007904:	f107 0214 	add.w	r2, r7, #20
 8007908:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800790c:	2101      	movs	r1, #1
 800790e:	4618      	mov	r0, r3
 8007910:	f7fd face 	bl	8004eb0 <disk_ioctl>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d102      	bne.n	8007920 <f_mkfs+0xac>
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b7f      	cmp	r3, #127	; 0x7f
 800791e:	d802      	bhi.n	8007926 <f_mkfs+0xb2>
			return FR_DISK_ERR;
 8007920:	2301      	movs	r3, #1
 8007922:	f000 bc24 	b.w	800816e <f_mkfs+0x8fa>
		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
 8007926:	7afb      	ldrb	r3, [r7, #11]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <f_mkfs+0xbc>
 800792c:	2300      	movs	r3, #0
 800792e:	e000      	b.n	8007932 <f_mkfs+0xbe>
 8007930:	233f      	movs	r3, #63	; 0x3f
 8007932:	637b      	str	r3, [r7, #52]	; 0x34
		n_vol -= b_vol;				/* Volume size */
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	617b      	str	r3, [r7, #20]
	}

	if (au & (au - 1)) au = 0;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	1e5a      	subs	r2, r3, #1
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4013      	ands	r3, r2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <f_mkfs+0xd8>
 8007948:	2300      	movs	r3, #0
 800794a:	607b      	str	r3, [r7, #4]
	if (!au) {						/* AU auto selection */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d118      	bne.n	8007984 <f_mkfs+0x110>
		vs = n_vol / (2000 / (SS(fs) / 512));
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	4a7a      	ldr	r2, [pc, #488]	; (8007b40 <f_mkfs+0x2cc>)
 8007956:	fba2 2303 	umull	r2, r3, r2, r3
 800795a:	09db      	lsrs	r3, r3, #7
 800795c:	633b      	str	r3, [r7, #48]	; 0x30
		for (i = 0; vs < vst[i]; i++) ;
 800795e:	2300      	movs	r3, #0
 8007960:	657b      	str	r3, [r7, #84]	; 0x54
 8007962:	e002      	b.n	800796a <f_mkfs+0xf6>
 8007964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007966:	3301      	adds	r3, #1
 8007968:	657b      	str	r3, [r7, #84]	; 0x54
 800796a:	4a76      	ldr	r2, [pc, #472]	; (8007b44 <f_mkfs+0x2d0>)
 800796c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800796e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007972:	461a      	mov	r2, r3
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	429a      	cmp	r2, r3
 8007978:	d8f4      	bhi.n	8007964 <f_mkfs+0xf0>
		au = cst[i];
 800797a:	4a73      	ldr	r2, [pc, #460]	; (8007b48 <f_mkfs+0x2d4>)
 800797c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800797e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007982:	607b      	str	r3, [r7, #4]
	}
	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800798a:	d302      	bcc.n	8007992 <f_mkfs+0x11e>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	0a5b      	lsrs	r3, r3, #9
 8007990:	607b      	str	r3, [r7, #4]
	if (!au) au = 1;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <f_mkfs+0x128>
 8007998:	2301      	movs	r3, #1
 800799a:	607b      	str	r3, [r7, #4]
	if (au > 128) au = 128;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b80      	cmp	r3, #128	; 0x80
 80079a0:	d901      	bls.n	80079a6 <f_mkfs+0x132>
 80079a2:	2380      	movs	r3, #128	; 0x80
 80079a4:	607b      	str	r3, [r7, #4]

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	fmt = FS_FAT12;
 80079b0:	2301      	movs	r3, #1
 80079b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 80079b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80079bc:	4293      	cmp	r3, r2
 80079be:	d902      	bls.n	80079c6 <f_mkfs+0x152>
 80079c0:	2302      	movs	r3, #2
 80079c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 80079c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d902      	bls.n	80079d6 <f_mkfs+0x162>
 80079d0:	2303      	movs	r3, #3
 80079d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
 80079d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d10a      	bne.n	80079f4 <f_mkfs+0x180>
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	3382      	adds	r3, #130	; 0x82
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	3b01      	subs	r3, #1
 80079e6:	0a5b      	lsrs	r3, r3, #9
 80079e8:	64bb      	str	r3, [r7, #72]	; 0x48
		n_rsv = 32;
 80079ea:	2320      	movs	r3, #32
 80079ec:	64fb      	str	r3, [r7, #76]	; 0x4c
		n_dir = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	647b      	str	r3, [r7, #68]	; 0x44
 80079f2:	e018      	b.n	8007a26 <f_mkfs+0x1b2>
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
 80079f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d107      	bne.n	8007a0c <f_mkfs+0x198>
 80079fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fe:	4613      	mov	r3, r2
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	4413      	add	r3, r2
 8007a04:	3301      	adds	r3, #1
 8007a06:	085b      	lsrs	r3, r3, #1
 8007a08:	3303      	adds	r3, #3
 8007a0a:	e002      	b.n	8007a12 <f_mkfs+0x19e>
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	3302      	adds	r3, #2
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	64bb      	str	r3, [r7, #72]	; 0x48
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 8007a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a16:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007a1a:	0a5b      	lsrs	r3, r3, #9
 8007a1c:	64bb      	str	r3, [r7, #72]	; 0x48
		n_rsv = 1;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	64fb      	str	r3, [r7, #76]	; 0x4c
		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
 8007a22:	2320      	movs	r3, #32
 8007a24:	647b      	str	r3, [r7, #68]	; 0x44
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
 8007a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2a:	4413      	add	r3, r2
 8007a2c:	653b      	str	r3, [r7, #80]	; 0x50
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 8007a2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a32:	4413      	add	r3, r2
 8007a34:	62bb      	str	r3, [r7, #40]	; 0x28
	b_data = b_dir + n_dir;				/* Data area start sector */
 8007a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a3a:	4413      	add	r3, r2
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8007a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	441a      	add	r2, r3
 8007a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a46:	1ad2      	subs	r2, r2, r3
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d901      	bls.n	8007a52 <f_mkfs+0x1de>
 8007a4e:	230e      	movs	r3, #14
 8007a50:	e38d      	b.n	800816e <f_mkfs+0x8fa>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
 8007a52:	f107 0218 	add.w	r2, r7, #24
 8007a56:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007a5a:	2103      	movs	r1, #3
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fd fa27 	bl	8004eb0 <disk_ioctl>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d106      	bne.n	8007a76 <f_mkfs+0x202>
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <f_mkfs+0x202>
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a74:	d901      	bls.n	8007a7a <f_mkfs+0x206>
 8007a76:	2301      	movs	r3, #1
 8007a78:	61bb      	str	r3, [r7, #24]
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	4413      	add	r3, r2
 8007a80:	1e5a      	subs	r2, r3, #1
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	425b      	negs	r3, r3
 8007a86:	4013      	ands	r3, r2
 8007a88:	61bb      	str	r3, [r7, #24]
	n = (n - b_data) / N_FATS;
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 8007a92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d108      	bne.n	8007aac <f_mkfs+0x238>
		n_rsv += n;
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a9e:	4413      	add	r3, r2
 8007aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
		b_fat += n;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007aa6:	4413      	add	r3, r2
 8007aa8:	653b      	str	r3, [r7, #80]	; 0x50
 8007aaa:	e003      	b.n	8007ab4 <f_mkfs+0x240>
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ab0:	4413      	add	r3, r2
 8007ab2:	64bb      	str	r3, [r7, #72]	; 0x48
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab8:	1ad2      	subs	r2, r2, r3
 8007aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007abc:	1ad2      	subs	r2, r2, r3
 8007abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac0:	1ad2      	subs	r2, r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 8007aca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d104      	bne.n	8007adc <f_mkfs+0x268>
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d908      	bls.n	8007aee <f_mkfs+0x27a>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 8007adc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d106      	bne.n	8007af2 <f_mkfs+0x27e>
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d801      	bhi.n	8007af2 <f_mkfs+0x27e>
		return FR_MKFS_ABORTED;
 8007aee:	230e      	movs	r3, #14
 8007af0:	e33d      	b.n	800816e <f_mkfs+0x8fa>

	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
 8007af2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d103      	bne.n	8007b02 <f_mkfs+0x28e>
		sys = 0x0C;		/* FAT32X */
 8007afa:	230c      	movs	r3, #12
 8007afc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8007b00:	e014      	b.n	8007b2c <f_mkfs+0x2b8>
	} else {
		if (fmt == FS_FAT12 && n_vol < 0x10000) {
 8007b02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d107      	bne.n	8007b1a <f_mkfs+0x2a6>
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b10:	d203      	bcs.n	8007b1a <f_mkfs+0x2a6>
			sys = 0x01;	/* FAT12(<65536) */
 8007b12:	2301      	movs	r3, #1
 8007b14:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8007b18:	e008      	b.n	8007b2c <f_mkfs+0x2b8>
		} else {
			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b20:	d201      	bcs.n	8007b26 <f_mkfs+0x2b2>
 8007b22:	2304      	movs	r3, #4
 8007b24:	e000      	b.n	8007b28 <f_mkfs+0x2b4>
 8007b26:	2306      	movs	r3, #6
 8007b28:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		tbl[4] = sys;
		if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
 8007b2c:	7afb      	ldrb	r3, [r7, #11]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00c      	beq.n	8007b4c <f_mkfs+0x2d8>
			md = 0xF0;
 8007b32:	23f0      	movs	r3, #240	; 0xf0
 8007b34:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8007b38:	e07f      	b.n	8007c3a <f_mkfs+0x3c6>
 8007b3a:	bf00      	nop
 8007b3c:	2000057c 	.word	0x2000057c
 8007b40:	10624dd3 	.word	0x10624dd3
 8007b44:	08008d10 	.word	0x08008d10
 8007b48:	08008d28 	.word	0x08008d28
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win.d8, 0, SS(fs));
 8007b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b52:	2100      	movs	r1, #0
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fd fab7 	bl	80050c8 <mem_set>
			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
 8007b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007b60:	623b      	str	r3, [r7, #32]
			tbl[1] = 1;						/* Partition start head */
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	3301      	adds	r3, #1
 8007b66:	2201      	movs	r2, #1
 8007b68:	701a      	strb	r2, [r3, #0]
			tbl[2] = 1;						/* Partition start sector */
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	3302      	adds	r3, #2
 8007b6e:	2201      	movs	r2, #1
 8007b70:	701a      	strb	r2, [r3, #0]
			tbl[3] = 0;						/* Partition start cylinder */
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	3303      	adds	r3, #3
 8007b76:	2200      	movs	r2, #0
 8007b78:	701a      	strb	r2, [r3, #0]
			tbl[4] = sys;					/* System type */
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007b82:	701a      	strb	r2, [r3, #0]
			tbl[5] = 254;					/* Partition end head */
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	3305      	adds	r3, #5
 8007b88:	22fe      	movs	r2, #254	; 0xfe
 8007b8a:	701a      	strb	r2, [r3, #0]
			n = (b_vol + n_vol) / 63 / 255;
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b90:	441a      	add	r2, r3
 8007b92:	4ba8      	ldr	r3, [pc, #672]	; (8007e34 <f_mkfs+0x5c0>)
 8007b94:	fba3 1302 	umull	r1, r3, r3, r2
 8007b98:	1ad2      	subs	r2, r2, r3
 8007b9a:	0852      	lsrs	r2, r2, #1
 8007b9c:	4413      	add	r3, r2
 8007b9e:	0b5b      	lsrs	r3, r3, #13
 8007ba0:	61bb      	str	r3, [r7, #24]
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	3306      	adds	r3, #6
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	0892      	lsrs	r2, r2, #2
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	701a      	strb	r2, [r3, #0]
			tbl[7] = (BYTE)n;				/* End cylinder */
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	3307      	adds	r3, #7
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	223f      	movs	r2, #63	; 0x3f
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	3309      	adds	r3, #9
 8007bca:	2200      	movs	r2, #0
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	330a      	adds	r3, #10
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	330b      	adds	r3, #11
 8007bda:	2200      	movs	r2, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	330c      	adds	r3, #12
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	b2d2      	uxtb	r2, r2
 8007be6:	701a      	strb	r2, [r3, #0]
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	330d      	adds	r3, #13
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	1212      	asrs	r2, r2, #8
 8007bf0:	b2d2      	uxtb	r2, r2
 8007bf2:	701a      	strb	r2, [r3, #0]
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	330e      	adds	r3, #14
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	0c12      	lsrs	r2, r2, #16
 8007bfc:	b2d2      	uxtb	r2, r2
 8007bfe:	701a      	strb	r2, [r3, #0]
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	330f      	adds	r3, #15
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	0e12      	lsrs	r2, r2, #24
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	701a      	strb	r2, [r3, #0]
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 8007c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0e:	2255      	movs	r2, #85	; 0x55
 8007c10:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8007c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c16:	22aa      	movs	r2, #170	; 0xaa
 8007c18:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 8007c1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c1e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007c22:	2301      	movs	r3, #1
 8007c24:	2200      	movs	r2, #0
 8007c26:	f7fd f923 	bl	8004e70 <disk_write>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <f_mkfs+0x3c0>
				return FR_DISK_ERR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e29c      	b.n	800816e <f_mkfs+0x8fa>
			md = 0xF8;
 8007c34:	23f8      	movs	r3, #248	; 0xf8
 8007c36:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		}
	}

	/* Create BPB in the VBR */
	tbl = fs->win.d8;							/* Clear sector */
 8007c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3c:	623b      	str	r3, [r7, #32]
	mem_set(tbl, 0, SS(fs));
 8007c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c42:	2100      	movs	r1, #0
 8007c44:	6a38      	ldr	r0, [r7, #32]
 8007c46:	f7fd fa3f 	bl	80050c8 <mem_set>
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
 8007c4a:	220b      	movs	r2, #11
 8007c4c:	497a      	ldr	r1, [pc, #488]	; (8007e38 <f_mkfs+0x5c4>)
 8007c4e:	6a38      	ldr	r0, [r7, #32]
 8007c50:	f7fd fa1c 	bl	800508c <mem_cpy>
	i = SS(fs);								/* Sector size */
 8007c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c58:	657b      	str	r3, [r7, #84]	; 0x54
	ST_WORD(tbl + BPB_BytsPerSec, i);
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	330b      	adds	r3, #11
 8007c5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c60:	b2d2      	uxtb	r2, r2
 8007c62:	701a      	strb	r2, [r3, #0]
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	330c      	adds	r3, #12
 8007c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c6a:	1212      	asrs	r2, r2, #8
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	701a      	strb	r2, [r3, #0]
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	330d      	adds	r3, #13
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	330e      	adds	r3, #14
 8007c7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c80:	b2d2      	uxtb	r2, r2
 8007c82:	701a      	strb	r2, [r3, #0]
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	330f      	adds	r3, #15
 8007c88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c8a:	1212      	asrs	r2, r2, #8
 8007c8c:	b2d2      	uxtb	r2, r2
 8007c8e:	701a      	strb	r2, [r3, #0]
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	3310      	adds	r3, #16
 8007c94:	2201      	movs	r2, #1
 8007c96:	701a      	strb	r2, [r3, #0]
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 8007c98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d101      	bne.n	8007ca4 <f_mkfs+0x430>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	e001      	b.n	8007ca8 <f_mkfs+0x434>
 8007ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ca8:	657b      	str	r3, [r7, #84]	; 0x54
	ST_WORD(tbl + BPB_RootEntCnt, i);
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	3311      	adds	r3, #17
 8007cae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cb0:	b2d2      	uxtb	r2, r2
 8007cb2:	701a      	strb	r2, [r3, #0]
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	3312      	adds	r3, #18
 8007cb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cba:	1212      	asrs	r2, r2, #8
 8007cbc:	b2d2      	uxtb	r2, r2
 8007cbe:	701a      	strb	r2, [r3, #0]
	if (n_vol < 0x10000) {					/* Number of total sectors */
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cc6:	d20b      	bcs.n	8007ce0 <f_mkfs+0x46c>
		ST_WORD(tbl + BPB_TotSec16, n_vol);
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	3313      	adds	r3, #19
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	3314      	adds	r3, #20
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	1212      	asrs	r2, r2, #8
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	701a      	strb	r2, [r3, #0]
 8007cde:	e016      	b.n	8007d0e <f_mkfs+0x49a>
	} else {
		ST_DWORD(tbl + BPB_TotSec32, n_vol);
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	3320      	adds	r3, #32
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	b2d2      	uxtb	r2, r2
 8007ce8:	701a      	strb	r2, [r3, #0]
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	3321      	adds	r3, #33	; 0x21
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	1212      	asrs	r2, r2, #8
 8007cf2:	b2d2      	uxtb	r2, r2
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	3322      	adds	r3, #34	; 0x22
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	0c12      	lsrs	r2, r2, #16
 8007cfe:	b2d2      	uxtb	r2, r2
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	3323      	adds	r3, #35	; 0x23
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	0e12      	lsrs	r2, r2, #24
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	701a      	strb	r2, [r3, #0]
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	3315      	adds	r3, #21
 8007d12:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007d16:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	3318      	adds	r3, #24
 8007d1c:	223f      	movs	r2, #63	; 0x3f
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	3319      	adds	r3, #25
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	331a      	adds	r3, #26
 8007d2c:	22ff      	movs	r2, #255	; 0xff
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	331b      	adds	r3, #27
 8007d34:	2200      	movs	r2, #0
 8007d36:	701a      	strb	r2, [r3, #0]
	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	331c      	adds	r3, #28
 8007d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	331d      	adds	r3, #29
 8007d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d48:	1212      	asrs	r2, r2, #8
 8007d4a:	b2d2      	uxtb	r2, r2
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	331e      	adds	r3, #30
 8007d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d54:	0c12      	lsrs	r2, r2, #16
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	331f      	adds	r3, #31
 8007d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d60:	0e12      	lsrs	r2, r2, #24
 8007d62:	b2d2      	uxtb	r2, r2
 8007d64:	701a      	strb	r2, [r3, #0]
	n = GET_FATTIME();						/* Use current time as VSN */
 8007d66:	f000 fb3f 	bl	80083e8 <get_fattime>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {
 8007d6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d164      	bne.n	8007e40 <f_mkfs+0x5cc>
		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	3343      	adds	r3, #67	; 0x43
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	b2d2      	uxtb	r2, r2
 8007d7e:	701a      	strb	r2, [r3, #0]
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	3344      	adds	r3, #68	; 0x44
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	1212      	asrs	r2, r2, #8
 8007d88:	b2d2      	uxtb	r2, r2
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	3345      	adds	r3, #69	; 0x45
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	0c12      	lsrs	r2, r2, #16
 8007d94:	b2d2      	uxtb	r2, r2
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	3346      	adds	r3, #70	; 0x46
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	0e12      	lsrs	r2, r2, #24
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	3324      	adds	r3, #36	; 0x24
 8007da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	3325      	adds	r3, #37	; 0x25
 8007db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007db4:	1212      	asrs	r2, r2, #8
 8007db6:	b2d2      	uxtb	r2, r2
 8007db8:	701a      	strb	r2, [r3, #0]
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	3326      	adds	r3, #38	; 0x26
 8007dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dc0:	0c12      	lsrs	r2, r2, #16
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	3327      	adds	r3, #39	; 0x27
 8007dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dcc:	0e12      	lsrs	r2, r2, #24
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	332c      	adds	r3, #44	; 0x2c
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	701a      	strb	r2, [r3, #0]
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	332d      	adds	r3, #45	; 0x2d
 8007dde:	2200      	movs	r2, #0
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	332e      	adds	r3, #46	; 0x2e
 8007de6:	2200      	movs	r2, #0
 8007de8:	701a      	strb	r2, [r3, #0]
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	332f      	adds	r3, #47	; 0x2f
 8007dee:	2200      	movs	r2, #0
 8007df0:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	3330      	adds	r3, #48	; 0x30
 8007df6:	2201      	movs	r2, #1
 8007df8:	701a      	strb	r2, [r3, #0]
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	3331      	adds	r3, #49	; 0x31
 8007dfe:	2200      	movs	r2, #0
 8007e00:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	3332      	adds	r3, #50	; 0x32
 8007e06:	2206      	movs	r2, #6
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	3333      	adds	r3, #51	; 0x33
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	3340      	adds	r3, #64	; 0x40
 8007e16:	2280      	movs	r2, #128	; 0x80
 8007e18:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	3342      	adds	r3, #66	; 0x42
 8007e1e:	2229      	movs	r2, #41	; 0x29
 8007e20:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	3347      	adds	r3, #71	; 0x47
 8007e26:	2213      	movs	r2, #19
 8007e28:	4904      	ldr	r1, [pc, #16]	; (8007e3c <f_mkfs+0x5c8>)
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fd f92e 	bl	800508c <mem_cpy>
 8007e30:	e037      	b.n	8007ea2 <f_mkfs+0x62e>
 8007e32:	bf00      	nop
 8007e34:	0515565b 	.word	0x0515565b
 8007e38:	08008c08 	.word	0x08008c08
 8007e3c:	08008c14 	.word	0x08008c14
	} else {
		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	3327      	adds	r3, #39	; 0x27
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	b2d2      	uxtb	r2, r2
 8007e48:	701a      	strb	r2, [r3, #0]
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	3328      	adds	r3, #40	; 0x28
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	1212      	asrs	r2, r2, #8
 8007e52:	b2d2      	uxtb	r2, r2
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	3329      	adds	r3, #41	; 0x29
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	0c12      	lsrs	r2, r2, #16
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	332a      	adds	r3, #42	; 0x2a
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	0e12      	lsrs	r2, r2, #24
 8007e6a:	b2d2      	uxtb	r2, r2
 8007e6c:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	3316      	adds	r3, #22
 8007e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e74:	b2d2      	uxtb	r2, r2
 8007e76:	701a      	strb	r2, [r3, #0]
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	3317      	adds	r3, #23
 8007e7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e7e:	1212      	asrs	r2, r2, #8
 8007e80:	b2d2      	uxtb	r2, r2
 8007e82:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	3324      	adds	r3, #36	; 0x24
 8007e88:	2280      	movs	r2, #128	; 0x80
 8007e8a:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	3326      	adds	r3, #38	; 0x26
 8007e90:	2229      	movs	r2, #41	; 0x29
 8007e92:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	332b      	adds	r3, #43	; 0x2b
 8007e98:	2213      	movs	r2, #19
 8007e9a:	49b7      	ldr	r1, [pc, #732]	; (8008178 <f_mkfs+0x904>)
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fd f8f5 	bl	800508c <mem_cpy>
	}
	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ea8:	2255      	movs	r2, #85	; 0x55
 8007eaa:	701a      	strb	r2, [r3, #0]
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007eb2:	22aa      	movs	r2, #170	; 0xaa
 8007eb4:	701a      	strb	r2, [r3, #0]
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
 8007eb6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007eba:	2301      	movs	r3, #1
 8007ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ebe:	6a39      	ldr	r1, [r7, #32]
 8007ec0:	f7fc ffd6 	bl	8004e70 <disk_write>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <f_mkfs+0x65a>
		return FR_DISK_ERR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e14f      	b.n	800816e <f_mkfs+0x8fa>
	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
 8007ece:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d107      	bne.n	8007ee6 <f_mkfs+0x672>
		disk_write(pdrv, tbl, b_vol + 6, 1);
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed8:	1d9a      	adds	r2, r3, #6
 8007eda:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007ede:	2301      	movs	r3, #1
 8007ee0:	6a39      	ldr	r1, [r7, #32]
 8007ee2:	f7fc ffc5 	bl	8004e70 <disk_write>

	/* Initialize FAT area */
	wsect = b_fat;
 8007ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ee8:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 8007eea:	2300      	movs	r3, #0
 8007eec:	657b      	str	r3, [r7, #84]	; 0x54
 8007eee:	e099      	b.n	8008024 <f_mkfs+0x7b0>
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 8007ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	6a38      	ldr	r0, [r7, #32]
 8007ef8:	f7fd f8e6 	bl	80050c8 <mem_set>
		n = md;								/* Media descriptor byte */
 8007efc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8007f00:	61bb      	str	r3, [r7, #24]
		if (fmt != FS_FAT32) {
 8007f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d021      	beq.n	8007f4e <f_mkfs+0x6da>
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 8007f0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d101      	bne.n	8007f16 <f_mkfs+0x6a2>
 8007f12:	4a9a      	ldr	r2, [pc, #616]	; (800817c <f_mkfs+0x908>)
 8007f14:	e001      	b.n	8007f1a <f_mkfs+0x6a6>
 8007f16:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	701a      	strb	r2, [r3, #0]
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	1212      	asrs	r2, r2, #8
 8007f30:	b2d2      	uxtb	r2, r2
 8007f32:	701a      	strb	r2, [r3, #0]
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	3302      	adds	r3, #2
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	0c12      	lsrs	r2, r2, #16
 8007f3c:	b2d2      	uxtb	r2, r2
 8007f3e:	701a      	strb	r2, [r3, #0]
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	3303      	adds	r3, #3
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	0e12      	lsrs	r2, r2, #24
 8007f48:	b2d2      	uxtb	r2, r2
 8007f4a:	701a      	strb	r2, [r3, #0]
 8007f4c:	e039      	b.n	8007fc2 <f_mkfs+0x74e>
		} else {
			n |= 0xFFFFFF00;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8007f54:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	701a      	strb	r2, [r3, #0]
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	3301      	adds	r3, #1
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	1212      	asrs	r2, r2, #8
 8007f66:	b2d2      	uxtb	r2, r2
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	3302      	adds	r3, #2
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	0c12      	lsrs	r2, r2, #16
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	3303      	adds	r3, #3
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	0e12      	lsrs	r2, r2, #24
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	3304      	adds	r3, #4
 8007f86:	22ff      	movs	r2, #255	; 0xff
 8007f88:	701a      	strb	r2, [r3, #0]
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	3305      	adds	r3, #5
 8007f8e:	22ff      	movs	r2, #255	; 0xff
 8007f90:	701a      	strb	r2, [r3, #0]
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	3306      	adds	r3, #6
 8007f96:	22ff      	movs	r2, #255	; 0xff
 8007f98:	701a      	strb	r2, [r3, #0]
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	3307      	adds	r3, #7
 8007f9e:	22ff      	movs	r2, #255	; 0xff
 8007fa0:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	22ff      	movs	r2, #255	; 0xff
 8007fa8:	701a      	strb	r2, [r3, #0]
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	3309      	adds	r3, #9
 8007fae:	22ff      	movs	r2, #255	; 0xff
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	330a      	adds	r3, #10
 8007fb6:	22ff      	movs	r2, #255	; 0xff
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	330b      	adds	r3, #11
 8007fbe:	220f      	movs	r2, #15
 8007fc0:	701a      	strb	r2, [r3, #0]
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 8007fc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fc4:	1c53      	adds	r3, r2, #1
 8007fc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fc8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007fcc:	2301      	movs	r3, #1
 8007fce:	6a39      	ldr	r1, [r7, #32]
 8007fd0:	f7fc ff4e 	bl	8004e70 <disk_write>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <f_mkfs+0x76a>
			return FR_DISK_ERR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e0c7      	b.n	800816e <f_mkfs+0x8fa>
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
 8007fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	6a38      	ldr	r0, [r7, #32]
 8007fe6:	f7fd f86f 	bl	80050c8 <mem_set>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 8007fea:	2301      	movs	r3, #1
 8007fec:	61bb      	str	r3, [r7, #24]
 8007fee:	e012      	b.n	8008016 <f_mkfs+0x7a2>
			DRESULT ret = disk_write(pdrv, tbl, wsect++, 1);
 8007ff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ff2:	1c53      	adds	r3, r2, #1
 8007ff4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ff6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	6a39      	ldr	r1, [r7, #32]
 8007ffe:	f7fc ff37 	bl	8004e70 <disk_write>
 8008002:	4603      	mov	r3, r0
 8008004:	77fb      	strb	r3, [r7, #31]
			if (ret != RES_OK)
 8008006:	7ffb      	ldrb	r3, [r7, #31]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <f_mkfs+0x79c>
				return FR_DISK_ERR;
 800800c:	2301      	movs	r3, #1
 800800e:	e0ae      	b.n	800816e <f_mkfs+0x8fa>
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	3301      	adds	r3, #1
 8008014:	61bb      	str	r3, [r7, #24]
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800801a:	429a      	cmp	r2, r3
 800801c:	d3e8      	bcc.n	8007ff0 <f_mkfs+0x77c>
	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
		disk_write(pdrv, tbl, b_vol + 6, 1);

	/* Initialize FAT area */
	wsect = b_fat;
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 800801e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008020:	3301      	adds	r3, #1
 8008022:	657b      	str	r3, [r7, #84]	; 0x54
 8008024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008026:	2b00      	cmp	r3, #0
 8008028:	f43f af62 	beq.w	8007ef0 <f_mkfs+0x67c>
				return FR_DISK_ERR;
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
 800802c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008030:	2b03      	cmp	r3, #3
 8008032:	d101      	bne.n	8008038 <f_mkfs+0x7c4>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	e000      	b.n	800803a <f_mkfs+0x7c6>
 8008038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800803a:	657b      	str	r3, [r7, #84]	; 0x54
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800803c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800803e:	1c53      	adds	r3, r2, #1
 8008040:	65bb      	str	r3, [r7, #88]	; 0x58
 8008042:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008046:	2301      	movs	r3, #1
 8008048:	6a39      	ldr	r1, [r7, #32]
 800804a:	f7fc ff11 	bl	8004e70 <disk_write>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <f_mkfs+0x7e4>
			return FR_DISK_ERR;
 8008054:	2301      	movs	r3, #1
 8008056:	e08a      	b.n	800816e <f_mkfs+0x8fa>
	} while (--i);
 8008058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800805a:	3b01      	subs	r3, #1
 800805c:	657b      	str	r3, [r7, #84]	; 0x54
 800805e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1eb      	bne.n	800803c <f_mkfs+0x7c8>
		disk_ioctl(pdrv, CTRL_TRIM, eb);
	}
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
 8008064:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008068:	2b03      	cmp	r3, #3
 800806a:	d173      	bne.n	8008154 <f_mkfs+0x8e0>
		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	2252      	movs	r2, #82	; 0x52
 8008070:	701a      	strb	r2, [r3, #0]
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	3301      	adds	r3, #1
 8008076:	2252      	movs	r2, #82	; 0x52
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	3302      	adds	r3, #2
 800807e:	2261      	movs	r2, #97	; 0x61
 8008080:	701a      	strb	r2, [r3, #0]
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	3303      	adds	r3, #3
 8008086:	2241      	movs	r2, #65	; 0x41
 8008088:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008090:	2272      	movs	r2, #114	; 0x72
 8008092:	701a      	strb	r2, [r3, #0]
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	f203 13e5 	addw	r3, r3, #485	; 0x1e5
 800809a:	2272      	movs	r2, #114	; 0x72
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	f503 73f3 	add.w	r3, r3, #486	; 0x1e6
 80080a4:	2241      	movs	r2, #65	; 0x41
 80080a6:	701a      	strb	r2, [r3, #0]
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	f203 13e7 	addw	r3, r3, #487	; 0x1e7
 80080ae:	2261      	movs	r2, #97	; 0x61
 80080b0:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80080b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ba:	b2d2      	uxtb	r2, r2
 80080bc:	3a01      	subs	r2, #1
 80080be:	b2d2      	uxtb	r2, r2
 80080c0:	701a      	strb	r2, [r3, #0]
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 80080c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ca:	b292      	uxth	r2, r2
 80080cc:	3a01      	subs	r2, #1
 80080ce:	b292      	uxth	r2, r2
 80080d0:	0a12      	lsrs	r2, r2, #8
 80080d2:	b292      	uxth	r2, r2
 80080d4:	b2d2      	uxtb	r2, r2
 80080d6:	701a      	strb	r2, [r3, #0]
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	f503 73f5 	add.w	r3, r3, #490	; 0x1ea
 80080de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080e0:	3a01      	subs	r2, #1
 80080e2:	0c12      	lsrs	r2, r2, #16
 80080e4:	b2d2      	uxtb	r2, r2
 80080e6:	701a      	strb	r2, [r3, #0]
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	f203 13eb 	addw	r3, r3, #491	; 0x1eb
 80080ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080f0:	3a01      	subs	r2, #1
 80080f2:	0e12      	lsrs	r2, r2, #24
 80080f4:	b2d2      	uxtb	r2, r2
 80080f6:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80080fe:	2202      	movs	r2, #2
 8008100:	701a      	strb	r2, [r3, #0]
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	f203 13ed 	addw	r3, r3, #493	; 0x1ed
 8008108:	2200      	movs	r2, #0
 800810a:	701a      	strb	r2, [r3, #0]
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 8008112:	2200      	movs	r2, #0
 8008114:	701a      	strb	r2, [r3, #0]
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	f203 13ef 	addw	r3, r3, #495	; 0x1ef
 800811c:	2200      	movs	r2, #0
 800811e:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BS_55AA, 0xAA55);
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008126:	2255      	movs	r2, #85	; 0x55
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008130:	22aa      	movs	r2, #170	; 0xaa
 8008132:	701a      	strb	r2, [r3, #0]
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 8008134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800813c:	2301      	movs	r3, #1
 800813e:	6a39      	ldr	r1, [r7, #32]
 8008140:	f7fc fe96 	bl	8004e70 <disk_write>
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 8008144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008146:	1dda      	adds	r2, r3, #7
 8008148:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800814c:	2301      	movs	r3, #1
 800814e:	6a39      	ldr	r1, [r7, #32]
 8008150:	f7fc fe8e 	bl	8004e70 <disk_write>
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
 8008154:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008158:	2200      	movs	r2, #0
 800815a:	2100      	movs	r1, #0
 800815c:	4618      	mov	r0, r3
 800815e:	f7fc fea7 	bl	8004eb0 <disk_ioctl>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	bf14      	ite	ne
 8008168:	2301      	movne	r3, #1
 800816a:	2300      	moveq	r3, #0
 800816c:	b2db      	uxtb	r3, r3
}
 800816e:	4618      	mov	r0, r3
 8008170:	3760      	adds	r7, #96	; 0x60
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	08008c28 	.word	0x08008c28
 800817c:	00ffff00 	.word	0x00ffff00

08008180 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	4613      	mov	r3, r2
 800818c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800818e:	2301      	movs	r3, #1
 8008190:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008196:	4b1f      	ldr	r3, [pc, #124]	; (8008214 <FATFS_LinkDriverEx+0x94>)
 8008198:	7a5b      	ldrb	r3, [r3, #9]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b01      	cmp	r3, #1
 800819e:	d831      	bhi.n	8008204 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80081a0:	4b1c      	ldr	r3, [pc, #112]	; (8008214 <FATFS_LinkDriverEx+0x94>)
 80081a2:	7a5b      	ldrb	r3, [r3, #9]
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	461a      	mov	r2, r3
 80081a8:	4b1a      	ldr	r3, [pc, #104]	; (8008214 <FATFS_LinkDriverEx+0x94>)
 80081aa:	2100      	movs	r1, #0
 80081ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80081ae:	4b19      	ldr	r3, [pc, #100]	; (8008214 <FATFS_LinkDriverEx+0x94>)
 80081b0:	7a5b      	ldrb	r3, [r3, #9]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	4a17      	ldr	r2, [pc, #92]	; (8008214 <FATFS_LinkDriverEx+0x94>)
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80081be:	4b15      	ldr	r3, [pc, #84]	; (8008214 <FATFS_LinkDriverEx+0x94>)
 80081c0:	7a5b      	ldrb	r3, [r3, #9]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	461a      	mov	r2, r3
 80081c6:	4b13      	ldr	r3, [pc, #76]	; (8008214 <FATFS_LinkDriverEx+0x94>)
 80081c8:	4413      	add	r3, r2
 80081ca:	79fa      	ldrb	r2, [r7, #7]
 80081cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80081ce:	4b11      	ldr	r3, [pc, #68]	; (8008214 <FATFS_LinkDriverEx+0x94>)
 80081d0:	7a5b      	ldrb	r3, [r3, #9]
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	b2d1      	uxtb	r1, r2
 80081d8:	4a0e      	ldr	r2, [pc, #56]	; (8008214 <FATFS_LinkDriverEx+0x94>)
 80081da:	7251      	strb	r1, [r2, #9]
 80081dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80081de:	7dbb      	ldrb	r3, [r7, #22]
 80081e0:	3330      	adds	r3, #48	; 0x30
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	3301      	adds	r3, #1
 80081ec:	223a      	movs	r2, #58	; 0x3a
 80081ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	3302      	adds	r3, #2
 80081f4:	222f      	movs	r2, #47	; 0x2f
 80081f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	3303      	adds	r3, #3
 80081fc:	2200      	movs	r2, #0
 80081fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008204:	7dfb      	ldrb	r3, [r7, #23]
}
 8008206:	4618      	mov	r0, r3
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	2000059c 	.word	0x2000059c

08008218 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008222:	2200      	movs	r2, #0
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff ffaa 	bl	8008180 <FATFS_LinkDriverEx>
 800822c:	4603      	mov	r3, r0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop

08008238 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path  
  * @param  lun : not used   
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8008248:	2301      	movs	r3, #1
 800824a:	73fb      	strb	r3, [r7, #15]
  
  if(disk.nbr >= 1)
 800824c:	4b15      	ldr	r3, [pc, #84]	; (80082a4 <FATFS_UnLinkDriverEx+0x6c>)
 800824e:	7a5b      	ldrb	r3, [r3, #9]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d01e      	beq.n	8008294 <FATFS_UnLinkDriverEx+0x5c>
  {    
    DiskNum = path[0] - '0';
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	3b30      	subs	r3, #48	; 0x30
 800825c:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	4a10      	ldr	r2, [pc, #64]	; (80082a4 <FATFS_UnLinkDriverEx+0x6c>)
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d013      	beq.n	8008294 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	4a0d      	ldr	r2, [pc, #52]	; (80082a4 <FATFS_UnLinkDriverEx+0x6c>)
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	2200      	movs	r2, #0
 8008276:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	4a0a      	ldr	r2, [pc, #40]	; (80082a4 <FATFS_UnLinkDriverEx+0x6c>)
 800827c:	4413      	add	r3, r2
 800827e:	2200      	movs	r2, #0
 8008280:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8008282:	4b08      	ldr	r3, [pc, #32]	; (80082a4 <FATFS_UnLinkDriverEx+0x6c>)
 8008284:	7a5b      	ldrb	r3, [r3, #9]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	3b01      	subs	r3, #1
 800828a:	b2da      	uxtb	r2, r3
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <FATFS_UnLinkDriverEx+0x6c>)
 800828e:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  return ret;
 8008294:	7bfb      	ldrb	r3, [r7, #15]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	2000059c 	.word	0x2000059c

080082a8 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 80082b0:	2100      	movs	r1, #0
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff ffc0 	bl	8008238 <FATFS_UnLinkDriverEx>
 80082b8:	4603      	mov	r3, r0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop

080082c4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80082ce:	f000 f87d 	bl	80083cc <BSP_SD_IsDetected>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d001      	beq.n	80082dc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e016      	b.n	800830a <BSP_SD_Init+0x46>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd, &SDCardInfo);
 80082dc:	490d      	ldr	r1, [pc, #52]	; (8008314 <BSP_SD_Init+0x50>)
 80082de:	480e      	ldr	r0, [pc, #56]	; (8008318 <BSP_SD_Init+0x54>)
 80082e0:	f7fa f996 	bl	8002610 <HAL_SD_Init>
 80082e4:	4603      	mov	r3, r0
 80082e6:	71fb      	strb	r3, [r7, #7]
#ifdef BUS_4BITS
  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10c      	bne.n	8008308 <BSP_SD_Init+0x44>
  {
    /* Enable wide operation */
    if (HAL_SD_WideBusOperation_Config(&hsd, SDIO_BUS_WIDE_4B) != SD_OK)
 80082ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80082f2:	4809      	ldr	r0, [pc, #36]	; (8008318 <BSP_SD_Init+0x54>)
 80082f4:	f7fb f832 	bl	800335c <HAL_SD_WideBusOperation_Config>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <BSP_SD_Init+0x40>
    {
      sd_state = MSD_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	71fb      	strb	r3, [r7, #7]
 8008302:	e001      	b.n	8008308 <BSP_SD_Init+0x44>
    }
    else
    {
      sd_state = MSD_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif
  return sd_state;
 8008308:	79fb      	ldrb	r3, [r7, #7]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	200005b0 	.word	0x200005b0
 8008318:	20000608 	.word	0x20000608

0800831c <BSP_SD_ReadBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af02      	add	r7, sp, #8
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t sd_state;
  if(HAL_SD_ReadBlocks(&hsd, pData, ReadAddr, BlockSize, NumOfBlocks) != SD_OK)
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	9301      	str	r3, [sp, #4]
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008334:	68f9      	ldr	r1, [r7, #12]
 8008336:	4808      	ldr	r0, [pc, #32]	; (8008358 <BSP_SD_ReadBlocks+0x3c>)
 8008338:	f7fa f9e0 	bl	80026fc <HAL_SD_ReadBlocks>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	75fb      	strb	r3, [r7, #23]
 8008346:	e001      	b.n	800834c <BSP_SD_ReadBlocks+0x30>
  }
  else
  {
    sd_state = MSD_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	75fb      	strb	r3, [r7, #23]
  }
  return sd_state;  
 800834c:	7dfb      	ldrb	r3, [r7, #23]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20000608 	.word	0x20000608

0800835c <BSP_SD_WriteBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af02      	add	r7, sp, #8
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t sd_state;
  if(HAL_SD_WriteBlocks(&hsd, pData, WriteAddr, BlockSize, NumOfBlocks) != SD_OK)  
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008374:	68f9      	ldr	r1, [r7, #12]
 8008376:	4808      	ldr	r0, [pc, #32]	; (8008398 <BSP_SD_WriteBlocks+0x3c>)
 8008378:	f7fa fb20 	bl	80029bc <HAL_SD_WriteBlocks>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	75fb      	strb	r3, [r7, #23]
 8008386:	e001      	b.n	800838c <BSP_SD_WriteBlocks+0x30>
  }
  else
  {
    sd_state = MSD_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	75fb      	strb	r3, [r7, #23]
  }
  return sd_state;  
 800838c:	7dfb      	ldrb	r3, [r7, #23]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000608 	.word	0x20000608

0800839c <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  return(HAL_SD_GetStatus(&hsd));
 80083a0:	4802      	ldr	r0, [pc, #8]	; (80083ac <BSP_SD_GetStatus+0x10>)
 80083a2:	f7fb f867 	bl	8003474 <HAL_SD_GetStatus>
 80083a6:	4603      	mov	r3, r0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20000608 	.word	0x20000608

080083b0 <BSP_SD_GetCardInfo>:
/**
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef* CardInfo)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&hsd, CardInfo);
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	4803      	ldr	r0, [pc, #12]	; (80083c8 <BSP_SD_GetCardInfo+0x18>)
 80083bc:	f7fa fcca 	bl	8002d54 <HAL_SD_Get_CardInfo>
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	20000608 	.word	0x20000608

080083cc <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80083d2:	2301      	movs	r3, #1
 80083d4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	b2db      	uxtb	r3, r3
}
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop

080083e8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
  return 0;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <MX_GPIO_Init>:
#include "gpio.h"

void MX_GPIO_Init(void)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80083fe:	2300      	movs	r3, #0
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	4a1e      	ldr	r2, [pc, #120]	; (800847c <MX_GPIO_Init+0x84>)
 8008404:	4b1d      	ldr	r3, [pc, #116]	; (800847c <MX_GPIO_Init+0x84>)
 8008406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800840c:	6313      	str	r3, [r2, #48]	; 0x30
 800840e:	4b1b      	ldr	r3, [pc, #108]	; (800847c <MX_GPIO_Init+0x84>)
 8008410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800841a:	2300      	movs	r3, #0
 800841c:	60bb      	str	r3, [r7, #8]
 800841e:	4a17      	ldr	r2, [pc, #92]	; (800847c <MX_GPIO_Init+0x84>)
 8008420:	4b16      	ldr	r3, [pc, #88]	; (800847c <MX_GPIO_Init+0x84>)
 8008422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008424:	f043 0304 	orr.w	r3, r3, #4
 8008428:	6313      	str	r3, [r2, #48]	; 0x30
 800842a:	4b14      	ldr	r3, [pc, #80]	; (800847c <MX_GPIO_Init+0x84>)
 800842c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842e:	f003 0304 	and.w	r3, r3, #4
 8008432:	60bb      	str	r3, [r7, #8]
 8008434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008436:	2300      	movs	r3, #0
 8008438:	607b      	str	r3, [r7, #4]
 800843a:	4a10      	ldr	r2, [pc, #64]	; (800847c <MX_GPIO_Init+0x84>)
 800843c:	4b0f      	ldr	r3, [pc, #60]	; (800847c <MX_GPIO_Init+0x84>)
 800843e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008440:	f043 0301 	orr.w	r3, r3, #1
 8008444:	6313      	str	r3, [r2, #48]	; 0x30
 8008446:	4b0d      	ldr	r3, [pc, #52]	; (800847c <MX_GPIO_Init+0x84>)
 8008448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	607b      	str	r3, [r7, #4]
 8008450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008452:	2300      	movs	r3, #0
 8008454:	603b      	str	r3, [r7, #0]
 8008456:	4a09      	ldr	r2, [pc, #36]	; (800847c <MX_GPIO_Init+0x84>)
 8008458:	4b08      	ldr	r3, [pc, #32]	; (800847c <MX_GPIO_Init+0x84>)
 800845a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845c:	f043 0308 	orr.w	r3, r3, #8
 8008460:	6313      	str	r3, [r2, #48]	; 0x30
 8008462:	4b06      	ldr	r3, [pc, #24]	; (800847c <MX_GPIO_Init+0x84>)
 8008464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008466:	f003 0308 	and.w	r3, r3, #8
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	683b      	ldr	r3, [r7, #0]

}
 800846e:	bf00      	nop
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	40023800 	.word	0x40023800

08008480 <_Z10TestSDCardv>:

FATFS SDFatFs; /* File system object for SD card logical drive */
FIL MyFile; /* File object */
char SDPath[4]; /* SD card logical drive path */

void TestSDCard() {
 8008480:	b5b0      	push	{r4, r5, r7, lr}
 8008482:	b0a6      	sub	sp, #152	; 0x98
 8008484:	af00      	add	r7, sp, #0
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 8008486:	4b42      	ldr	r3, [pc, #264]	; (8008590 <_Z10TestSDCardv+0x110>)
 8008488:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800848c:	461d      	mov	r5, r3
 800848e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008496:	682b      	ldr	r3, [r5, #0]
 8008498:	7023      	strb	r3, [r4, #0]
	uint8_t rtext[100];
	FRESULT ret = FR_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) {
 80084a0:	493c      	ldr	r1, [pc, #240]	; (8008594 <_Z10TestSDCardv+0x114>)
 80084a2:	483d      	ldr	r0, [pc, #244]	; (8008598 <_Z10TestSDCardv+0x118>)
 80084a4:	f7ff feb8 	bl	8008218 <FATFS_LinkDriver>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	bf14      	ite	ne
 80084ae:	2301      	movne	r3, #1
 80084b0:	2300      	moveq	r3, #0
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <_Z10TestSDCardv+0x3c>
		Error_Handler();
 80084b8:	f000 f8fe 	bl	80086b8 <Error_Handler>
	}

	ret = f_mkfs((TCHAR const*) SDPath, 0, 0);
 80084bc:	2200      	movs	r2, #0
 80084be:	2100      	movs	r1, #0
 80084c0:	4834      	ldr	r0, [pc, #208]	; (8008594 <_Z10TestSDCardv+0x114>)
 80084c2:	f7ff f9d7 	bl	8007874 <f_mkfs>
 80084c6:	4603      	mov	r3, r0
 80084c8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (ret != FR_OK) {
 80084cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <_Z10TestSDCardv+0x58>
		Error_Handler();
 80084d4:	f000 f8f0 	bl	80086b8 <Error_Handler>
	}

	if (f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 80084d8:	220a      	movs	r2, #10
 80084da:	4930      	ldr	r1, [pc, #192]	; (800859c <_Z10TestSDCardv+0x11c>)
 80084dc:	4830      	ldr	r0, [pc, #192]	; (80085a0 <_Z10TestSDCardv+0x120>)
 80084de:	f7fe fbc7 	bl	8006c70 <f_open>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	bf14      	ite	ne
 80084e8:	2301      	movne	r3, #1
 80084ea:	2300      	moveq	r3, #0
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <_Z10TestSDCardv+0x76>
		/* 'STM32.TXT' file Open for write Error */
		Error_Handler();
 80084f2:	f000 f8e1 	bl	80086b8 <Error_Handler>
	}
	res = f_write(&MyFile, wtext, sizeof(wtext), (UINT *) &byteswritten);
 80084f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80084fa:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80084fe:	2221      	movs	r2, #33	; 0x21
 8008500:	4827      	ldr	r0, [pc, #156]	; (80085a0 <_Z10TestSDCardv+0x120>)
 8008502:	f7fe ff2b 	bl	800735c <f_write>
 8008506:	4603      	mov	r3, r0
 8008508:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	if ((byteswritten == 0) || (res != FR_OK)) {
 800850c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <_Z10TestSDCardv+0x9c>
 8008514:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <_Z10TestSDCardv+0xa0>
		/* 'STM32.TXT' file Write or EOF Error */
		Error_Handler();
 800851c:	f000 f8cc 	bl	80086b8 <Error_Handler>
	}
	f_close(&MyFile);
 8008520:	481f      	ldr	r0, [pc, #124]	; (80085a0 <_Z10TestSDCardv+0x120>)
 8008522:	f7ff f97f 	bl	8007824 <f_close>

	if (f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK) {
 8008526:	2201      	movs	r2, #1
 8008528:	491c      	ldr	r1, [pc, #112]	; (800859c <_Z10TestSDCardv+0x11c>)
 800852a:	481d      	ldr	r0, [pc, #116]	; (80085a0 <_Z10TestSDCardv+0x120>)
 800852c:	f7fe fba0 	bl	8006c70 <f_open>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	bf14      	ite	ne
 8008536:	2301      	movne	r3, #1
 8008538:	2300      	moveq	r3, #0
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <_Z10TestSDCardv+0xc4>
		/* 'STM32.TXT' file Open for read Error */
		Error_Handler();
 8008540:	f000 f8ba 	bl	80086b8 <Error_Handler>
	}
	res = f_read(&MyFile, rtext, sizeof(rtext), (UINT*) &bytesread);
 8008544:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008548:	1d39      	adds	r1, r7, #4
 800854a:	2264      	movs	r2, #100	; 0x64
 800854c:	4814      	ldr	r0, [pc, #80]	; (80085a0 <_Z10TestSDCardv+0x120>)
 800854e:	f7fe fd99 	bl	8007084 <f_read>
 8008552:	4603      	mov	r3, r0
 8008554:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	if ((bytesread == 0) || (res != FR_OK)) {
 8008558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800855c:	2b00      	cmp	r3, #0
 800855e:	d003      	beq.n	8008568 <_Z10TestSDCardv+0xe8>
 8008560:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <_Z10TestSDCardv+0xec>
		/* 'STM32.TXT' file Read or EOF Error */
		Error_Handler();
 8008568:	f000 f8a6 	bl	80086b8 <Error_Handler>
	}
	f_close(&MyFile);
 800856c:	480c      	ldr	r0, [pc, #48]	; (80085a0 <_Z10TestSDCardv+0x120>)
 800856e:	f7ff f959 	bl	8007824 <f_close>

	if ((bytesread != byteswritten)) {
 8008572:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008576:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800857a:	429a      	cmp	r2, r3
 800857c:	d001      	beq.n	8008582 <_Z10TestSDCardv+0x102>
		Error_Handler();
 800857e:	f000 f89b 	bl	80086b8 <Error_Handler>
	}

	FATFS_UnLinkDriver(SDPath);
 8008582:	4804      	ldr	r0, [pc, #16]	; (8008594 <_Z10TestSDCardv+0x114>)
 8008584:	f7ff fe90 	bl	80082a8 <FATFS_UnLinkDriver>
}
 8008588:	bf00      	nop
 800858a:	3798      	adds	r7, #152	; 0x98
 800858c:	46bd      	mov	sp, r7
 800858e:	bdb0      	pop	{r4, r5, r7, pc}
 8008590:	08008c48 	.word	0x08008c48
 8008594:	20000578 	.word	0x20000578
 8008598:	08008c7c 	.word	0x08008c7c
 800859c:	08008c3c 	.word	0x08008c3c
 80085a0:	2000034c 	.word	0x2000034c

080085a4 <main>:

	/*##-11- Unlink the RAM disk I/O driver ####################################*/
	FATFS_UnLinkDriver(SDPath);
}

int main(void) {
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
	HAL_Init();
 80085a8:	f7f8 fdb8 	bl	800111c <HAL_Init>
	SystemClock_Config();
 80085ac:	f000 f80a 	bl	80085c4 <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 80085b0:	f7ff ff22 	bl	80083f8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80085b4:	f000 f994 	bl	80088e0 <MX_USART1_UART_Init>
	MX_SDIO_SD_Init();
 80085b8:	f000 f88e 	bl	80086d8 <MX_SDIO_SD_Init>

	TestSDCard();
 80085bc:	f7ff ff60 	bl	8008480 <_Z10TestSDCardv>
	while (1) {
 80085c0:	e7fe      	b.n	80085c0 <main+0x1c>
 80085c2:	bf00      	nop

080085c4 <_Z18SystemClock_Configv>:
	}
}

void SystemClock_Config(void) {
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b094      	sub	sp, #80	; 0x50
 80085c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 80085ca:	2300      	movs	r3, #0
 80085cc:	60bb      	str	r3, [r7, #8]
 80085ce:	4a37      	ldr	r2, [pc, #220]	; (80086ac <_Z18SystemClock_Configv+0xe8>)
 80085d0:	4b36      	ldr	r3, [pc, #216]	; (80086ac <_Z18SystemClock_Configv+0xe8>)
 80085d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085d8:	6413      	str	r3, [r2, #64]	; 0x40
 80085da:	4b34      	ldr	r3, [pc, #208]	; (80086ac <_Z18SystemClock_Configv+0xe8>)
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085e2:	60bb      	str	r3, [r7, #8]
 80085e4:	68bb      	ldr	r3, [r7, #8]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80085e6:	2300      	movs	r3, #0
 80085e8:	607b      	str	r3, [r7, #4]
 80085ea:	4a31      	ldr	r2, [pc, #196]	; (80086b0 <_Z18SystemClock_Configv+0xec>)
 80085ec:	4b30      	ldr	r3, [pc, #192]	; (80086b0 <_Z18SystemClock_Configv+0xec>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	4b2e      	ldr	r3, [pc, #184]	; (80086b0 <_Z18SystemClock_Configv+0xec>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80085fe:	607b      	str	r3, [r7, #4]
 8008600:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008602:	2301      	movs	r3, #1
 8008604:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800860c:	2302      	movs	r3, #2
 800860e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008610:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008614:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 24;
 8008616:	2318      	movs	r3, #24
 8008618:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800861a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800861e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008620:	2302      	movs	r3, #2
 8008622:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8008624:	2308      	movs	r3, #8
 8008626:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8008628:	f107 0320 	add.w	r3, r7, #32
 800862c:	4618      	mov	r0, r3
 800862e:	f7f9 fa41 	bl	8001ab4 <HAL_RCC_OscConfig>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	bf14      	ite	ne
 8008638:	2301      	movne	r3, #1
 800863a:	2300      	moveq	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <_Z18SystemClock_Configv+0x82>
		Error_Handler();
 8008642:	f000 f839 	bl	80086b8 <Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008646:	230f      	movs	r3, #15
 8008648:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800864a:	2302      	movs	r3, #2
 800864c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800864e:	2300      	movs	r3, #0
 8008650:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008652:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008656:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800865c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800865e:	f107 030c 	add.w	r3, r7, #12
 8008662:	2105      	movs	r1, #5
 8008664:	4618      	mov	r0, r3
 8008666:	f7f9 fd31 	bl	80020cc <HAL_RCC_ClockConfig>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	bf14      	ite	ne
 8008670:	2301      	movne	r3, #1
 8008672:	2300      	moveq	r3, #0
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <_Z18SystemClock_Configv+0xba>
		Error_Handler();
 800867a:	f000 f81d 	bl	80086b8 <Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800867e:	f7f9 ff77 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 8008682:	4602      	mov	r2, r0
 8008684:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <_Z18SystemClock_Configv+0xf0>)
 8008686:	fba3 2302 	umull	r2, r3, r3, r2
 800868a:	099b      	lsrs	r3, r3, #6
 800868c:	4618      	mov	r0, r3
 800868e:	f7f8 feaf 	bl	80013f0 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008692:	2004      	movs	r0, #4
 8008694:	f7f8 feb8 	bl	8001408 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008698:	2200      	movs	r2, #0
 800869a:	2100      	movs	r1, #0
 800869c:	f04f 30ff 	mov.w	r0, #4294967295
 80086a0:	f7f8 fe7a 	bl	8001398 <HAL_NVIC_SetPriority>
}
 80086a4:	bf00      	nop
 80086a6:	3750      	adds	r7, #80	; 0x50
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	40023800 	.word	0x40023800
 80086b0:	40007000 	.word	0x40007000
 80086b4:	10624dd3 	.word	0x10624dd3

080086b8 <Error_Handler>:

void Error_Handler(void) {
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
	while (1) {
 80086bc:	e7fe      	b.n	80086bc <Error_Handler+0x4>
 80086be:	bf00      	nop

080086c0 <assert_failed>:
	}
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t* file, uint32_t line) {
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop

080086d8 <MX_SDIO_SD_Init>:
HAL_SD_CardInfoTypedef SDCardInfo;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80086d8:	b480      	push	{r7}
 80086da:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 80086dc:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <MX_SDIO_SD_Init+0x38>)
 80086de:	4a0d      	ldr	r2, [pc, #52]	; (8008714 <MX_SDIO_SD_Init+0x3c>)
 80086e0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80086e2:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <MX_SDIO_SD_Init+0x38>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80086e8:	4b09      	ldr	r3, [pc, #36]	; (8008710 <MX_SDIO_SD_Init+0x38>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80086ee:	4b08      	ldr	r3, [pc, #32]	; (8008710 <MX_SDIO_SD_Init+0x38>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80086f4:	4b06      	ldr	r3, [pc, #24]	; (8008710 <MX_SDIO_SD_Init+0x38>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80086fa:	4b05      	ldr	r3, [pc, #20]	; (8008710 <MX_SDIO_SD_Init+0x38>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8008700:	4b03      	ldr	r3, [pc, #12]	; (8008710 <MX_SDIO_SD_Init+0x38>)
 8008702:	2202      	movs	r2, #2
 8008704:	619a      	str	r2, [r3, #24]

}
 8008706:	bf00      	nop
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	20000608 	.word	0x20000608
 8008714:	40012c00 	.word	0x40012c00

08008718 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(sdHandle->Instance==SDIO)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a1a      	ldr	r2, [pc, #104]	; (8008790 <HAL_SD_MspInit+0x78>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d12e      	bne.n	8008788 <HAL_SD_MspInit+0x70>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800872a:	2300      	movs	r3, #0
 800872c:	60bb      	str	r3, [r7, #8]
 800872e:	4a19      	ldr	r2, [pc, #100]	; (8008794 <HAL_SD_MspInit+0x7c>)
 8008730:	4b18      	ldr	r3, [pc, #96]	; (8008794 <HAL_SD_MspInit+0x7c>)
 8008732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008738:	6453      	str	r3, [r2, #68]	; 0x44
 800873a:	4b16      	ldr	r3, [pc, #88]	; (8008794 <HAL_SD_MspInit+0x7c>)
 800873c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008742:	60bb      	str	r3, [r7, #8]
 8008744:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8008746:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800874a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800874c:	2302      	movs	r3, #2
 800874e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008750:	2300      	movs	r3, #0
 8008752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008754:	2303      	movs	r3, #3
 8008756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008758:	230c      	movs	r3, #12
 800875a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800875c:	f107 030c 	add.w	r3, r7, #12
 8008760:	4619      	mov	r1, r3
 8008762:	480d      	ldr	r0, [pc, #52]	; (8008798 <HAL_SD_MspInit+0x80>)
 8008764:	f7f8 fe86 	bl	8001474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008768:	2304      	movs	r3, #4
 800876a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800876c:	2302      	movs	r3, #2
 800876e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008770:	2300      	movs	r3, #0
 8008772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008774:	2303      	movs	r3, #3
 8008776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008778:	230c      	movs	r3, #12
 800877a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800877c:	f107 030c 	add.w	r3, r7, #12
 8008780:	4619      	mov	r1, r3
 8008782:	4806      	ldr	r0, [pc, #24]	; (800879c <HAL_SD_MspInit+0x84>)
 8008784:	f7f8 fe76 	bl	8001474 <HAL_GPIO_Init>
  }
}
 8008788:	bf00      	nop
 800878a:	3720      	adds	r7, #32
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	40012c00 	.word	0x40012c00
 8008794:	40023800 	.word	0x40023800
 8008798:	40020800 	.word	0x40020800
 800879c:	40020c00 	.word	0x40020c00

080087a0 <HAL_MspInit>:
#include "stm32f4xx_hal.h"

extern void Error_Handler(void);
void HAL_MspInit(void)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	af00      	add	r7, sp, #0
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087a4:	2003      	movs	r0, #3
 80087a6:	f7f8 fdd7 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80087aa:	2200      	movs	r2, #0
 80087ac:	2100      	movs	r1, #0
 80087ae:	f06f 000b 	mvn.w	r0, #11
 80087b2:	f7f8 fdf1 	bl	8001398 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80087b6:	2200      	movs	r2, #0
 80087b8:	2100      	movs	r1, #0
 80087ba:	f06f 000a 	mvn.w	r0, #10
 80087be:	f7f8 fdeb 	bl	8001398 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80087c2:	2200      	movs	r2, #0
 80087c4:	2100      	movs	r1, #0
 80087c6:	f06f 0009 	mvn.w	r0, #9
 80087ca:	f7f8 fde5 	bl	8001398 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80087ce:	2200      	movs	r2, #0
 80087d0:	2100      	movs	r1, #0
 80087d2:	f06f 0004 	mvn.w	r0, #4
 80087d6:	f7f8 fddf 	bl	8001398 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80087da:	2200      	movs	r2, #0
 80087dc:	2100      	movs	r1, #0
 80087de:	f06f 0003 	mvn.w	r0, #3
 80087e2:	f7f8 fdd9 	bl	8001398 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80087e6:	2200      	movs	r2, #0
 80087e8:	2100      	movs	r1, #0
 80087ea:	f06f 0001 	mvn.w	r0, #1
 80087ee:	f7f8 fdd3 	bl	8001398 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80087f2:	2200      	movs	r2, #0
 80087f4:	2100      	movs	r1, #0
 80087f6:	f04f 30ff 	mov.w	r0, #4294967295
 80087fa:	f7f8 fdcd 	bl	8001398 <HAL_NVIC_SetPriority>

}
 80087fe:	bf00      	nop
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop

08008804 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
}
 8008808:	bf00      	nop
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop

08008814 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8008814:	b480      	push	{r7}
 8008816:	af00      	add	r7, sp, #0
  while (1)
  {
  }
 8008818:	e7fe      	b.n	8008818 <HardFault_Handler+0x4>
 800881a:	bf00      	nop

0800881c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
  while (1)
  {
  }
 8008820:	e7fe      	b.n	8008820 <MemManage_Handler+0x4>
 8008822:	bf00      	nop

08008824 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
  while (1)
  {
  }
 8008828:	e7fe      	b.n	8008828 <BusFault_Handler+0x4>
 800882a:	bf00      	nop

0800882c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
  while (1)
  {
  }
 8008830:	e7fe      	b.n	8008830 <UsageFault_Handler+0x4>
 8008832:	bf00      	nop

08008834 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8008834:	b480      	push	{r7}
 8008836:	af00      	add	r7, sp, #0
}
 8008838:	bf00      	nop
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop

08008844 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8008844:	b480      	push	{r7}
 8008846:	af00      	add	r7, sp, #0
}
 8008848:	bf00      	nop
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop

08008854 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
}
 8008858:	bf00      	nop
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop

08008864 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8008868:	f7f8 fc96 	bl	8001198 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800886c:	f7f8 fdf4 	bl	8001458 <HAL_SYSTICK_IRQHandler>
}
 8008870:	bf00      	nop
 8008872:	bd80      	pop	{r7, pc}

08008874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008874:	b480      	push	{r7}
 8008876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008878:	4a16      	ldr	r2, [pc, #88]	; (80088d4 <SystemInit+0x60>)
 800887a:	4b16      	ldr	r3, [pc, #88]	; (80088d4 <SystemInit+0x60>)
 800887c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008888:	4a13      	ldr	r2, [pc, #76]	; (80088d8 <SystemInit+0x64>)
 800888a:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <SystemInit+0x64>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f043 0301 	orr.w	r3, r3, #1
 8008892:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008894:	4b10      	ldr	r3, [pc, #64]	; (80088d8 <SystemInit+0x64>)
 8008896:	2200      	movs	r2, #0
 8008898:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800889a:	4a0f      	ldr	r2, [pc, #60]	; (80088d8 <SystemInit+0x64>)
 800889c:	4b0e      	ldr	r3, [pc, #56]	; (80088d8 <SystemInit+0x64>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80088a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80088aa:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <SystemInit+0x64>)
 80088ac:	4a0b      	ldr	r2, [pc, #44]	; (80088dc <SystemInit+0x68>)
 80088ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80088b0:	4a09      	ldr	r2, [pc, #36]	; (80088d8 <SystemInit+0x64>)
 80088b2:	4b09      	ldr	r3, [pc, #36]	; (80088d8 <SystemInit+0x64>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80088bc:	4b06      	ldr	r3, [pc, #24]	; (80088d8 <SystemInit+0x64>)
 80088be:	2200      	movs	r2, #0
 80088c0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80088c2:	4b04      	ldr	r3, [pc, #16]	; (80088d4 <SystemInit+0x60>)
 80088c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80088c8:	609a      	str	r2, [r3, #8]
#endif
}
 80088ca:	bf00      	nop
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	e000ed00 	.word	0xe000ed00
 80088d8:	40023800 	.word	0x40023800
 80088dc:	24003010 	.word	0x24003010

080088e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80088e4:	4b11      	ldr	r3, [pc, #68]	; (800892c <MX_USART1_UART_Init+0x4c>)
 80088e6:	4a12      	ldr	r2, [pc, #72]	; (8008930 <MX_USART1_UART_Init+0x50>)
 80088e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80088ea:	4b10      	ldr	r3, [pc, #64]	; (800892c <MX_USART1_UART_Init+0x4c>)
 80088ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80088f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80088f2:	4b0e      	ldr	r3, [pc, #56]	; (800892c <MX_USART1_UART_Init+0x4c>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80088f8:	4b0c      	ldr	r3, [pc, #48]	; (800892c <MX_USART1_UART_Init+0x4c>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80088fe:	4b0b      	ldr	r3, [pc, #44]	; (800892c <MX_USART1_UART_Init+0x4c>)
 8008900:	2200      	movs	r2, #0
 8008902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008904:	4b09      	ldr	r3, [pc, #36]	; (800892c <MX_USART1_UART_Init+0x4c>)
 8008906:	220c      	movs	r2, #12
 8008908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800890a:	4b08      	ldr	r3, [pc, #32]	; (800892c <MX_USART1_UART_Init+0x4c>)
 800890c:	2200      	movs	r2, #0
 800890e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008910:	4b06      	ldr	r3, [pc, #24]	; (800892c <MX_USART1_UART_Init+0x4c>)
 8008912:	2200      	movs	r2, #0
 8008914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008916:	4805      	ldr	r0, [pc, #20]	; (800892c <MX_USART1_UART_Init+0x4c>)
 8008918:	f7fb fd1e 	bl	8004358 <HAL_UART_Init>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008922:	f7ff fec9 	bl	80086b8 <Error_Handler>
  }

}
 8008926:	bf00      	nop
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20000668 	.word	0x20000668
 8008930:	40011000 	.word	0x40011000

08008934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a12      	ldr	r2, [pc, #72]	; (800898c <HAL_UART_MspInit+0x58>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d11e      	bne.n	8008984 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008946:	2300      	movs	r3, #0
 8008948:	60bb      	str	r3, [r7, #8]
 800894a:	4a11      	ldr	r2, [pc, #68]	; (8008990 <HAL_UART_MspInit+0x5c>)
 800894c:	4b10      	ldr	r3, [pc, #64]	; (8008990 <HAL_UART_MspInit+0x5c>)
 800894e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008950:	f043 0310 	orr.w	r3, r3, #16
 8008954:	6453      	str	r3, [r2, #68]	; 0x44
 8008956:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <HAL_UART_MspInit+0x5c>)
 8008958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895a:	f003 0310 	and.w	r3, r3, #16
 800895e:	60bb      	str	r3, [r7, #8]
 8008960:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008962:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008966:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008968:	2302      	movs	r3, #2
 800896a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800896c:	2301      	movs	r3, #1
 800896e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008970:	2303      	movs	r3, #3
 8008972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008974:	2307      	movs	r3, #7
 8008976:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008978:	f107 030c 	add.w	r3, r7, #12
 800897c:	4619      	mov	r1, r3
 800897e:	4805      	ldr	r0, [pc, #20]	; (8008994 <HAL_UART_MspInit+0x60>)
 8008980:	f7f8 fd78 	bl	8001474 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008984:	bf00      	nop
 8008986:	3720      	adds	r7, #32
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	40011000 	.word	0x40011000
 8008990:	40023800 	.word	0x40023800
 8008994:	40020000 	.word	0x40020000

08008998 <__libc_init_array>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	4b0e      	ldr	r3, [pc, #56]	; (80089d4 <__libc_init_array+0x3c>)
 800899c:	4c0e      	ldr	r4, [pc, #56]	; (80089d8 <__libc_init_array+0x40>)
 800899e:	1ae4      	subs	r4, r4, r3
 80089a0:	10a4      	asrs	r4, r4, #2
 80089a2:	2500      	movs	r5, #0
 80089a4:	461e      	mov	r6, r3
 80089a6:	42a5      	cmp	r5, r4
 80089a8:	d004      	beq.n	80089b4 <__libc_init_array+0x1c>
 80089aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089ae:	4798      	blx	r3
 80089b0:	3501      	adds	r5, #1
 80089b2:	e7f8      	b.n	80089a6 <__libc_init_array+0xe>
 80089b4:	f000 f880 	bl	8008ab8 <_init>
 80089b8:	4c08      	ldr	r4, [pc, #32]	; (80089dc <__libc_init_array+0x44>)
 80089ba:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <__libc_init_array+0x48>)
 80089bc:	1ae4      	subs	r4, r4, r3
 80089be:	10a4      	asrs	r4, r4, #2
 80089c0:	2500      	movs	r5, #0
 80089c2:	461e      	mov	r6, r3
 80089c4:	42a5      	cmp	r5, r4
 80089c6:	d004      	beq.n	80089d2 <__libc_init_array+0x3a>
 80089c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089cc:	4798      	blx	r3
 80089ce:	3501      	adds	r5, #1
 80089d0:	e7f8      	b.n	80089c4 <__libc_init_array+0x2c>
 80089d2:	bd70      	pop	{r4, r5, r6, pc}
 80089d4:	08008e48 	.word	0x08008e48
 80089d8:	08008e48 	.word	0x08008e48
 80089dc:	08008e4c 	.word	0x08008e4c
 80089e0:	08008e48 	.word	0x08008e48

080089e4 <abort>:
 80089e4:	b508      	push	{r3, lr}
 80089e6:	2006      	movs	r0, #6
 80089e8:	f000 f838 	bl	8008a5c <raise>
 80089ec:	2001      	movs	r0, #1
 80089ee:	f000 f861 	bl	8008ab4 <_exit>

080089f2 <memcpy>:
 80089f2:	b510      	push	{r4, lr}
 80089f4:	1e43      	subs	r3, r0, #1
 80089f6:	440a      	add	r2, r1
 80089f8:	4291      	cmp	r1, r2
 80089fa:	d004      	beq.n	8008a06 <memcpy+0x14>
 80089fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a04:	e7f8      	b.n	80089f8 <memcpy+0x6>
 8008a06:	bd10      	pop	{r4, pc}

08008a08 <_raise_r>:
 8008a08:	291f      	cmp	r1, #31
 8008a0a:	b538      	push	{r3, r4, r5, lr}
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	460d      	mov	r5, r1
 8008a10:	d904      	bls.n	8008a1c <_raise_r+0x14>
 8008a12:	2316      	movs	r3, #22
 8008a14:	6003      	str	r3, [r0, #0]
 8008a16:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a1e:	b112      	cbz	r2, 8008a26 <_raise_r+0x1e>
 8008a20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a24:	b94b      	cbnz	r3, 8008a3a <_raise_r+0x32>
 8008a26:	4620      	mov	r0, r4
 8008a28:	f000 f832 	bl	8008a90 <_getpid_r>
 8008a2c:	462a      	mov	r2, r5
 8008a2e:	4601      	mov	r1, r0
 8008a30:	4620      	mov	r0, r4
 8008a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a36:	f000 b819 	b.w	8008a6c <_kill_r>
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d00c      	beq.n	8008a58 <_raise_r+0x50>
 8008a3e:	1c59      	adds	r1, r3, #1
 8008a40:	d103      	bne.n	8008a4a <_raise_r+0x42>
 8008a42:	2316      	movs	r3, #22
 8008a44:	6003      	str	r3, [r0, #0]
 8008a46:	2001      	movs	r0, #1
 8008a48:	bd38      	pop	{r3, r4, r5, pc}
 8008a4a:	2400      	movs	r4, #0
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a52:	4798      	blx	r3
 8008a54:	4620      	mov	r0, r4
 8008a56:	bd38      	pop	{r3, r4, r5, pc}
 8008a58:	2000      	movs	r0, #0
 8008a5a:	bd38      	pop	{r3, r4, r5, pc}

08008a5c <raise>:
 8008a5c:	4b02      	ldr	r3, [pc, #8]	; (8008a68 <raise+0xc>)
 8008a5e:	4601      	mov	r1, r0
 8008a60:	6818      	ldr	r0, [r3, #0]
 8008a62:	f7ff bfd1 	b.w	8008a08 <_raise_r>
 8008a66:	bf00      	nop
 8008a68:	200000f8 	.word	0x200000f8

08008a6c <_kill_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4c07      	ldr	r4, [pc, #28]	; (8008a8c <_kill_r+0x20>)
 8008a70:	2300      	movs	r3, #0
 8008a72:	4605      	mov	r5, r0
 8008a74:	4608      	mov	r0, r1
 8008a76:	4611      	mov	r1, r2
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	f000 f813 	bl	8008aa4 <_kill>
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	d102      	bne.n	8008a88 <_kill_r+0x1c>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	b103      	cbz	r3, 8008a88 <_kill_r+0x1c>
 8008a86:	602b      	str	r3, [r5, #0]
 8008a88:	bd38      	pop	{r3, r4, r5, pc}
 8008a8a:	bf00      	nop
 8008a8c:	200006a8 	.word	0x200006a8

08008a90 <_getpid_r>:
 8008a90:	f000 b800 	b.w	8008a94 <_getpid>

08008a94 <_getpid>:
 8008a94:	4b02      	ldr	r3, [pc, #8]	; (8008aa0 <_getpid+0xc>)
 8008a96:	2258      	movs	r2, #88	; 0x58
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9e:	4770      	bx	lr
 8008aa0:	200006a8 	.word	0x200006a8

08008aa4 <_kill>:
 8008aa4:	4b02      	ldr	r3, [pc, #8]	; (8008ab0 <_kill+0xc>)
 8008aa6:	2258      	movs	r2, #88	; 0x58
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008aae:	4770      	bx	lr
 8008ab0:	200006a8 	.word	0x200006a8

08008ab4 <_exit>:
 8008ab4:	e7fe      	b.n	8008ab4 <_exit>
	...

08008ab8 <_init>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	bf00      	nop
 8008abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008abe:	bc08      	pop	{r3}
 8008ac0:	469e      	mov	lr, r3
 8008ac2:	4770      	bx	lr

08008ac4 <_fini>:
 8008ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac6:	bf00      	nop
 8008ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aca:	bc08      	pop	{r3}
 8008acc:	469e      	mov	lr, r3
 8008ace:	4770      	bx	lr
