
C:\Users\Khiem\Atollic\TrueSTUDIO\ARM_workspace_7.0\cppPrintf_v0_2\Debug\cppPrintf_v0_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070b0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800725c  0800725c  0001725c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800749c  0800749c  0001749c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080074a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          000005a8  20000008  20000008  00020008  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200005b0  200005b0  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000638d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000c761  00000000  00000000  000263c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000205d  00000000  00000000  00032b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b78  00000000  00000000  00034b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a30  00000000  00000000  00035700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000374f  00000000  00000000  00036130  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003987f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002cdc  00000000  00000000  00039900  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000008 	.word	0x20000008
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007244 	.word	0x08007244

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000000c 	.word	0x2000000c
 80001e8:	08007244 	.word	0x08007244

080001ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80001ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000224 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001f2:	e003      	b.n	80001fc <LoopCopyDataInit>

080001f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80001f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001fa:	3104      	adds	r1, #4

080001fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001fc:	480b      	ldr	r0, [pc, #44]	; (800022c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80001fe:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000200:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000202:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000204:	d3f6      	bcc.n	80001f4 <CopyDataInit>
  ldr  r2, =_sbss
 8000206:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000208:	e002      	b.n	8000210 <LoopFillZerobss>

0800020a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800020a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800020c:	f842 3b04 	str.w	r3, [r2], #4

08000210 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000212:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000214:	d3f9      	bcc.n	800020a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000216:	f006 ff5d 	bl	80070d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800021a:	f006 ffed 	bl	80071f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800021e:	f006 fd83 	bl	8006d28 <main>
  bx  lr    
 8000222:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000224:	20030000 	.word	0x20030000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000228:	080074a4 	.word	0x080074a4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800022c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000230:	20000008 	.word	0x20000008
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000234:	20000008 	.word	0x20000008
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000238:	200005b0 	.word	0x200005b0

0800023c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800023c:	e7fe      	b.n	800023c <ADC_IRQHandler>
	...

08000240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000244:	4a0e      	ldr	r2, [pc, #56]	; (8000280 <HAL_Init+0x40>)
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <HAL_Init+0x40>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800024e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000250:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <HAL_Init+0x40>)
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <HAL_Init+0x40>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025c:	4a08      	ldr	r2, [pc, #32]	; (8000280 <HAL_Init+0x40>)
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <HAL_Init+0x40>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000268:	2003      	movs	r0, #3
 800026a:	f000 f907 	bl	800047c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800026e:	2000      	movs	r0, #0
 8000270:	f000 f808 	bl	8000284 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000274:	f006 fec4 	bl	8007000 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000278:	2300      	movs	r3, #0
}
 800027a:	4618      	mov	r0, r3
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40023c00 	.word	0x40023c00

08000284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800028c:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <HAL_InitTick+0x30>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <HAL_InitTick+0x34>)
 8000292:	fba2 2303 	umull	r2, r3, r2, r3
 8000296:	099b      	lsrs	r3, r3, #6
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f93b 	bl	8000514 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800029e:	2200      	movs	r2, #0
 80002a0:	6879      	ldr	r1, [r7, #4]
 80002a2:	f04f 30ff 	mov.w	r0, #4294967295
 80002a6:	f000 f909 	bl	80004bc <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80002aa:	2300      	movs	r3, #0
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000004 	.word	0x20000004
 80002b8:	10624dd3 	.word	0x10624dd3

080002bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick++;
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <HAL_IncTick+0x18>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	3301      	adds	r3, #1
 80002c6:	4a03      	ldr	r2, [pc, #12]	; (80002d4 <HAL_IncTick+0x18>)
 80002c8:	6013      	str	r3, [r2, #0]
}
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	20000050 	.word	0x20000050

080002d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  return uwTick;
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <HAL_GetTick+0x14>)
 80002de:	681b      	ldr	r3, [r3, #0]
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20000050 	.word	0x20000050

080002f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80002fc:	f7ff ffec 	bl	80002d8 <HAL_GetTick>
 8000300:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000302:	bf00      	nop
 8000304:	f7ff ffe8 	bl	80002d8 <HAL_GetTick>
 8000308:	4602      	mov	r2, r0
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	1ad2      	subs	r2, r2, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	429a      	cmp	r2, r3
 8000312:	d3f7      	bcc.n	8000304 <HAL_Delay+0x14>
  {
  }
}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f003 0307 	and.w	r3, r3, #7
 800032a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <NVIC_SetPriorityGrouping+0x44>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000332:	68ba      	ldr	r2, [r7, #8]
 8000334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000338:	4013      	ands	r3, r2
 800033a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800034c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800034e:	4a04      	ldr	r2, [pc, #16]	; (8000360 <NVIC_SetPriorityGrouping+0x44>)
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	60d3      	str	r3, [r2, #12]
}
 8000354:	bf00      	nop
 8000356:	3714      	adds	r7, #20
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000368:	4b04      	ldr	r3, [pc, #16]	; (800037c <NVIC_GetPriorityGrouping+0x18>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000370:	0a1b      	lsrs	r3, r3, #8
}
 8000372:	4618      	mov	r0, r3
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	e000ed00 	.word	0xe000ed00

08000380 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	6039      	str	r1, [r7, #0]
 800038a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800038c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000390:	2b00      	cmp	r3, #0
 8000392:	da0b      	bge.n	80003ac <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000394:	490d      	ldr	r1, [pc, #52]	; (80003cc <NVIC_SetPriority+0x4c>)
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	f003 030f 	and.w	r3, r3, #15
 800039c:	3b04      	subs	r3, #4
 800039e:	683a      	ldr	r2, [r7, #0]
 80003a0:	b2d2      	uxtb	r2, r2
 80003a2:	0112      	lsls	r2, r2, #4
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	440b      	add	r3, r1
 80003a8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003aa:	e009      	b.n	80003c0 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	4908      	ldr	r1, [pc, #32]	; (80003d0 <NVIC_SetPriority+0x50>)
 80003ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b2:	683a      	ldr	r2, [r7, #0]
 80003b4:	b2d2      	uxtb	r2, r2
 80003b6:	0112      	lsls	r2, r2, #4
 80003b8:	b2d2      	uxtb	r2, r2
 80003ba:	440b      	add	r3, r1
 80003bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	e000ed00 	.word	0xe000ed00
 80003d0:	e000e100 	.word	0xe000e100

080003d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b089      	sub	sp, #36	; 0x24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f003 0307 	and.w	r3, r3, #7
 80003e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003e8:	69fb      	ldr	r3, [r7, #28]
 80003ea:	f1c3 0307 	rsb	r3, r3, #7
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	bf28      	it	cs
 80003f2:	2304      	movcs	r3, #4
 80003f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	3304      	adds	r3, #4
 80003fa:	2b06      	cmp	r3, #6
 80003fc:	d902      	bls.n	8000404 <NVIC_EncodePriority+0x30>
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	3b03      	subs	r3, #3
 8000402:	e000      	b.n	8000406 <NVIC_EncodePriority+0x32>
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000408:	2201      	movs	r2, #1
 800040a:	69bb      	ldr	r3, [r7, #24]
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	1e5a      	subs	r2, r3, #1
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	401a      	ands	r2, r3
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800041a:	2101      	movs	r1, #1
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	1e59      	subs	r1, r3, #1
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000428:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800042a:	4618      	mov	r0, r3
 800042c:	3724      	adds	r7, #36	; 0x24
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop

08000438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	3b01      	subs	r3, #1
 8000444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000448:	d301      	bcc.n	800044e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800044a:	2301      	movs	r3, #1
 800044c:	e00f      	b.n	800046e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800044e:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <SysTick_Config+0x40>)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3b01      	subs	r3, #1
 8000454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000456:	210f      	movs	r1, #15
 8000458:	f04f 30ff 	mov.w	r0, #4294967295
 800045c:	f7ff ff90 	bl	8000380 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <SysTick_Config+0x40>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000466:	4b04      	ldr	r3, [pc, #16]	; (8000478 <SysTick_Config+0x40>)
 8000468:	2207      	movs	r2, #7
 800046a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800046c:	2300      	movs	r3, #0
}
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	e000e010 	.word	0xe000e010

0800047c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b07      	cmp	r3, #7
 8000488:	d00f      	beq.n	80004aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2b06      	cmp	r3, #6
 800048e:	d00c      	beq.n	80004aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b05      	cmp	r3, #5
 8000494:	d009      	beq.n	80004aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2b04      	cmp	r3, #4
 800049a:	d006      	beq.n	80004aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b03      	cmp	r3, #3
 80004a0:	d003      	beq.n	80004aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80004a2:	21a4      	movs	r1, #164	; 0xa4
 80004a4:	4804      	ldr	r0, [pc, #16]	; (80004b8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80004a6:	f006 fd3b 	bl	8006f20 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	f7ff ff36 	bl	800031c <NVIC_SetPriorityGrouping>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	0800725c 	.word	0x0800725c

080004bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
 80004c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b0f      	cmp	r3, #15
 80004d2:	d903      	bls.n	80004dc <HAL_NVIC_SetPriority+0x20>
 80004d4:	21bc      	movs	r1, #188	; 0xbc
 80004d6:	480e      	ldr	r0, [pc, #56]	; (8000510 <HAL_NVIC_SetPriority+0x54>)
 80004d8:	f006 fd22 	bl	8006f20 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	2b0f      	cmp	r3, #15
 80004e0:	d903      	bls.n	80004ea <HAL_NVIC_SetPriority+0x2e>
 80004e2:	21bd      	movs	r1, #189	; 0xbd
 80004e4:	480a      	ldr	r0, [pc, #40]	; (8000510 <HAL_NVIC_SetPriority+0x54>)
 80004e6:	f006 fd1b 	bl	8006f20 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004ea:	f7ff ff3b 	bl	8000364 <NVIC_GetPriorityGrouping>
 80004ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	68b9      	ldr	r1, [r7, #8]
 80004f4:	6978      	ldr	r0, [r7, #20]
 80004f6:	f7ff ff6d 	bl	80003d4 <NVIC_EncodePriority>
 80004fa:	4602      	mov	r2, r0
 80004fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000500:	4611      	mov	r1, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ff3c 	bl	8000380 <NVIC_SetPriority>
}
 8000508:	bf00      	nop
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	0800725c 	.word	0x0800725c

08000514 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff ff8b 	bl	8000438 <SysTick_Config>
 8000522:	4603      	mov	r3, r0
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b04      	cmp	r3, #4
 8000538:	d007      	beq.n	800054a <HAL_SYSTICK_CLKSourceConfig+0x1e>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d004      	beq.n	800054a <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8000540:	f240 11b3 	movw	r1, #435	; 0x1b3
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <HAL_SYSTICK_CLKSourceConfig+0x48>)
 8000546:	f006 fceb 	bl	8006f20 <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b04      	cmp	r3, #4
 800054e:	d106      	bne.n	800055e <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000550:	4a09      	ldr	r2, [pc, #36]	; (8000578 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f043 0304 	orr.w	r3, r3, #4
 800055a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800055c:	e005      	b.n	800056a <HAL_SYSTICK_CLKSourceConfig+0x3e>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800055e:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f023 0304 	bic.w	r3, r3, #4
 8000568:	6013      	str	r3, [r2, #0]
  }
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	0800725c 	.word	0x0800725c
 8000578:	e000e010 	.word	0xe000e010

0800057c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000580:	f000 f802 	bl	8000588 <HAL_SYSTICK_Callback>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a42      	ldr	r2, [pc, #264]	; (80006bc <HAL_GPIO_Init+0x124>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d02b      	beq.n	800060e <HAL_GPIO_Init+0x76>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a41      	ldr	r2, [pc, #260]	; (80006c0 <HAL_GPIO_Init+0x128>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d027      	beq.n	800060e <HAL_GPIO_Init+0x76>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a40      	ldr	r2, [pc, #256]	; (80006c4 <HAL_GPIO_Init+0x12c>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d023      	beq.n	800060e <HAL_GPIO_Init+0x76>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a3f      	ldr	r2, [pc, #252]	; (80006c8 <HAL_GPIO_Init+0x130>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d01f      	beq.n	800060e <HAL_GPIO_Init+0x76>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a3e      	ldr	r2, [pc, #248]	; (80006cc <HAL_GPIO_Init+0x134>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d01b      	beq.n	800060e <HAL_GPIO_Init+0x76>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a3d      	ldr	r2, [pc, #244]	; (80006d0 <HAL_GPIO_Init+0x138>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d017      	beq.n	800060e <HAL_GPIO_Init+0x76>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a3c      	ldr	r2, [pc, #240]	; (80006d4 <HAL_GPIO_Init+0x13c>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d013      	beq.n	800060e <HAL_GPIO_Init+0x76>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a3b      	ldr	r2, [pc, #236]	; (80006d8 <HAL_GPIO_Init+0x140>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d00f      	beq.n	800060e <HAL_GPIO_Init+0x76>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <HAL_GPIO_Init+0x144>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d00b      	beq.n	800060e <HAL_GPIO_Init+0x76>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a39      	ldr	r2, [pc, #228]	; (80006e0 <HAL_GPIO_Init+0x148>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d007      	beq.n	800060e <HAL_GPIO_Init+0x76>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a38      	ldr	r2, [pc, #224]	; (80006e4 <HAL_GPIO_Init+0x14c>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d003      	beq.n	800060e <HAL_GPIO_Init+0x76>
 8000606:	21c5      	movs	r1, #197	; 0xc5
 8000608:	4837      	ldr	r0, [pc, #220]	; (80006e8 <HAL_GPIO_Init+0x150>)
 800060a:	f006 fc89 	bl	8006f20 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	b29b      	uxth	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d103      	bne.n	8000620 <HAL_GPIO_Init+0x88>
 8000618:	21c6      	movs	r1, #198	; 0xc6
 800061a:	4833      	ldr	r0, [pc, #204]	; (80006e8 <HAL_GPIO_Init+0x150>)
 800061c:	f006 fc80 	bl	8006f20 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d035      	beq.n	8000694 <HAL_GPIO_Init+0xfc>
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d031      	beq.n	8000694 <HAL_GPIO_Init+0xfc>
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	2b11      	cmp	r3, #17
 8000636:	d02d      	beq.n	8000694 <HAL_GPIO_Init+0xfc>
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	2b02      	cmp	r3, #2
 800063e:	d029      	beq.n	8000694 <HAL_GPIO_Init+0xfc>
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	2b12      	cmp	r3, #18
 8000646:	d025      	beq.n	8000694 <HAL_GPIO_Init+0xfc>
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	4a27      	ldr	r2, [pc, #156]	; (80006ec <HAL_GPIO_Init+0x154>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d020      	beq.n	8000694 <HAL_GPIO_Init+0xfc>
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	4a26      	ldr	r2, [pc, #152]	; (80006f0 <HAL_GPIO_Init+0x158>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d01b      	beq.n	8000694 <HAL_GPIO_Init+0xfc>
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	4a24      	ldr	r2, [pc, #144]	; (80006f4 <HAL_GPIO_Init+0x15c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d016      	beq.n	8000694 <HAL_GPIO_Init+0xfc>
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	4a23      	ldr	r2, [pc, #140]	; (80006f8 <HAL_GPIO_Init+0x160>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d011      	beq.n	8000694 <HAL_GPIO_Init+0xfc>
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <HAL_GPIO_Init+0x164>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d00c      	beq.n	8000694 <HAL_GPIO_Init+0xfc>
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	4a20      	ldr	r2, [pc, #128]	; (8000700 <HAL_GPIO_Init+0x168>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d007      	beq.n	8000694 <HAL_GPIO_Init+0xfc>
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	2b03      	cmp	r3, #3
 800068a:	d003      	beq.n	8000694 <HAL_GPIO_Init+0xfc>
 800068c:	21c7      	movs	r1, #199	; 0xc7
 800068e:	4816      	ldr	r0, [pc, #88]	; (80006e8 <HAL_GPIO_Init+0x150>)
 8000690:	f006 fc46 	bl	8006f20 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d00b      	beq.n	80006b4 <HAL_GPIO_Init+0x11c>
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d007      	beq.n	80006b4 <HAL_GPIO_Init+0x11c>
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d003      	beq.n	80006b4 <HAL_GPIO_Init+0x11c>
 80006ac:	21c8      	movs	r1, #200	; 0xc8
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <HAL_GPIO_Init+0x150>)
 80006b0:	f006 fc36 	bl	8006f20 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
 80006b8:	e281      	b.n	8000bbe <HAL_GPIO_Init+0x626>
 80006ba:	bf00      	nop
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40020400 	.word	0x40020400
 80006c4:	40020800 	.word	0x40020800
 80006c8:	40020c00 	.word	0x40020c00
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40021400 	.word	0x40021400
 80006d4:	40021800 	.word	0x40021800
 80006d8:	40021c00 	.word	0x40021c00
 80006dc:	40022000 	.word	0x40022000
 80006e0:	40022400 	.word	0x40022400
 80006e4:	40022800 	.word	0x40022800
 80006e8:	08007298 	.word	0x08007298
 80006ec:	10110000 	.word	0x10110000
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10310000 	.word	0x10310000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10220000 	.word	0x10220000
 8000700:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000704:	2201      	movs	r2, #1
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	4013      	ands	r3, r2
 8000716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	429a      	cmp	r2, r3
 800071e:	f040 824b 	bne.w	8000bb8 <HAL_GPIO_Init+0x620>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	2b02      	cmp	r3, #2
 8000728:	d004      	beq.n	8000734 <HAL_GPIO_Init+0x19c>
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	2b12      	cmp	r3, #18
 8000730:	f040 80da 	bne.w	80008e8 <HAL_GPIO_Init+0x350>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	691b      	ldr	r3, [r3, #16]
 8000738:	2b00      	cmp	r3, #0
 800073a:	f000 80b1 	beq.w	80008a0 <HAL_GPIO_Init+0x308>
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	691b      	ldr	r3, [r3, #16]
 8000742:	2b09      	cmp	r3, #9
 8000744:	f000 80ac 	beq.w	80008a0 <HAL_GPIO_Init+0x308>
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	f000 80a7 	beq.w	80008a0 <HAL_GPIO_Init+0x308>
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	2b00      	cmp	r3, #0
 8000758:	f000 80a2 	beq.w	80008a0 <HAL_GPIO_Init+0x308>
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	2b00      	cmp	r3, #0
 8000762:	f000 809d 	beq.w	80008a0 <HAL_GPIO_Init+0x308>
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	691b      	ldr	r3, [r3, #16]
 800076a:	2b00      	cmp	r3, #0
 800076c:	f000 8098 	beq.w	80008a0 <HAL_GPIO_Init+0x308>
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	2b01      	cmp	r3, #1
 8000776:	f000 8093 	beq.w	80008a0 <HAL_GPIO_Init+0x308>
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	2b01      	cmp	r3, #1
 8000780:	f000 808e 	beq.w	80008a0 <HAL_GPIO_Init+0x308>
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	691b      	ldr	r3, [r3, #16]
 8000788:	2b02      	cmp	r3, #2
 800078a:	f000 8089 	beq.w	80008a0 <HAL_GPIO_Init+0x308>
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	2b02      	cmp	r3, #2
 8000794:	f000 8084 	beq.w	80008a0 <HAL_GPIO_Init+0x308>
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	691b      	ldr	r3, [r3, #16]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d07f      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	691b      	ldr	r3, [r3, #16]
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	d07b      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	d077      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	691b      	ldr	r3, [r3, #16]
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d073      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d06f      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	691b      	ldr	r3, [r3, #16]
 80007c4:	2b05      	cmp	r3, #5
 80007c6:	d06b      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	2b05      	cmp	r3, #5
 80007ce:	d067      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	2b09      	cmp	r3, #9
 80007d6:	d063      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	2b06      	cmp	r3, #6
 80007de:	d05f      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	691b      	ldr	r3, [r3, #16]
 80007e4:	2b09      	cmp	r3, #9
 80007e6:	d05b      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	2b07      	cmp	r3, #7
 80007ee:	d057      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	691b      	ldr	r3, [r3, #16]
 80007f4:	2b07      	cmp	r3, #7
 80007f6:	d053      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	691b      	ldr	r3, [r3, #16]
 80007fc:	2b07      	cmp	r3, #7
 80007fe:	d04f      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	691b      	ldr	r3, [r3, #16]
 8000804:	2b08      	cmp	r3, #8
 8000806:	d04b      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	691b      	ldr	r3, [r3, #16]
 800080c:	2b08      	cmp	r3, #8
 800080e:	d047      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	691b      	ldr	r3, [r3, #16]
 8000814:	2b08      	cmp	r3, #8
 8000816:	d043      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	691b      	ldr	r3, [r3, #16]
 800081c:	2b09      	cmp	r3, #9
 800081e:	d03f      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	691b      	ldr	r3, [r3, #16]
 8000824:	2b09      	cmp	r3, #9
 8000826:	d03b      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	691b      	ldr	r3, [r3, #16]
 800082c:	2b0a      	cmp	r3, #10
 800082e:	d037      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	691b      	ldr	r3, [r3, #16]
 8000834:	2b0a      	cmp	r3, #10
 8000836:	d033      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	691b      	ldr	r3, [r3, #16]
 800083c:	2b0b      	cmp	r3, #11
 800083e:	d02f      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	2b0c      	cmp	r3, #12
 8000846:	d02b      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	691b      	ldr	r3, [r3, #16]
 800084c:	2b0c      	cmp	r3, #12
 800084e:	d027      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	2b0d      	cmp	r3, #13
 8000856:	d023      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d01f      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	2b05      	cmp	r3, #5
 8000866:	d01b      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	2b05      	cmp	r3, #5
 800086e:	d017      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	2b05      	cmp	r3, #5
 8000876:	d013      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	691b      	ldr	r3, [r3, #16]
 800087c:	2b08      	cmp	r3, #8
 800087e:	d00f      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	691b      	ldr	r3, [r3, #16]
 8000884:	2b08      	cmp	r3, #8
 8000886:	d00b      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	2b0c      	cmp	r3, #12
 800088e:	d007      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	2b06      	cmp	r3, #6
 8000896:	d003      	beq.n	80008a0 <HAL_GPIO_Init+0x308>
 8000898:	21d9      	movs	r1, #217	; 0xd9
 800089a:	4888      	ldr	r0, [pc, #544]	; (8000abc <HAL_GPIO_Init+0x524>)
 800089c:	f006 fb40 	bl	8006f20 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	08da      	lsrs	r2, r3, #3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3208      	adds	r2, #8
 80008a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	f003 0307 	and.w	r3, r3, #7
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	220f      	movs	r2, #15
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4013      	ands	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	691a      	ldr	r2, [r3, #16]
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	08da      	lsrs	r2, r3, #3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3208      	adds	r2, #8
 80008e2:	69b9      	ldr	r1, [r7, #24]
 80008e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	2203      	movs	r2, #3
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f003 0203 	and.w	r2, r3, #3
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4313      	orrs	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d00b      	beq.n	800093c <HAL_GPIO_Init+0x3a4>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d007      	beq.n	800093c <HAL_GPIO_Init+0x3a4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000930:	2b11      	cmp	r3, #17
 8000932:	d003      	beq.n	800093c <HAL_GPIO_Init+0x3a4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b12      	cmp	r3, #18
 800093a:	d144      	bne.n	80009c6 <HAL_GPIO_Init+0x42e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d00f      	beq.n	8000964 <HAL_GPIO_Init+0x3cc>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d00b      	beq.n	8000964 <HAL_GPIO_Init+0x3cc>
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	2b02      	cmp	r3, #2
 8000952:	d007      	beq.n	8000964 <HAL_GPIO_Init+0x3cc>
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d003      	beq.n	8000964 <HAL_GPIO_Init+0x3cc>
 800095c:	21ec      	movs	r1, #236	; 0xec
 800095e:	4857      	ldr	r0, [pc, #348]	; (8000abc <HAL_GPIO_Init+0x524>)
 8000960:	f006 fade 	bl	8006f20 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4013      	ands	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68da      	ldr	r2, [r3, #12]
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4313      	orrs	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800099a:	2201      	movs	r2, #1
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	4013      	ands	r3, r2
 80009a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	091b      	lsrs	r3, r3, #4
 80009b0:	f003 0201 	and.w	r2, r3, #1
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	4313      	orrs	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	2203      	movs	r2, #3
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	689a      	ldr	r2, [r3, #8]
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 80da 	beq.w	8000bb8 <HAL_GPIO_Init+0x620>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4a2d      	ldr	r2, [pc, #180]	; (8000ac0 <HAL_GPIO_Init+0x528>)
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <HAL_GPIO_Init+0x528>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a12:	6453      	str	r3, [r2, #68]	; 0x44
 8000a14:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <HAL_GPIO_Init+0x528>)
 8000a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a20:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <HAL_GPIO_Init+0x52c>)
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3302      	adds	r3, #2
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	220f      	movs	r2, #15
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4013      	ands	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <HAL_GPIO_Init+0x530>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d051      	beq.n	8000af0 <HAL_GPIO_Init+0x558>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <HAL_GPIO_Init+0x534>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d031      	beq.n	8000ab8 <HAL_GPIO_Init+0x520>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a1e      	ldr	r2, [pc, #120]	; (8000ad0 <HAL_GPIO_Init+0x538>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d02b      	beq.n	8000ab4 <HAL_GPIO_Init+0x51c>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <HAL_GPIO_Init+0x53c>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d025      	beq.n	8000ab0 <HAL_GPIO_Init+0x518>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <HAL_GPIO_Init+0x540>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d01f      	beq.n	8000aac <HAL_GPIO_Init+0x514>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <HAL_GPIO_Init+0x544>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d019      	beq.n	8000aa8 <HAL_GPIO_Init+0x510>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a1a      	ldr	r2, [pc, #104]	; (8000ae0 <HAL_GPIO_Init+0x548>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d013      	beq.n	8000aa4 <HAL_GPIO_Init+0x50c>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <HAL_GPIO_Init+0x54c>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d00d      	beq.n	8000aa0 <HAL_GPIO_Init+0x508>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <HAL_GPIO_Init+0x550>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d007      	beq.n	8000a9c <HAL_GPIO_Init+0x504>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a17      	ldr	r2, [pc, #92]	; (8000aec <HAL_GPIO_Init+0x554>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d101      	bne.n	8000a98 <HAL_GPIO_Init+0x500>
 8000a94:	2309      	movs	r3, #9
 8000a96:	e02c      	b.n	8000af2 <HAL_GPIO_Init+0x55a>
 8000a98:	230a      	movs	r3, #10
 8000a9a:	e02a      	b.n	8000af2 <HAL_GPIO_Init+0x55a>
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	e028      	b.n	8000af2 <HAL_GPIO_Init+0x55a>
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	e026      	b.n	8000af2 <HAL_GPIO_Init+0x55a>
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	e024      	b.n	8000af2 <HAL_GPIO_Init+0x55a>
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	e022      	b.n	8000af2 <HAL_GPIO_Init+0x55a>
 8000aac:	2304      	movs	r3, #4
 8000aae:	e020      	b.n	8000af2 <HAL_GPIO_Init+0x55a>
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	e01e      	b.n	8000af2 <HAL_GPIO_Init+0x55a>
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	e01c      	b.n	8000af2 <HAL_GPIO_Init+0x55a>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e01a      	b.n	8000af2 <HAL_GPIO_Init+0x55a>
 8000abc:	08007298 	.word	0x08007298
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40013800 	.word	0x40013800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40021400 	.word	0x40021400
 8000ae0:	40021800 	.word	0x40021800
 8000ae4:	40021c00 	.word	0x40021c00
 8000ae8:	40022000 	.word	0x40022000
 8000aec:	40022400 	.word	0x40022400
 8000af0:	2300      	movs	r3, #0
 8000af2:	69fa      	ldr	r2, [r7, #28]
 8000af4:	f002 0203 	and.w	r2, r2, #3
 8000af8:	0092      	lsls	r2, r2, #2
 8000afa:	4093      	lsls	r3, r2
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b02:	4933      	ldr	r1, [pc, #204]	; (8000bd0 <HAL_GPIO_Init+0x638>)
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	089b      	lsrs	r3, r3, #2
 8000b08:	3302      	adds	r3, #2
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b10:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <HAL_GPIO_Init+0x63c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_Init+0x59c>
        {
          temp |= iocurrent;
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b34:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <HAL_GPIO_Init+0x63c>)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b3a:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <HAL_GPIO_Init+0x63c>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	4013      	ands	r3, r2
 8000b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x5c6>
        {
          temp |= iocurrent;
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b5e:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <HAL_GPIO_Init+0x63c>)
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <HAL_GPIO_Init+0x63c>)
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x5f0>
        {
          temp |= iocurrent;
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <HAL_GPIO_Init+0x63c>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_GPIO_Init+0x63c>)
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_Init+0x61a>
        {
          temp |= iocurrent;
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_GPIO_Init+0x63c>)
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	60d3      	str	r3, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	61fb      	str	r3, [r7, #28]
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	f67f ad9f 	bls.w	8000704 <HAL_GPIO_Init+0x16c>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3720      	adds	r7, #32
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40013800 	.word	0x40013800
 8000bd4:	40013c00 	.word	0x40013c00

08000bd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8000be0:	2300      	movs	r3, #0
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d903      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x1c>
 8000bec:	21f5      	movs	r1, #245	; 0xf5
 8000bee:	48a6      	ldr	r0, [pc, #664]	; (8000e88 <HAL_RCC_OscConfig+0x2b0>)
 8000bf0:	f006 f996 	bl	8006f20 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f000 8087 	beq.w	8000d10 <HAL_RCC_OscConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00d      	beq.n	8000c26 <HAL_RCC_OscConfig+0x4e>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c12:	d008      	beq.n	8000c26 <HAL_RCC_OscConfig+0x4e>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c1c:	d003      	beq.n	8000c26 <HAL_RCC_OscConfig+0x4e>
 8000c1e:	21fa      	movs	r1, #250	; 0xfa
 8000c20:	4899      	ldr	r0, [pc, #612]	; (8000e88 <HAL_RCC_OscConfig+0x2b0>)
 8000c22:	f006 f97d 	bl	8006f20 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c26:	4b99      	ldr	r3, [pc, #612]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	d00b      	beq.n	8000c4a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c32:	4b96      	ldr	r3, [pc, #600]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c3a:	2b08      	cmp	r3, #8
 8000c3c:	d111      	bne.n	8000c62 <HAL_RCC_OscConfig+0x8a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c3e:	4b93      	ldr	r3, [pc, #588]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00b      	beq.n	8000c62 <HAL_RCC_OscConfig+0x8a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c4a:	4b90      	ldr	r3, [pc, #576]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d05b      	beq.n	8000d0e <HAL_RCC_OscConfig+0x136>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d157      	bne.n	8000d0e <HAL_RCC_OscConfig+0x136>
      {
        return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e2bd      	b.n	80011de <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c6a:	d106      	bne.n	8000c7a <HAL_RCC_OscConfig+0xa2>
 8000c6c:	4a87      	ldr	r2, [pc, #540]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000c6e:	4b87      	ldr	r3, [pc, #540]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	e01d      	b.n	8000cb6 <HAL_RCC_OscConfig+0xde>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c82:	d10c      	bne.n	8000c9e <HAL_RCC_OscConfig+0xc6>
 8000c84:	4a81      	ldr	r2, [pc, #516]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000c86:	4b81      	ldr	r3, [pc, #516]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4a7e      	ldr	r2, [pc, #504]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000c92:	4b7e      	ldr	r3, [pc, #504]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	e00b      	b.n	8000cb6 <HAL_RCC_OscConfig+0xde>
 8000c9e:	4a7b      	ldr	r2, [pc, #492]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000ca0:	4b7a      	ldr	r3, [pc, #488]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	4a78      	ldr	r2, [pc, #480]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000cac:	4b77      	ldr	r3, [pc, #476]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb4:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d013      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cbe:	f7ff fb0b 	bl	80002d8 <HAL_GetTick>
 8000cc2:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc4:	e008      	b.n	8000cd8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cc6:	f7ff fb07 	bl	80002d8 <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b64      	cmp	r3, #100	; 0x64
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e282      	b.n	80011de <HAL_RCC_OscConfig+0x606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd8:	4b6c      	ldr	r3, [pc, #432]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0f0      	beq.n	8000cc6 <HAL_RCC_OscConfig+0xee>
 8000ce4:	e014      	b.n	8000d10 <HAL_RCC_OscConfig+0x138>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ce6:	f7ff faf7 	bl	80002d8 <HAL_GetTick>
 8000cea:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cec:	e008      	b.n	8000d00 <HAL_RCC_OscConfig+0x128>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cee:	f7ff faf3 	bl	80002d8 <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	2b64      	cmp	r3, #100	; 0x64
 8000cfa:	d901      	bls.n	8000d00 <HAL_RCC_OscConfig+0x128>
          {
            return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e26e      	b.n	80011de <HAL_RCC_OscConfig+0x606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d00:	4b62      	ldr	r3, [pc, #392]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1f0      	bne.n	8000cee <HAL_RCC_OscConfig+0x116>
 8000d0c:	e000      	b.n	8000d10 <HAL_RCC_OscConfig+0x138>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 808e 	beq.w	8000e3a <HAL_RCC_OscConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d008      	beq.n	8000d38 <HAL_RCC_OscConfig+0x160>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d004      	beq.n	8000d38 <HAL_RCC_OscConfig+0x160>
 8000d2e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d32:	4855      	ldr	r0, [pc, #340]	; (8000e88 <HAL_RCC_OscConfig+0x2b0>)
 8000d34:	f006 f8f4 	bl	8006f20 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	2b1f      	cmp	r3, #31
 8000d3e:	d904      	bls.n	8000d4a <HAL_RCC_OscConfig+0x172>
 8000d40:	f240 112d 	movw	r1, #301	; 0x12d
 8000d44:	4850      	ldr	r0, [pc, #320]	; (8000e88 <HAL_RCC_OscConfig+0x2b0>)
 8000d46:	f006 f8eb 	bl	8006f20 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d4a:	4b50      	ldr	r3, [pc, #320]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f003 030c 	and.w	r3, r3, #12
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00b      	beq.n	8000d6e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d56:	4b4d      	ldr	r3, [pc, #308]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d5e:	2b08      	cmp	r3, #8
 8000d60:	d126      	bne.n	8000db0 <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d62:	4b4a      	ldr	r3, [pc, #296]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d120      	bne.n	8000db0 <HAL_RCC_OscConfig+0x1d8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d005      	beq.n	8000d86 <HAL_RCC_OscConfig+0x1ae>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d001      	beq.n	8000d86 <HAL_RCC_OscConfig+0x1ae>
      {
        return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e22b      	b.n	80011de <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d86:	4841      	ldr	r0, [pc, #260]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000d88:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6919      	ldr	r1, [r3, #16]
 8000d94:	23f8      	movs	r3, #248	; 0xf8
 8000d96:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d98:	6a3b      	ldr	r3, [r7, #32]
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	fab3 f383 	clz	r3, r3
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dae:	e044      	b.n	8000e3a <HAL_RCC_OscConfig+0x262>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d02a      	beq.n	8000e0e <HAL_RCC_OscConfig+0x236>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000db8:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <HAL_RCC_OscConfig+0x2b8>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fa8b 	bl	80002d8 <HAL_GetTick>
 8000dc2:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc4:	e008      	b.n	8000dd8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc6:	f7ff fa87 	bl	80002d8 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d901      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e202      	b.n	80011de <HAL_RCC_OscConfig+0x606>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f0      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x1ee>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de4:	4829      	ldr	r0, [pc, #164]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000de6:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6919      	ldr	r1, [r3, #16]
 8000df2:	23f8      	movs	r3, #248	; 0xf8
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	fab3 f383 	clz	r3, r3
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	6003      	str	r3, [r0, #0]
 8000e0c:	e015      	b.n	8000e3a <HAL_RCC_OscConfig+0x262>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <HAL_RCC_OscConfig+0x2b8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e14:	f7ff fa60 	bl	80002d8 <HAL_GetTick>
 8000e18:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x256>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fa5c 	bl	80002d8 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e1d7      	b.n	80011de <HAL_RCC_OscConfig+0x606>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_RCC_OscConfig+0x2b4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x244>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d045      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d008      	beq.n	8000e60 <HAL_RCC_OscConfig+0x288>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d004      	beq.n	8000e60 <HAL_RCC_OscConfig+0x288>
 8000e56:	f240 116d 	movw	r1, #365	; 0x16d
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <HAL_RCC_OscConfig+0x2b0>)
 8000e5c:	f006 f860 	bl	8006f20 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d01e      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_RCC_OscConfig+0x2bc>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fa33 	bl	80002d8 <HAL_GetTick>
 8000e72:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e74:	e010      	b.n	8000e98 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e76:	f7ff fa2f 	bl	80002d8 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d909      	bls.n	8000e98 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e1aa      	b.n	80011de <HAL_RCC_OscConfig+0x606>
 8000e88:	080072d4 	.word	0x080072d4
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	42470000 	.word	0x42470000
 8000e94:	42470e80 	.word	0x42470e80
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e98:	4b95      	ldr	r3, [pc, #596]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0e8      	beq.n	8000e76 <HAL_RCC_OscConfig+0x29e>
 8000ea4:	e015      	b.n	8000ed2 <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea6:	4b93      	ldr	r3, [pc, #588]	; (80010f4 <HAL_RCC_OscConfig+0x51c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eac:	f7ff fa14 	bl	80002d8 <HAL_GetTick>
 8000eb0:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb4:	f7ff fa10 	bl	80002d8 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x2ee>
        {
          return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e18b      	b.n	80011de <HAL_RCC_OscConfig+0x606>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec6:	4b8a      	ldr	r3, [pc, #552]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f0      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x2dc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 808f 	beq.w	8000ffe <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00c      	beq.n	8000f02 <HAL_RCC_OscConfig+0x32a>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d008      	beq.n	8000f02 <HAL_RCC_OscConfig+0x32a>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d004      	beq.n	8000f02 <HAL_RCC_OscConfig+0x32a>
 8000ef8:	f240 1197 	movw	r1, #407	; 0x197
 8000efc:	487e      	ldr	r0, [pc, #504]	; (80010f8 <HAL_RCC_OscConfig+0x520>)
 8000efe:	f006 f80f 	bl	8006f20 <assert_failed>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	4a7a      	ldr	r2, [pc, #488]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000f08:	4b79      	ldr	r3, [pc, #484]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b77      	ldr	r3, [pc, #476]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000f1e:	4a77      	ldr	r2, [pc, #476]	; (80010fc <HAL_RCC_OscConfig+0x524>)
 8000f20:	4b76      	ldr	r3, [pc, #472]	; (80010fc <HAL_RCC_OscConfig+0x524>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f28:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000f2a:	f7ff f9d5 	bl	80002d8 <HAL_GetTick>
 8000f2e:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x36c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f32:	f7ff f9d1 	bl	80002d8 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x36c>
      {
        return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e14c      	b.n	80011de <HAL_RCC_OscConfig+0x606>
    PWR->CR |= PWR_CR_DBP;
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000f44:	4b6d      	ldr	r3, [pc, #436]	; (80010fc <HAL_RCC_OscConfig+0x524>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f0      	beq.n	8000f32 <HAL_RCC_OscConfig+0x35a>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d106      	bne.n	8000f66 <HAL_RCC_OscConfig+0x38e>
 8000f58:	4a65      	ldr	r2, [pc, #404]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000f5a:	4b65      	ldr	r3, [pc, #404]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6713      	str	r3, [r2, #112]	; 0x70
 8000f64:	e01c      	b.n	8000fa0 <HAL_RCC_OscConfig+0x3c8>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b05      	cmp	r3, #5
 8000f6c:	d10c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x3b0>
 8000f6e:	4a60      	ldr	r2, [pc, #384]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000f70:	4b5f      	ldr	r3, [pc, #380]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6713      	str	r3, [r2, #112]	; 0x70
 8000f7a:	4a5d      	ldr	r2, [pc, #372]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000f7c:	4b5c      	ldr	r3, [pc, #368]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6713      	str	r3, [r2, #112]	; 0x70
 8000f86:	e00b      	b.n	8000fa0 <HAL_RCC_OscConfig+0x3c8>
 8000f88:	4a59      	ldr	r2, [pc, #356]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000f8a:	4b59      	ldr	r3, [pc, #356]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f8e:	f023 0301 	bic.w	r3, r3, #1
 8000f92:	6713      	str	r3, [r2, #112]	; 0x70
 8000f94:	4a56      	ldr	r2, [pc, #344]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000f96:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9a:	f023 0304 	bic.w	r3, r3, #4
 8000f9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d015      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fa8:	f7ff f996 	bl	80002d8 <HAL_GetTick>
 8000fac:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fae:	e00a      	b.n	8000fc6 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb0:	f7ff f992 	bl	80002d8 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e10b      	b.n	80011de <HAL_RCC_OscConfig+0x606>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc6:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0ee      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x3d8>
 8000fd2:	e014      	b.n	8000ffe <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fd4:	f7ff f980 	bl	80002d8 <HAL_GetTick>
 8000fd8:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fda:	e00a      	b.n	8000ff2 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fdc:	f7ff f97c 	bl	80002d8 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e0f5      	b.n	80011de <HAL_RCC_OscConfig+0x606>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff2:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 8000ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1ee      	bne.n	8000fdc <HAL_RCC_OscConfig+0x404>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00c      	beq.n	8001020 <HAL_RCC_OscConfig+0x448>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d008      	beq.n	8001020 <HAL_RCC_OscConfig+0x448>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d004      	beq.n	8001020 <HAL_RCC_OscConfig+0x448>
 8001016:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800101a:	4837      	ldr	r0, [pc, #220]	; (80010f8 <HAL_RCC_OscConfig+0x520>)
 800101c:	f005 ff80 	bl	8006f20 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80d9 	beq.w	80011dc <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800102a:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <HAL_RCC_OscConfig+0x518>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 030c 	and.w	r3, r3, #12
 8001032:	2b08      	cmp	r3, #8
 8001034:	f000 80d0 	beq.w	80011d8 <HAL_RCC_OscConfig+0x600>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	2b02      	cmp	r3, #2
 800103e:	f040 80b4 	bne.w	80011aa <HAL_RCC_OscConfig+0x5d2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d009      	beq.n	800105e <HAL_RCC_OscConfig+0x486>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001052:	d004      	beq.n	800105e <HAL_RCC_OscConfig+0x486>
 8001054:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001058:	4827      	ldr	r0, [pc, #156]	; (80010f8 <HAL_RCC_OscConfig+0x520>)
 800105a:	f005 ff61 	bl	8006f20 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	2b3f      	cmp	r3, #63	; 0x3f
 8001064:	d904      	bls.n	8001070 <HAL_RCC_OscConfig+0x498>
 8001066:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800106a:	4823      	ldr	r0, [pc, #140]	; (80010f8 <HAL_RCC_OscConfig+0x520>)
 800106c:	f005 ff58 	bl	8006f20 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	2b31      	cmp	r3, #49	; 0x31
 8001076:	d904      	bls.n	8001082 <HAL_RCC_OscConfig+0x4aa>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8001080:	d904      	bls.n	800108c <HAL_RCC_OscConfig+0x4b4>
 8001082:	f240 11d7 	movw	r1, #471	; 0x1d7
 8001086:	481c      	ldr	r0, [pc, #112]	; (80010f8 <HAL_RCC_OscConfig+0x520>)
 8001088:	f005 ff4a 	bl	8006f20 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	2b02      	cmp	r3, #2
 8001092:	d010      	beq.n	80010b6 <HAL_RCC_OscConfig+0x4de>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	2b04      	cmp	r3, #4
 800109a:	d00c      	beq.n	80010b6 <HAL_RCC_OscConfig+0x4de>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	2b06      	cmp	r3, #6
 80010a2:	d008      	beq.n	80010b6 <HAL_RCC_OscConfig+0x4de>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d004      	beq.n	80010b6 <HAL_RCC_OscConfig+0x4de>
 80010ac:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80010b0:	4811      	ldr	r0, [pc, #68]	; (80010f8 <HAL_RCC_OscConfig+0x520>)
 80010b2:	f005 ff35 	bl	8006f20 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d903      	bls.n	80010c6 <HAL_RCC_OscConfig+0x4ee>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	d904      	bls.n	80010d0 <HAL_RCC_OscConfig+0x4f8>
 80010c6:	f240 11d9 	movw	r1, #473	; 0x1d9
 80010ca:	480b      	ldr	r0, [pc, #44]	; (80010f8 <HAL_RCC_OscConfig+0x520>)
 80010cc:	f005 ff28 	bl	8006f20 <assert_failed>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_RCC_OscConfig+0x528>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d6:	f7ff f8ff 	bl	80002d8 <HAL_GetTick>
 80010da:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010dc:	e012      	b.n	8001104 <HAL_RCC_OscConfig+0x52c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010de:	f7ff f8fb 	bl	80002d8 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d90b      	bls.n	8001104 <HAL_RCC_OscConfig+0x52c>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e076      	b.n	80011de <HAL_RCC_OscConfig+0x606>
 80010f0:	40023800 	.word	0x40023800
 80010f4:	42470e80 	.word	0x42470e80
 80010f8:	080072d4 	.word	0x080072d4
 80010fc:	40007000 	.word	0x40007000
 8001100:	42470060 	.word	0x42470060
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001104:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <HAL_RCC_OscConfig+0x610>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1e6      	bne.n	80010de <HAL_RCC_OscConfig+0x506>
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001110:	4835      	ldr	r0, [pc, #212]	; (80011e8 <HAL_RCC_OscConfig+0x610>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69da      	ldr	r2, [r3, #28]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001120:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	fab3 f383 	clz	r3, r3
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	431a      	orrs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113e:	085b      	lsrs	r3, r3, #1
 8001140:	1e59      	subs	r1, r3, #1
 8001142:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	fab3 f383 	clz	r3, r3
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001160:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	fab3 f383 	clz	r3, r3
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_RCC_OscConfig+0x614>)
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001182:	f7ff f8a9 	bl	80002d8 <HAL_GetTick>
 8001186:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800118a:	f7ff f8a5 	bl	80002d8 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e020      	b.n	80011de <HAL_RCC_OscConfig+0x606>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_RCC_OscConfig+0x610>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x5b2>
 80011a8:	e018      	b.n	80011dc <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_RCC_OscConfig+0x614>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff f892 	bl	80002d8 <HAL_GetTick>
 80011b4:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b8:	f7ff f88e 	bl	80002d8 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e009      	b.n	80011de <HAL_RCC_OscConfig+0x606>
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <HAL_RCC_OscConfig+0x610>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x5e0>
 80011d6:	e001      	b.n	80011dc <HAL_RCC_OscConfig+0x604>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <HAL_RCC_OscConfig+0x606>
    }
  }
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3738      	adds	r7, #56	; 0x38
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	42470060 	.word	0x42470060

080011f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_RCC_ClockConfig+0x1e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	d904      	bls.n	8001218 <HAL_RCC_ClockConfig+0x28>
 800120e:	f240 2137 	movw	r1, #567	; 0x237
 8001212:	489d      	ldr	r0, [pc, #628]	; (8001488 <HAL_RCC_ClockConfig+0x298>)
 8001214:	f005 fe84 	bl	8006f20 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d031      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d02e      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d02b      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b03      	cmp	r3, #3
 800122e:	d028      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2b04      	cmp	r3, #4
 8001234:	d025      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b05      	cmp	r3, #5
 800123a:	d022      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2b06      	cmp	r3, #6
 8001240:	d01f      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2b07      	cmp	r3, #7
 8001246:	d01c      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2b08      	cmp	r3, #8
 800124c:	d019      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b09      	cmp	r3, #9
 8001252:	d016      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2b0a      	cmp	r3, #10
 8001258:	d013      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b0b      	cmp	r3, #11
 800125e:	d010      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b0c      	cmp	r3, #12
 8001264:	d00d      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2b0d      	cmp	r3, #13
 800126a:	d00a      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b0e      	cmp	r3, #14
 8001270:	d007      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d004      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
 8001278:	f44f 710e 	mov.w	r1, #568	; 0x238
 800127c:	4882      	ldr	r0, [pc, #520]	; (8001488 <HAL_RCC_ClockConfig+0x298>)
 800127e:	f005 fe4f 	bl	8006f20 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001282:	4b82      	ldr	r3, [pc, #520]	; (800148c <HAL_RCC_ClockConfig+0x29c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 020f 	and.w	r2, r3, #15
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d20c      	bcs.n	80012aa <HAL_RCC_ClockConfig+0xba>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001290:	4b7e      	ldr	r3, [pc, #504]	; (800148c <HAL_RCC_ClockConfig+0x29c>)
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001298:	4b7c      	ldr	r3, [pc, #496]	; (800148c <HAL_RCC_ClockConfig+0x29c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 020f 	and.w	r2, r3, #15
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_ClockConfig+0xba>
    {
      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e169      	b.n	800157e <HAL_RCC_ClockConfig+0x38e>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d031      	beq.n	800131a <HAL_RCC_ClockConfig+0x12a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d024      	beq.n	8001308 <HAL_RCC_ClockConfig+0x118>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b80      	cmp	r3, #128	; 0x80
 80012c4:	d020      	beq.n	8001308 <HAL_RCC_ClockConfig+0x118>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b90      	cmp	r3, #144	; 0x90
 80012cc:	d01c      	beq.n	8001308 <HAL_RCC_ClockConfig+0x118>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2ba0      	cmp	r3, #160	; 0xa0
 80012d4:	d018      	beq.n	8001308 <HAL_RCC_ClockConfig+0x118>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2bb0      	cmp	r3, #176	; 0xb0
 80012dc:	d014      	beq.n	8001308 <HAL_RCC_ClockConfig+0x118>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2bc0      	cmp	r3, #192	; 0xc0
 80012e4:	d010      	beq.n	8001308 <HAL_RCC_ClockConfig+0x118>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2bd0      	cmp	r3, #208	; 0xd0
 80012ec:	d00c      	beq.n	8001308 <HAL_RCC_ClockConfig+0x118>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2be0      	cmp	r3, #224	; 0xe0
 80012f4:	d008      	beq.n	8001308 <HAL_RCC_ClockConfig+0x118>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2bf0      	cmp	r3, #240	; 0xf0
 80012fc:	d004      	beq.n	8001308 <HAL_RCC_ClockConfig+0x118>
 80012fe:	f240 214f 	movw	r1, #591	; 0x24f
 8001302:	4861      	ldr	r0, [pc, #388]	; (8001488 <HAL_RCC_ClockConfig+0x298>)
 8001304:	f005 fe0c 	bl	8006f20 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001308:	4961      	ldr	r1, [pc, #388]	; (8001490 <HAL_RCC_ClockConfig+0x2a0>)
 800130a:	4b61      	ldr	r3, [pc, #388]	; (8001490 <HAL_RCC_ClockConfig+0x2a0>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	4313      	orrs	r3, r2
 8001318:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 809b 	beq.w	800145e <HAL_RCC_ClockConfig+0x26e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d010      	beq.n	8001352 <HAL_RCC_ClockConfig+0x162>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d00c      	beq.n	8001352 <HAL_RCC_ClockConfig+0x162>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d008      	beq.n	8001352 <HAL_RCC_ClockConfig+0x162>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b03      	cmp	r3, #3
 8001346:	d004      	beq.n	8001352 <HAL_RCC_ClockConfig+0x162>
 8001348:	f240 2156 	movw	r1, #598	; 0x256
 800134c:	484e      	ldr	r0, [pc, #312]	; (8001488 <HAL_RCC_ClockConfig+0x298>)
 800134e:	f005 fde7 	bl	8006f20 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d107      	bne.n	800136a <HAL_RCC_ClockConfig+0x17a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <HAL_RCC_ClockConfig+0x2a0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d119      	bne.n	800139a <HAL_RCC_ClockConfig+0x1aa>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e109      	b.n	800157e <HAL_RCC_ClockConfig+0x38e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d003      	beq.n	800137a <HAL_RCC_ClockConfig+0x18a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001376:	2b03      	cmp	r3, #3
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0x19a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137a:	4b45      	ldr	r3, [pc, #276]	; (8001490 <HAL_RCC_ClockConfig+0x2a0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_RCC_ClockConfig+0x1aa>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0f9      	b.n	800157e <HAL_RCC_ClockConfig+0x38e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138a:	4b41      	ldr	r3, [pc, #260]	; (8001490 <HAL_RCC_ClockConfig+0x2a0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_ClockConfig+0x1aa>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e0f1      	b.n	800157e <HAL_RCC_ClockConfig+0x38e>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139a:	493d      	ldr	r1, [pc, #244]	; (8001490 <HAL_RCC_ClockConfig+0x2a0>)
 800139c:	4b3c      	ldr	r3, [pc, #240]	; (8001490 <HAL_RCC_ClockConfig+0x2a0>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f023 0203 	bic.w	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013ac:	f7fe ff94 	bl	80002d8 <HAL_GetTick>
 80013b0:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d112      	bne.n	80013e0 <HAL_RCC_ClockConfig+0x1f0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ba:	e00a      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1e2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013bc:	f7fe ff8c 	bl	80002d8 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e0d5      	b.n	800157e <HAL_RCC_ClockConfig+0x38e>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013d2:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <HAL_RCC_ClockConfig+0x2a0>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d1ee      	bne.n	80013bc <HAL_RCC_ClockConfig+0x1cc>
 80013de:	e03e      	b.n	800145e <HAL_RCC_ClockConfig+0x26e>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d112      	bne.n	800140e <HAL_RCC_ClockConfig+0x21e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013e8:	e00a      	b.n	8001400 <HAL_RCC_ClockConfig+0x210>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ea:	f7fe ff75 	bl	80002d8 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_ClockConfig+0x210>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e0be      	b.n	800157e <HAL_RCC_ClockConfig+0x38e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001400:	4b23      	ldr	r3, [pc, #140]	; (8001490 <HAL_RCC_ClockConfig+0x2a0>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d1ee      	bne.n	80013ea <HAL_RCC_ClockConfig+0x1fa>
 800140c:	e027      	b.n	800145e <HAL_RCC_ClockConfig+0x26e>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d11d      	bne.n	8001452 <HAL_RCC_ClockConfig+0x262>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001416:	e00a      	b.n	800142e <HAL_RCC_ClockConfig+0x23e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7fe ff5e 	bl	80002d8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	; 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_ClockConfig+0x23e>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e0a7      	b.n	800157e <HAL_RCC_ClockConfig+0x38e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_RCC_ClockConfig+0x2a0>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b0c      	cmp	r3, #12
 8001438:	d1ee      	bne.n	8001418 <HAL_RCC_ClockConfig+0x228>
 800143a:	e010      	b.n	800145e <HAL_RCC_ClockConfig+0x26e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143c:	f7fe ff4c 	bl	80002d8 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f241 3288 	movw	r2, #5000	; 0x1388
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_ClockConfig+0x262>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e095      	b.n	800157e <HAL_RCC_ClockConfig+0x38e>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_RCC_ClockConfig+0x2a0>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1ee      	bne.n	800143c <HAL_RCC_ClockConfig+0x24c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_RCC_ClockConfig+0x29c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 020f 	and.w	r2, r3, #15
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d913      	bls.n	8001494 <HAL_RCC_ClockConfig+0x2a4>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <HAL_RCC_ClockConfig+0x29c>)
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_RCC_ClockConfig+0x29c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 020f 	and.w	r2, r3, #15
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d008      	beq.n	8001494 <HAL_RCC_ClockConfig+0x2a4>
    {
      return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e07b      	b.n	800157e <HAL_RCC_ClockConfig+0x38e>
 8001486:	bf00      	nop
 8001488:	080072d4 	.word	0x080072d4
 800148c:	40023c00 	.word	0x40023c00
 8001490:	40023800 	.word	0x40023800
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d025      	beq.n	80014ec <HAL_RCC_ClockConfig+0x2fc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d018      	beq.n	80014da <HAL_RCC_ClockConfig+0x2ea>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014b0:	d013      	beq.n	80014da <HAL_RCC_ClockConfig+0x2ea>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80014ba:	d00e      	beq.n	80014da <HAL_RCC_ClockConfig+0x2ea>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80014c4:	d009      	beq.n	80014da <HAL_RCC_ClockConfig+0x2ea>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80014ce:	d004      	beq.n	80014da <HAL_RCC_ClockConfig+0x2ea>
 80014d0:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 80014d4:	482c      	ldr	r0, [pc, #176]	; (8001588 <HAL_RCC_ClockConfig+0x398>)
 80014d6:	f005 fd23 	bl	8006f20 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014da:	492c      	ldr	r1, [pc, #176]	; (800158c <HAL_RCC_ClockConfig+0x39c>)
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_RCC_ClockConfig+0x39c>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d026      	beq.n	8001546 <HAL_RCC_ClockConfig+0x356>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d018      	beq.n	8001532 <HAL_RCC_ClockConfig+0x342>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001508:	d013      	beq.n	8001532 <HAL_RCC_ClockConfig+0x342>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001512:	d00e      	beq.n	8001532 <HAL_RCC_ClockConfig+0x342>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800151c:	d009      	beq.n	8001532 <HAL_RCC_ClockConfig+0x342>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001526:	d004      	beq.n	8001532 <HAL_RCC_ClockConfig+0x342>
 8001528:	f240 21bb 	movw	r1, #699	; 0x2bb
 800152c:	4816      	ldr	r0, [pc, #88]	; (8001588 <HAL_RCC_ClockConfig+0x398>)
 800152e:	f005 fcf7 	bl	8006f20 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001532:	4916      	ldr	r1, [pc, #88]	; (800158c <HAL_RCC_ClockConfig+0x39c>)
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_RCC_ClockConfig+0x39c>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4313      	orrs	r3, r2
 8001544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001546:	f000 f827 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 800154a:	4601      	mov	r1, r0
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_RCC_ClockConfig+0x39c>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001554:	23f0      	movs	r3, #240	; 0xf0
 8001556:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	fab3 f383 	clz	r3, r3
 8001566:	fa22 f303 	lsr.w	r3, r2, r3
 800156a:	4a09      	ldr	r2, [pc, #36]	; (8001590 <HAL_RCC_ClockConfig+0x3a0>)
 800156c:	5cd3      	ldrb	r3, [r2, r3]
 800156e:	fa21 f303 	lsr.w	r3, r1, r3
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_RCC_ClockConfig+0x3a4>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001576:	2000      	movs	r0, #0
 8001578:	f7fe fe84 	bl	8000284 <HAL_InitTick>
  
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	080072d4 	.word	0x080072d4
 800158c:	40023800 	.word	0x40023800
 8001590:	080073f8 	.word	0x080073f8
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b08b      	sub	sp, #44	; 0x2c
 800159c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ae:	4b36      	ldr	r3, [pc, #216]	; (8001688 <HAL_RCC_GetSysClockFreq+0xf0>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d006      	beq.n	80015c8 <HAL_RCC_GetSysClockFreq+0x30>
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d007      	beq.n	80015ce <HAL_RCC_GetSysClockFreq+0x36>
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d158      	bne.n	8001674 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015c2:	4b32      	ldr	r3, [pc, #200]	; (800168c <HAL_RCC_GetSysClockFreq+0xf4>)
 80015c4:	623b      	str	r3, [r7, #32]
       break;
 80015c6:	e058      	b.n	800167a <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015c8:	4b31      	ldr	r3, [pc, #196]	; (8001690 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015ca:	623b      	str	r3, [r7, #32]
      break;
 80015cc:	e055      	b.n	800167a <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ce:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <HAL_RCC_GetSysClockFreq+0xf0>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015d6:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_RCC_GetSysClockFreq+0xf0>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d017      	beq.n	8001614 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80015e4:	4a2a      	ldr	r2, [pc, #168]	; (8001690 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_RCC_GetSysClockFreq+0xf0>)
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015f4:	400b      	ands	r3, r1
 80015f6:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80015fa:	60f9      	str	r1, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	68f9      	ldr	r1, [r7, #12]
 80015fe:	fa91 f1a1 	rbit	r1, r1
 8001602:	60b9      	str	r1, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	fab1 f181 	clz	r1, r1
 800160a:	40cb      	lsrs	r3, r1
 800160c:	fb03 f302 	mul.w	r3, r3, r2
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	e016      	b.n	8001642 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001614:	4a1d      	ldr	r2, [pc, #116]	; (800168c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fbb2 f2f3 	udiv	r2, r2, r3
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_RCC_GetSysClockFreq+0xf0>)
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001624:	400b      	ands	r3, r1
 8001626:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800162a:	6179      	str	r1, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	6979      	ldr	r1, [r7, #20]
 800162e:	fa91 f1a1 	rbit	r1, r1
 8001632:	6079      	str	r1, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	fab1 f181 	clz	r1, r1
 800163a:	40cb      	lsrs	r3, r1
 800163c:	fb03 f302 	mul.w	r3, r3, r2
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800164a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800164e:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	3301      	adds	r3, #1
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8001668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001670:	623b      	str	r3, [r7, #32]
      break;
 8001672:	e002      	b.n	800167a <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001676:	623b      	str	r3, [r7, #32]
      break;
 8001678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800167a:	6a3b      	ldr	r3, [r7, #32]
}
 800167c:	4618      	mov	r0, r3
 800167e:	372c      	adds	r7, #44	; 0x2c
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40023800 	.word	0x40023800
 800168c:	00f42400 	.word	0x00f42400
 8001690:	016e3600 	.word	0x016e3600

08001694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80016b2:	f7ff ffef 	bl	8001694 <HAL_RCC_GetHCLKFreq>
 80016b6:	4601      	mov	r1, r0
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016c4:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	fa93 f3a3 	rbit	r3, r3
 80016cc:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800
 80016ec:	080073f8 	.word	0x080073f8

080016f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80016f6:	f7ff ffcd 	bl	8001694 <HAL_RCC_GetHCLKFreq>
 80016fa:	4601      	mov	r1, r0
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8001704:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001708:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	fa22 f303 	lsr.w	r3, r2, r3
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_RCC_GetPCLK2Freq+0x40>)
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	080073f8 	.word	0x080073f8

08001734 <HAL_SD_Init>:
  * @param  hsd: SD handle
  * @param  SDCardInfo: HAL_SD_CardInfoTypedef structure for SD card information   
  * @retval HAL SD error state
  */
HAL_SD_ErrorTypedef HAL_SD_Init(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *SDCardInfo)
{ 
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b08e      	sub	sp, #56	; 0x38
 8001738:	af04      	add	r7, sp, #16
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  SD_InitTypeDef tmpinit;
  
  /* Allocate lock resource and initialize it */
  hsd->Lock = HAL_UNLOCKED;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	771a      	strb	r2, [r3, #28]
  /* Initialize the low level hardware (MSP) */
  HAL_SD_MspInit(hsd);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f005 fc14 	bl	8006f78 <HAL_SD_MspInit>
  
  /* Default SDIO peripheral configuration for SD card initialization */
  tmpinit.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
  tmpinit.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
  tmpinit.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  tmpinit.BusWide             = SDIO_BUS_WIDE_1B;
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
  tmpinit.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
  tmpinit.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001764:	2376      	movs	r3, #118	; 0x76
 8001766:	623b      	str	r3, [r7, #32]
  
  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, tmpinit);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681d      	ldr	r5, [r3, #0]
 800176c:	466c      	mov	r4, sp
 800176e:	f107 0318 	add.w	r3, r7, #24
 8001772:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001776:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001780:	4628      	mov	r0, r5
 8001782:	f002 f9b9 	bl	8003af8 <SDIO_Init>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd); 
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f001 f82a 	bl	80027e0 <SD_PowerON>
 800178c:	4603      	mov	r3, r0
 800178e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if(errorstate != SD_OK)     
 8001792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_SD_Init+0x70>
  {
    return errorstate;
 800179c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	e039      	b.n	8001818 <HAL_SD_Init+0xe4>
  }
  
  /* Initialize the present SDIO card(s) and put them in idle state */
  errorstate = SD_Initialize_Cards(hsd);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 ff2d 	bl	8002604 <SD_Initialize_Cards>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (errorstate != SD_OK)
 80017b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_SD_Init+0x8e>
  {
    return errorstate;
 80017ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	e02a      	b.n	8001818 <HAL_SD_Init+0xe4>
  }
  
  /* Read CSD/CID MSD registers */
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 80017c2:	6839      	ldr	r1, [r7, #0]
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 fb57 	bl	8001e78 <HAL_SD_Get_CardInfo>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (errorstate == SD_OK)
 80017d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10d      	bne.n	80017f6 <HAL_SD_Init+0xc2>
  {
    /* Select the Card */
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16U));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80017e0:	041b      	lsls	r3, r3, #16
 80017e2:	f04f 0400 	mov.w	r4, #0
 80017e6:	461a      	mov	r2, r3
 80017e8:	4623      	mov	r3, r4
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 ffce 	bl	800278c <SD_Select_Deselect>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  /* Configure SDIO peripheral interface */
  SDIO_Init(hsd->Instance, hsd->Init);   
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681d      	ldr	r5, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	466c      	mov	r4, sp
 80017fe:	f103 0210 	add.w	r2, r3, #16
 8001802:	ca07      	ldmia	r2, {r0, r1, r2}
 8001804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001808:	3304      	adds	r3, #4
 800180a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800180c:	4628      	mov	r0, r5
 800180e:	f002 f973 	bl	8003af8 <SDIO_Init>
  
  return errorstate;
 8001812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001816:	b2db      	uxtb	r3, r3
}
 8001818:	4618      	mov	r0, r3
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bdb0      	pop	{r4, r5, r7, pc}

08001820 <HAL_SD_ReadBlocks>:
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of SD blocks to read   
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint32_t *pReadBuffer, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b092      	sub	sp, #72	; 0x48
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t count = 0U, *tempbuff = (uint32_t *)pReadBuffer;
 8001834:	2300      	movs	r3, #0
 8001836:	643b      	str	r3, [r7, #64]	; 0x40
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0U;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2200      	movs	r2, #0
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d10a      	bne.n	8001862 <HAL_SD_ReadBlocks+0x42>
  {
    BlockSize = 512U;
 800184c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001850:	65bb      	str	r3, [r7, #88]	; 0x58
    ReadAddr /= 512U;
 8001852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001856:	0a54      	lsrs	r4, r2, #9
 8001858:	ea44 54c3 	orr.w	r4, r4, r3, lsl #23
 800185c:	0a5d      	lsrs	r5, r3, #9
 800185e:	e9c7 4500 	strd	r4, r5, [r7]
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t) BlockSize;
 8001862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8001866:	2310      	movs	r3, #16
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800186a:	2340      	movs	r3, #64	; 0x40
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800186e:	2300      	movs	r3, #0
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8001872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f002 f9ee 	bl	8003c64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8001888:	2110      	movs	r1, #16
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f001 f95a 	bl	8002b44 <SD_CmdResp1Error>
 8001890:	4603      	mov	r3, r0
 8001892:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  
  if (errorstate != SD_OK)
 8001896:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HAL_SD_ReadBlocks+0x84>
  {
    return errorstate;
 800189e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018a2:	e119      	b.n	8001ad8 <HAL_SD_ReadBlocks+0x2b8>
  }
  
  /* Configure the SD DPSM (Data Path State Machine) */
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
 80018a8:	613b      	str	r3, [r7, #16]
  sdio_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
 80018aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
  sdio_datainitstructure.DataBlockSize = DATA_BLOCK_SIZE;
 80018b4:	2390      	movs	r3, #144	; 0x90
 80018b6:	61bb      	str	r3, [r7, #24]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61fb      	str	r3, [r7, #28]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 80018c0:	2301      	movs	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f107 0210 	add.w	r2, r7, #16
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 fa62 	bl	8003d98 <SDIO_DataConfig>
  
  if(NumberOfBlocks > 1U)
 80018d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d902      	bls.n	80018e0 <HAL_SD_ReadBlocks+0xc0>
  {
    /* Send CMD18 READ_MULT_BLOCK with argument data address */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 80018da:	2312      	movs	r3, #18
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018de:	e001      	b.n	80018e4 <HAL_SD_ReadBlocks+0xc4>
  }
  else
  {
    /* Send CMD17 READ_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;    
 80018e0:	2311      	movs	r3, #17
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  sdio_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 f9b6 	bl	8003c64 <SDIO_SendCommand>
  
  /* Read block(s) in polling mode */
  if(NumberOfBlocks > 1U)
 80018f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d934      	bls.n	8001968 <HAL_SD_ReadBlocks+0x148>
  {
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 80018fe:	2112      	movs	r1, #18
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f001 f91f 	bl	8002b44 <SD_CmdResp1Error>
 8001906:	4603      	mov	r3, r0
 8001908:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    if (errorstate != SD_OK)
 800190c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_SD_ReadBlocks+0x136>
    {
      return errorstate;
 8001914:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001918:	e0de      	b.n	8001ad8 <HAL_SD_ReadBlocks+0x2b8>
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d016      	beq.n	8001956 <HAL_SD_ReadBlocks+0x136>
      {
        /* Read data from SDIO Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8001928:	2300      	movs	r3, #0
 800192a:	643b      	str	r3, [r7, #64]	; 0x40
 800192c:	e00d      	b.n	800194a <HAL_SD_ReadBlocks+0x12a>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 800192e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001934:	18d4      	adds	r4, r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f002 f956 	bl	8003bec <SDIO_ReadFIFO>
 8001940:	4603      	mov	r3, r0
 8001942:	6023      	str	r3, [r4, #0]
#endif /* SDIO_STA_STBITERR */
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
      {
        /* Read data from SDIO Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8001944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001946:	3301      	adds	r3, #1
 8001948:	643b      	str	r3, [r7, #64]	; 0x40
 800194a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800194c:	2b07      	cmp	r3, #7
 800194e:	d9ee      	bls.n	800192e <HAL_SD_ReadBlocks+0x10e>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
        }
        
        tempbuff += 8U;
 8001950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001952:	3320      	adds	r3, #32
 8001954:	63fb      	str	r3, [r7, #60]	; 0x3c
      return errorstate;
    }
    
    /* Poll on SDIO flags */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800195c:	f240 332a 	movw	r3, #810	; 0x32a
 8001960:	4013      	ands	r3, r2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0d9      	beq.n	800191a <HAL_SD_ReadBlocks+0xfa>
 8001966:	e033      	b.n	80019d0 <HAL_SD_ReadBlocks+0x1b0>
    }      
  }
  else
  {
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK); 
 8001968:	2111      	movs	r1, #17
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f001 f8ea 	bl	8002b44 <SD_CmdResp1Error>
 8001970:	4603      	mov	r3, r0
 8001972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    if (errorstate != SD_OK)
 8001976:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800197a:	2b00      	cmp	r3, #0
 800197c:	d020      	beq.n	80019c0 <HAL_SD_ReadBlocks+0x1a0>
    {
      return errorstate;
 800197e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001982:	e0a9      	b.n	8001ad8 <HAL_SD_ReadBlocks+0x2b8>
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))      
#endif /* SDIO_STA_STBITERR */
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d016      	beq.n	80019c0 <HAL_SD_ReadBlocks+0x1a0>
      {
        /* Read data from SDIO Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8001992:	2300      	movs	r3, #0
 8001994:	643b      	str	r3, [r7, #64]	; 0x40
 8001996:	e00d      	b.n	80019b4 <HAL_SD_ReadBlocks+0x194>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8001998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800199e:	18d4      	adds	r4, r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 f921 	bl	8003bec <SDIO_ReadFIFO>
 80019aa:	4603      	mov	r3, r0
 80019ac:	6023      	str	r3, [r4, #0]
#endif /* SDIO_STA_STBITERR */
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
      {
        /* Read data from SDIO Rx FIFO */
        for (count = 0U; count < 8U; count++)
 80019ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b0:	3301      	adds	r3, #1
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40
 80019b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b6:	2b07      	cmp	r3, #7
 80019b8:	d9ee      	bls.n	8001998 <HAL_SD_ReadBlocks+0x178>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
        }
        
        tempbuff += 8U;
 80019ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019bc:	3320      	adds	r3, #32
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
      return errorstate;
    }    
    
    /* In case of single block transfer, no need of stop transfer at all */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c6:	f240 632a 	movw	r3, #1578	; 0x62a
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0d9      	beq.n	8001984 <HAL_SD_ReadBlocks+0x164>
      }
    }
  }
  
  /* Send stop transmission command in case of multiblock read */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d014      	beq.n	8001a08 <HAL_SD_ReadBlocks+0x1e8>
 80019de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d911      	bls.n	8001a08 <HAL_SD_ReadBlocks+0x1e8>
  {    
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) ||\
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d007      	beq.n	80019fc <HAL_SD_ReadBlocks+0x1dc>
      (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
  }
  
  /* Send stop transmission command in case of multiblock read */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
  {    
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) ||\
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d003      	beq.n	80019fc <HAL_SD_ReadBlocks+0x1dc>
      (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
        (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
  
  /* Send stop transmission command in case of multiblock read */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
  {    
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) ||\
      (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d105      	bne.n	8001a08 <HAL_SD_ReadBlocks+0x1e8>
        (hsd->CardType == HIGH_CAPACITY_SD_CARD))
    {
      /* Send stop transmission command */
      errorstate = HAL_SD_StopTransfer(hsd);
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 fda7 	bl	8002550 <HAL_SD_StopTransfer>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
  }
  
  /* Get error state */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_SD_ReadBlocks+0x20a>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    return errorstate;
 8001a24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a28:	e056      	b.n	8001ad8 <HAL_SD_ReadBlocks+0x2b8>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <HAL_SD_ReadBlocks+0x22c>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_CRC_FAIL;
 8001a40:	2302      	movs	r3, #2
 8001a42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    return errorstate;
 8001a46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a4a:	e045      	b.n	8001ad8 <HAL_SD_ReadBlocks+0x2b8>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_SD_ReadBlocks+0x24e>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_RX_OVERRUN;
 8001a62:	2306      	movs	r3, #6
 8001a64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    return errorstate;
 8001a68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a6c:	e034      	b.n	8001ad8 <HAL_SD_ReadBlocks+0x2b8>
  }
#ifdef SDIO_STA_STBITERR
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <HAL_SD_ReadBlocks+0x272>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a84:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_START_BIT_ERR;
 8001a86:	2307      	movs	r3, #7
 8001a88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    return errorstate;
 8001a8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a90:	e022      	b.n	8001ad8 <HAL_SD_ReadBlocks+0x2b8>
  else
  {
    /* No error flag set */
  }
  
  count = SD_DATATIMEOUT;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	643b      	str	r3, [r7, #64]	; 0x40
  
  /* Empty FIFO if there is still any data */
  while ((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (count > 0U))
 8001a98:	e00d      	b.n	8001ab6 <HAL_SD_ReadBlocks+0x296>
  {
    *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 f8a4 	bl	8003bec <SDIO_ReadFIFO>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aa8:	601a      	str	r2, [r3, #0]
    tempbuff++;
 8001aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aac:	3304      	adds	r3, #4
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
    count--;
 8001ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	643b      	str	r3, [r7, #64]	; 0x40
  }
  
  count = SD_DATATIMEOUT;
  
  /* Empty FIFO if there is still any data */
  while ((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (count > 0U))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HAL_SD_ReadBlocks+0x2aa>
 8001ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1e7      	bne.n	8001a9a <HAL_SD_ReadBlocks+0x27a>
    tempbuff++;
    count--;
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ad2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 8001ad4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3748      	adds	r7, #72	; 0x48
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bdb0      	pop	{r4, r5, r7, pc}

08001ae0 <HAL_SD_WriteBlocks>:
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of SD blocks to write 
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint32_t *pWriteBuffer, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8001ae0:	b5b0      	push	{r4, r5, r7, lr}
 8001ae2:	b096      	sub	sp, #88	; 0x58
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint32_t totalnumberofbytes = 0U, bytestransferred = 0U, count = 0U, restwords = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	647b      	str	r3, [r7, #68]	; 0x44
 8001af8:	2300      	movs	r3, #0
 8001afa:	653b      	str	r3, [r7, #80]	; 0x50
 8001afc:	2300      	movs	r3, #0
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b00:	2300      	movs	r3, #0
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t *tempbuff = (uint32_t *)pWriteBuffer;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48
  uint8_t cardstate  = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	74fb      	strb	r3, [r7, #19]
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0U;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2200      	movs	r2, #0
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d10a      	bne.n	8001b32 <HAL_SD_WriteBlocks+0x52>
  {
    BlockSize = 512U;
 8001b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b20:	66bb      	str	r3, [r7, #104]	; 0x68
    WriteAddr /= 512U;
 8001b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b26:	0a54      	lsrs	r4, r2, #9
 8001b28:	ea44 54c3 	orr.w	r4, r4, r3, lsl #23
 8001b2c:	0a5d      	lsrs	r5, r3, #9
 8001b2e:	e9c7 4500 	strd	r4, r5, [r7]
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8001b32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8001b36:	2310      	movs	r3, #16
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8001b3a:	2340      	movs	r3, #64	; 0x40
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	63bb      	str	r3, [r7, #56]	; 0x38
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8001b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001b50:	4611      	mov	r1, r2
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 f886 	bl	8003c64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8001b58:	2110      	movs	r1, #16
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 fff2 	bl	8002b44 <SD_CmdResp1Error>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  
  if (errorstate != SD_OK)
 8001b66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_SD_WriteBlocks+0x94>
  {
    return errorstate;
 8001b6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b72:	e17c      	b.n	8001e6e <HAL_SD_WriteBlocks+0x38e>
  }
  
  if(NumberOfBlocks > 1U)
 8001b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d902      	bls.n	8001b80 <HAL_SD_WriteBlocks+0xa0>
  {
    /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8001b7a:	2319      	movs	r3, #25
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b7e:	e001      	b.n	8001b84 <HAL_SD_WriteBlocks+0xa4>
  }
  else
  {
    /* Send CMD24 WRITE_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 8001b80:	2318      	movs	r3, #24
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  }
  
  sdio_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 f866 	bl	8003c64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  if(NumberOfBlocks > 1U)
 8001b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d907      	bls.n	8001bae <HAL_SD_WriteBlocks+0xce>
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 8001b9e:	2119      	movs	r1, #25
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f000 ffcf 	bl	8002b44 <SD_CmdResp1Error>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001bac:	e006      	b.n	8001bbc <HAL_SD_WriteBlocks+0xdc>
  }
  else
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8001bae:	2118      	movs	r1, #24
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 ffc7 	bl	8002b44 <SD_CmdResp1Error>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  }  
  
  if (errorstate != SD_OK)
 8001bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <HAL_SD_WriteBlocks+0xea>
  {
    return errorstate;
 8001bc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001bc8:	e151      	b.n	8001e6e <HAL_SD_WriteBlocks+0x38e>
  }
  
  /* Set total number of bytes to write */
  totalnumberofbytes = NumberOfBlocks * BlockSize;
 8001bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd8:	617b      	str	r3, [r7, #20]
  sdio_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
 8001bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	61bb      	str	r3, [r7, #24]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001be4:	2390      	movs	r3, #144	; 0x90
 8001be6:	61fb      	str	r3, [r7, #28]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f107 0214 	add.w	r2, r7, #20
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 f8ca 	bl	8003d98 <SDIO_DataConfig>
  
  /* Write block(s) in polling mode */
  if(NumberOfBlocks > 1U)
 8001c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	f240 80a4 	bls.w	8001d54 <HAL_SD_WriteBlocks+0x274>
  {
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001c0c:	e04c      	b.n	8001ca8 <HAL_SD_WriteBlocks+0x1c8>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */     
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d045      	beq.n	8001ca8 <HAL_SD_WriteBlocks+0x1c8>
      {
        if ((totalnumberofbytes - bytestransferred) < 32U)
 8001c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b1f      	cmp	r3, #31
 8001c24:	d828      	bhi.n	8001c78 <HAL_SD_WriteBlocks+0x198>
        {
          restwords = ((totalnumberofbytes - bytestransferred) % 4U == 0U) ? ((totalnumberofbytes - bytestransferred) / 4U) : (( totalnumberofbytes -  bytestransferred) / 4U + 1U);
 8001c26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d104      	bne.n	8001c3e <HAL_SD_WriteBlocks+0x15e>
 8001c34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	e004      	b.n	8001c48 <HAL_SD_WriteBlocks+0x168>
 8001c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	3301      	adds	r3, #1
 8001c48:	643b      	str	r3, [r7, #64]	; 0x40
          
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < restwords; count++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c4e:	e00e      	b.n	8001c6e <HAL_SD_WriteBlocks+0x18e>
          {
            SDIO_WriteFIFO(hsd->Instance, tempbuff);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 ffd6 	bl	8003c08 <SDIO_WriteFIFO>
            tempbuff++;
 8001c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c5e:	3304      	adds	r3, #4
 8001c60:	64bb      	str	r3, [r7, #72]	; 0x48
            bytestransferred += 4U;
 8001c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c64:	3304      	adds	r3, #4
 8001c66:	653b      	str	r3, [r7, #80]	; 0x50
        if ((totalnumberofbytes - bytestransferred) < 32U)
        {
          restwords = ((totalnumberofbytes - bytestransferred) % 4U == 0U) ? ((totalnumberofbytes - bytestransferred) / 4U) : (( totalnumberofbytes -  bytestransferred) / 4U + 1U);
          
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < restwords; count++)
 8001c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d3ec      	bcc.n	8001c50 <HAL_SD_WriteBlocks+0x170>
 8001c76:	e017      	b.n	8001ca8 <HAL_SD_WriteBlocks+0x1c8>
          }
        }
        else
        {
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < 8U; count++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c7c:	e00b      	b.n	8001c96 <HAL_SD_WriteBlocks+0x1b6>
          {
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c88:	4413      	add	r3, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f001 ffbc 	bl	8003c08 <SDIO_WriteFIFO>
          }
        }
        else
        {
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < 8U; count++)
 8001c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c92:	3301      	adds	r3, #1
 8001c94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c98:	2b07      	cmp	r3, #7
 8001c9a:	d9f0      	bls.n	8001c7e <HAL_SD_WriteBlocks+0x19e>
          {
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
          }
          
          tempbuff += 8U;
 8001c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c9e:	3320      	adds	r3, #32
 8001ca0:	64bb      	str	r3, [r7, #72]	; 0x48
          bytestransferred += 32U;
 8001ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca4:	3320      	adds	r3, #32
 8001ca6:	653b      	str	r3, [r7, #80]	; 0x50
  
  /* Write block(s) in polling mode */
  if(NumberOfBlocks > 1U)
  {
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cae:	f240 331a 	movw	r3, #794	; 0x31a
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0aa      	beq.n	8001c0e <HAL_SD_WriteBlocks+0x12e>
 8001cb8:	e054      	b.n	8001d64 <HAL_SD_WriteBlocks+0x284>
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
#endif /* SDIO_STA_STBITERR */
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d045      	beq.n	8001d54 <HAL_SD_WriteBlocks+0x274>
      {
        if ((totalnumberofbytes - bytestransferred) < 32U)
 8001cc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b1f      	cmp	r3, #31
 8001cd0:	d828      	bhi.n	8001d24 <HAL_SD_WriteBlocks+0x244>
        {
          restwords = ((totalnumberofbytes - bytestransferred) % 4U == 0U) ? ((totalnumberofbytes - bytestransferred) / 4U) : (( totalnumberofbytes -  bytestransferred) / 4U + 1U);
 8001cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d104      	bne.n	8001cea <HAL_SD_WriteBlocks+0x20a>
 8001ce0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	e004      	b.n	8001cf4 <HAL_SD_WriteBlocks+0x214>
 8001cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	643b      	str	r3, [r7, #64]	; 0x40
          
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < restwords; count++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cfa:	e00e      	b.n	8001d1a <HAL_SD_WriteBlocks+0x23a>
          {
            SDIO_WriteFIFO(hsd->Instance, tempbuff);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001d02:	4618      	mov	r0, r3
 8001d04:	f001 ff80 	bl	8003c08 <SDIO_WriteFIFO>
            tempbuff++; 
 8001d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	64bb      	str	r3, [r7, #72]	; 0x48
            bytestransferred += 4U;
 8001d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d10:	3304      	adds	r3, #4
 8001d12:	653b      	str	r3, [r7, #80]	; 0x50
        if ((totalnumberofbytes - bytestransferred) < 32U)
        {
          restwords = ((totalnumberofbytes - bytestransferred) % 4U == 0U) ? ((totalnumberofbytes - bytestransferred) / 4U) : (( totalnumberofbytes -  bytestransferred) / 4U + 1U);
          
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < restwords; count++)
 8001d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d16:	3301      	adds	r3, #1
 8001d18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d3ec      	bcc.n	8001cfc <HAL_SD_WriteBlocks+0x21c>
 8001d22:	e017      	b.n	8001d54 <HAL_SD_WriteBlocks+0x274>
          }
        }
        else
        {
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < 8U; count++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d28:	e00b      	b.n	8001d42 <HAL_SD_WriteBlocks+0x262>
          {
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d34:	4413      	add	r3, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f001 ff66 	bl	8003c08 <SDIO_WriteFIFO>
          }
        }
        else
        {
          /* Write data to SDIO Tx FIFO */
          for (count = 0U; count < 8U; count++)
 8001d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d3e:	3301      	adds	r3, #1
 8001d40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d44:	2b07      	cmp	r3, #7
 8001d46:	d9f0      	bls.n	8001d2a <HAL_SD_WriteBlocks+0x24a>
          {
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
          }
          
          tempbuff += 8U;
 8001d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d4a:	3320      	adds	r3, #32
 8001d4c:	64bb      	str	r3, [r7, #72]	; 0x48
          bytestransferred += 32U;
 8001d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d50:	3320      	adds	r3, #32
 8001d52:	653b      	str	r3, [r7, #80]	; 0x50
  }
  else
  {
    /* In case of single data block transfer no need of stop command at all */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d5a:	f240 631a 	movw	r3, #1562	; 0x61a
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0aa      	beq.n	8001cba <HAL_SD_WriteBlocks+0x1da>
      }
    }  
  }
  
  /* Send stop transmission command in case of multiblock write */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d014      	beq.n	8001d9c <HAL_SD_WriteBlocks+0x2bc>
 8001d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d911      	bls.n	8001d9c <HAL_SD_WriteBlocks+0x2bc>
  {    
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_SD_WriteBlocks+0x2b0>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d003      	beq.n	8001d90 <HAL_SD_WriteBlocks+0x2b0>
      (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
  }
  
  /* Send stop transmission command in case of multiblock write */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
  {    
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d105      	bne.n	8001d9c <HAL_SD_WriteBlocks+0x2bc>
      (hsd->CardType == HIGH_CAPACITY_SD_CARD))
    {
      /* Send stop transmission command */
      errorstate = HAL_SD_StopTransfer(hsd);
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fbdd 	bl	8002550 <HAL_SD_StopTransfer>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }
  }
  
  /* Get error state */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_SD_WriteBlocks+0x2de>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2208      	movs	r2, #8
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
 8001db2:	2304      	movs	r3, #4
 8001db4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    return errorstate;
 8001db8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001dbc:	e057      	b.n	8001e6e <HAL_SD_WriteBlocks+0x38e>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <HAL_SD_WriteBlocks+0x300>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_CRC_FAIL;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    return errorstate;
 8001dda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001dde:	e046      	b.n	8001e6e <HAL_SD_WriteBlocks+0x38e>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <HAL_SD_WriteBlocks+0x322>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_TXUNDERR);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2210      	movs	r2, #16
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_TX_UNDERRUN;
 8001df6:	2305      	movs	r3, #5
 8001df8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    return errorstate;
 8001dfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e00:	e035      	b.n	8001e6e <HAL_SD_WriteBlocks+0x38e>
  }
#ifdef SDIO_STA_STBITERR
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00a      	beq.n	8001e26 <HAL_SD_WriteBlocks+0x346>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_START_BIT_ERR;
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    return errorstate;
 8001e20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e24:	e023      	b.n	8001e6e <HAL_SD_WriteBlocks+0x38e>
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e2e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Wait till the card is in programming state */
  errorstate = SD_IsCardProgramming(hsd, &cardstate);
 8001e30:	f107 0313 	add.w	r3, r7, #19
 8001e34:	4619      	mov	r1, r3
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f001 fa24 	bl	8003284 <SD_IsCardProgramming>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  
  while ((errorstate == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
 8001e42:	e008      	b.n	8001e56 <HAL_SD_WriteBlocks+0x376>
  {
    errorstate = SD_IsCardProgramming(hsd, &cardstate);
 8001e44:	f107 0313 	add.w	r3, r7, #19
 8001e48:	4619      	mov	r1, r3
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f001 fa1a 	bl	8003284 <SD_IsCardProgramming>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
  
  /* Wait till the card is in programming state */
  errorstate = SD_IsCardProgramming(hsd, &cardstate);
  
  while ((errorstate == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
 8001e56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d105      	bne.n	8001e6a <HAL_SD_WriteBlocks+0x38a>
 8001e5e:	7cfb      	ldrb	r3, [r7, #19]
 8001e60:	2b07      	cmp	r3, #7
 8001e62:	d0ef      	beq.n	8001e44 <HAL_SD_WriteBlocks+0x364>
 8001e64:	7cfb      	ldrb	r3, [r7, #19]
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d0ec      	beq.n	8001e44 <HAL_SD_WriteBlocks+0x364>
  {
    errorstate = SD_IsCardProgramming(hsd, &cardstate);
  }
  
  return errorstate;
 8001e6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3758      	adds	r7, #88	; 0x58
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bdb0      	pop	{r4, r5, r7, pc}
 8001e76:	bf00      	nop

08001e78 <HAL_SD_Get_CardInfo>:
  * @param  pCardInfo: Pointer to a HAL_SD_CardInfoTypedef structure that  
  *         contains all SD cardinformation  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_Get_CardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *pCardInfo)
{
 8001e78:	b4b0      	push	{r4, r5, r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8001e82:	2200      	movs	r2, #0
 8001e84:	73fa      	strb	r2, [r7, #15]
  uint32_t tmp = 0U;
 8001e86:	2200      	movs	r2, #0
 8001e88:	60ba      	str	r2, [r7, #8]
  
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6a12      	ldr	r2, [r2, #32]
 8001e8e:	b2d1      	uxtb	r1, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e9a:	b291      	uxth	r1, r2
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	f8a2 1054 	strh.w	r1, [r2, #84]	; 0x54
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001ea6:	0e12      	lsrs	r2, r2, #24
 8001ea8:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	0992      	lsrs	r2, r2, #6
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	f002 0203 	and.w	r2, r2, #3
 8001eb4:	b2d1      	uxtb	r1, r2
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	7011      	strb	r1, [r2, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	0892      	lsrs	r2, r2, #2
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	f002 020f 	and.w	r2, r2, #15
 8001ec4:	b2d1      	uxtb	r1, r2
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	7051      	strb	r1, [r2, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03U;
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	f002 0203 	and.w	r2, r2, #3
 8001ed2:	b2d1      	uxtb	r1, r2
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	7091      	strb	r1, [r2, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001edc:	0c12      	lsrs	r2, r2, #16
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	b2d1      	uxtb	r1, r2
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	70d1      	strb	r1, [r2, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001eee:	0a12      	lsrs	r2, r2, #8
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	b2d1      	uxtb	r1, r2
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	7111      	strb	r1, [r2, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	b2d1      	uxtb	r1, r2
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	7151      	strb	r1, [r2, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f10:	0e12      	lsrs	r2, r2, #24
 8001f12:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4U);
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	b292      	uxth	r2, r2
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b291      	uxth	r1, r2
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	80d1      	strh	r1, [r2, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f24:	0c12      	lsrs	r2, r2, #16
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4U);
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	88d2      	ldrh	r2, [r2, #6]
 8001f2e:	b292      	uxth	r2, r2
 8001f30:	b211      	sxth	r1, r2
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	0912      	lsrs	r2, r2, #4
 8001f36:	b212      	sxth	r2, r2
 8001f38:	f002 020f 	and.w	r2, r2, #15
 8001f3c:	b212      	sxth	r2, r2
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	b212      	sxth	r2, r2
 8001f42:	b291      	uxth	r1, r2
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	80d1      	strh	r1, [r2, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f002 020f 	and.w	r2, r2, #15
 8001f50:	b2d1      	uxtb	r1, r2
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	7211      	strb	r1, [r2, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f5a:	0a12      	lsrs	r2, r2, #8
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	09d2      	lsrs	r2, r2, #7
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	f002 0201 	and.w	r2, r2, #1
 8001f6a:	b2d1      	uxtb	r1, r2
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	7251      	strb	r1, [r2, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	0992      	lsrs	r2, r2, #6
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	f002 0201 	and.w	r2, r2, #1
 8001f7a:	b2d1      	uxtb	r1, r2
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	7291      	strb	r1, [r2, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	0952      	lsrs	r2, r2, #5
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	f002 0201 	and.w	r2, r2, #1
 8001f8a:	b2d1      	uxtb	r1, r2
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	72d1      	strb	r1, [r2, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	0912      	lsrs	r2, r2, #4
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f002 0201 	and.w	r2, r2, #1
 8001f9a:	b2d1      	uxtb	r1, r2
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	7311      	strb	r1, [r2, #12]
  pCardInfo->SD_csd.Reserved2       = 0U; /*!< Reserved */
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	7351      	strb	r1, [r2, #13]
  
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6a12      	ldr	r2, [r2, #32]
 8001faa:	2a00      	cmp	r2, #0
 8001fac:	d004      	beq.n	8001fb8 <HAL_SD_Get_CardInfo+0x140>
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6a12      	ldr	r2, [r2, #32]
 8001fb2:	2a01      	cmp	r2, #1
 8001fb4:	f040 809a 	bne.w	80020ec <HAL_SD_Get_CardInfo+0x274>
  {
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03U) << 10U;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	029b      	lsls	r3, r3, #10
 8001fbc:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2U;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	0e1b      	lsrs	r3, r3, #24
 8001fe0:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0U) >> 6U;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	611a      	str	r2, [r3, #16]
    
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	08db      	lsrs	r3, r3, #3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	751a      	strb	r2, [r3, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07U);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	b2da      	uxtb	r2, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	b2db      	uxtb	r3, r3
 800201a:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	b2da      	uxtb	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	759a      	strb	r2, [r3, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	b2da      	uxtb	r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	75da      	strb	r2, [r3, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f003 0306 	and.w	r3, r3, #6
 8002048:	b2da      	uxtb	r2, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	b2db      	uxtb	r3, r3
 8002056:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	7e1b      	ldrb	r3, [r3, #24]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	09db      	lsrs	r3, r3, #7
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	4313      	orrs	r3, r2
 800206c:	b2da      	uxtb	r2, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	761a      	strb	r2, [r3, #24]
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1U) ;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	3301      	adds	r3, #1
 8002078:	f04f 0400 	mov.w	r4, #0
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    pCardInfo->CardCapacity *= (1U << (pCardInfo->SD_csd.DeviceSizeMul + 2U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	7e1b      	ldrb	r3, [r3, #24]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	3302      	adds	r3, #2
 800208a:	2201      	movs	r2, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	e9d2 1212 	ldrd	r1, r2, [r2, #72]	; 0x48
 8002096:	f04f 0400 	mov.w	r4, #0
 800209a:	fb03 f502 	mul.w	r5, r3, r2
 800209e:	fb01 f004 	mul.w	r0, r1, r4
 80020a2:	4428      	add	r0, r5
 80020a4:	fba1 3403 	umull	r3, r4, r1, r3
 80020a8:	1902      	adds	r2, r0, r4
 80020aa:	4614      	mov	r4, r2
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    pCardInfo->CardBlockSize = 1U << (pCardInfo->SD_csd.RdBlockLen);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	7a1b      	ldrb	r3, [r3, #8]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	2301      	movs	r3, #1
 80020bc:	fa03 f202 	lsl.w	r2, r3, r2
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	651a      	str	r2, [r3, #80]	; 0x50
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ce:	f04f 0400 	mov.w	r4, #0
 80020d2:	fb03 f502 	mul.w	r5, r3, r2
 80020d6:	fb01 f004 	mul.w	r0, r1, r4
 80020da:	4428      	add	r0, r5
 80020dc:	fba1 3403 	umull	r3, r4, r1, r3
 80020e0:	1902      	adds	r2, r0, r4
 80020e2:	4614      	mov	r4, r2
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
 80020ea:	e03e      	b.n	800216a <HAL_SD_Get_CardInfo+0x2f2>
  }
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6a12      	ldr	r2, [r2, #32]
 80020f0:	2a02      	cmp	r2, #2
 80020f2:	d138      	bne.n	8002166 <HAL_SD_Get_CardInfo+0x2ee>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	60ba      	str	r2, [r7, #8]
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3FU) << 16U;
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	0412      	lsls	r2, r2, #16
 8002100:	f402 117c 	and.w	r1, r2, #4128768	; 0x3f0000
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	6111      	str	r1, [r2, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800210c:	0e12      	lsrs	r2, r2, #24
 800210e:	60ba      	str	r2, [r7, #8]
    
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8U);
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	6911      	ldr	r1, [r2, #16]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	0212      	lsls	r2, r2, #8
 8002118:	4311      	orrs	r1, r2
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	6111      	str	r1, [r2, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002122:	0c12      	lsrs	r2, r2, #16
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	60ba      	str	r2, [r7, #8]
    
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	6911      	ldr	r1, [r2, #16]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	4311      	orrs	r1, r2
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	6111      	str	r1, [r2, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002138:	0a12      	lsrs	r2, r2, #8
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	60ba      	str	r2, [r7, #8]
    
    pCardInfo->CardCapacity = (uint64_t)((((uint64_t)pCardInfo->SD_csd.DeviceSize + 1U)) * 512U * 1024U);
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	6912      	ldr	r2, [r2, #16]
 8002142:	4611      	mov	r1, r2
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	3101      	adds	r1, #1
 800214a:	f142 0200 	adc.w	r2, r2, #0
 800214e:	04d4      	lsls	r4, r2, #19
 8002150:	ea44 3451 	orr.w	r4, r4, r1, lsr #13
 8002154:	04cb      	lsls	r3, r1, #19
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    pCardInfo->CardBlockSize = 512U;    
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002162:	651a      	str	r2, [r3, #80]	; 0x50
 8002164:	e001      	b.n	800216a <HAL_SD_Get_CardInfo+0x2f2>
  }
  else
  {
    /* Not supported card type */
    errorstate = SD_ERROR;
 8002166:	2329      	movs	r3, #41	; 0x29
 8002168:	73fb      	strb	r3, [r7, #15]
  }
    
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40U) >> 6U;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	099b      	lsrs	r3, r3, #6
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	b2da      	uxtb	r2, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	765a      	strb	r2, [r3, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3FU) << 1U;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002186:	b2da      	uxtb	r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	b2db      	uxtb	r3, r3
 8002192:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	7e9b      	ldrb	r3, [r3, #26]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	09db      	lsrs	r3, r3, #7
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4313      	orrs	r3, r2
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	769a      	strb	r2, [r3, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7FU);
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c0:	0e1b      	lsrs	r3, r3, #24
 80021c2:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	09db      	lsrs	r3, r3, #7
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	771a      	strb	r2, [r3, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60U) >> 5U;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	775a      	strb	r2, [r3, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	779a      	strb	r2, [r3, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	b2da      	uxtb	r2, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220a:	0c1b      	lsrs	r3, r3, #16
 800220c:	b2db      	uxtb	r3, r3
 800220e:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	7fdb      	ldrb	r3, [r3, #31]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	b2da      	uxtb	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	77da      	strb	r2, [r3, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	095b      	lsrs	r3, r3, #5
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	b2da      	uxtb	r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f883 2020 	strb.w	r2, [r3, #32]
  pCardInfo->SD_csd.Reserved3           = 0U;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01U);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	b2db      	uxtb	r3, r3
 800225c:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	09db      	lsrs	r3, r3, #7
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40U) >> 6U;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	099b      	lsrs	r3, r3, #6
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	b2da      	uxtb	r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20U) >> 5U;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	095b      	lsrs	r3, r3, #5
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10U) >> 4U;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0CU) >> 2U;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCardInfo->SD_csd.ECC              = (tmp & 0x03U);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	085b      	lsrs	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1U;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* Byte 0 */
  tmp = (uint8_t)((hsd->CID[0U] & 0xFF000000U) >> 24U);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	0e1b      	lsrs	r3, r3, #24
 80022f0:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ManufacturerID = tmp;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Byte 1 */
  tmp = (uint8_t)((hsd->CID[0U] & 0x00FF0000U) >> 16U);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	b2db      	uxtb	r3, r3
 8002304:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8U;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	b29b      	uxth	r3, r3
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	b29a      	uxth	r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	85da      	strh	r2, [r3, #46]	; 0x2e
  
  /* Byte 2 */
  tmp = (uint8_t)((hsd->CID[0U] & 0x0000FF00U) >> 8U);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	b2db      	uxtb	r3, r3
 800231a:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002320:	b29a      	uxth	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	b29b      	uxth	r3, r3
 8002326:	4313      	orrs	r3, r2
 8002328:	b29a      	uxth	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	85da      	strh	r2, [r3, #46]	; 0x2e
  
  /* Byte 3 */
  tmp = (uint8_t)(hsd->CID[0U] & 0x000000FFU);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002332:	b2db      	uxtb	r3, r3
 8002334:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 = tmp << 24U;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	061a      	lsls	r2, r3, #24
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 4 */
  tmp = (uint8_t)((hsd->CID[1U] & 0xFF000000U) >> 24U);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002342:	0e1b      	lsrs	r3, r3, #24
 8002344:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 |= tmp << 16U;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	431a      	orrs	r2, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 5 */
  tmp = (uint8_t)((hsd->CID[1U] & 0x00FF0000U) >> 16U);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002358:	0c1b      	lsrs	r3, r3, #16
 800235a:	b2db      	uxtb	r3, r3
 800235c:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 |= tmp << 8U;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	431a      	orrs	r2, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 6 */
  tmp = (uint8_t)((hsd->CID[1U] & 0x0000FF00U) >> 8U);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	b2db      	uxtb	r3, r3
 8002374:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	431a      	orrs	r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 7 */
  tmp = (uint8_t)(hsd->CID[1U] & 0x000000FFU);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	b2db      	uxtb	r3, r3
 8002388:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName2 = tmp;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Byte 8 */
  tmp = (uint8_t)((hsd->CID[2U] & 0xFF000000U) >> 24U);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	0e1b      	lsrs	r3, r3, #24
 800239a:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdRev = tmp;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Byte 9 */
  tmp = (uint8_t)((hsd->CID[2U] & 0x00FF0000U) >> 16U);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	0c1b      	lsrs	r3, r3, #16
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN = tmp << 24U;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	061a      	lsls	r2, r3, #24
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 10 */
  tmp = (uint8_t)((hsd->CID[2U] & 0x0000FF00U) >> 8U);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN |= tmp << 16U;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	041b      	lsls	r3, r3, #16
 80023ca:	431a      	orrs	r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CID[2U] & 0x000000FFU);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN |= tmp << 8U;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	431a      	orrs	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CID[3U] & 0xFF000000U) >> 24U);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	0e1b      	lsrs	r3, r3, #24
 80023ec:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN |= tmp;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	431a      	orrs	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CID[3U] & 0x00FF0000U) >> 16U);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	0c1b      	lsrs	r3, r3, #16
 8002400:	b2db      	uxtb	r3, r3
 8002402:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0U) >> 4U;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240a:	b2da      	uxtb	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	b2db      	uxtb	r3, r3
 8002418:	4313      	orrs	r3, r2
 800241a:	b2da      	uxtb	r2, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0FU) << 8U;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	b29b      	uxth	r3, r3
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	b29b      	uxth	r3, r3
 800242a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800242e:	b29a      	uxth	r2, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CID[3U] & 0x0000FF00U) >> 8U);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	b2db      	uxtb	r3, r3
 800243c:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ManufactDate |= tmp;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002442:	b29a      	uxth	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	b29b      	uxth	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	b29a      	uxth	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CID[3U] & 0x000000FFU);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	b2db      	uxtb	r3, r3
 8002456:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFEU) >> 1U;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	085b      	lsrs	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002462:	b2da      	uxtb	r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1U;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  
  return errorstate;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bcb0      	pop	{r4, r5, r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop

08002480 <HAL_SD_WideBusOperation_Config>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WideBusOperation_Config(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002480:	b5b0      	push	{r4, r5, r7, lr}
 8002482:	b08e      	sub	sp, #56	; 0x38
 8002484:	af04      	add	r7, sp, #16
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  SDIO_InitTypeDef tmpinit;
  
  /* MMC Card does not support this feature */
  if (hsd->CardType == MULTIMEDIA_CARD)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d105      	bne.n	80024a4 <HAL_SD_WideBusOperation_Config+0x24>
  {
    errorstate = SD_UNSUPPORTED_FEATURE;
 8002498:	2327      	movs	r3, #39	; 0x27
 800249a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 800249e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024a2:	e051      	b.n	8002548 <HAL_SD_WideBusOperation_Config+0xc8>
  }
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <HAL_SD_WideBusOperation_Config+0x3c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d003      	beq.n	80024bc <HAL_SD_WideBusOperation_Config+0x3c>
    (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
  {
    errorstate = SD_UNSUPPORTED_FEATURE;
    
    return errorstate;
  }
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d143      	bne.n	8002544 <HAL_SD_WideBusOperation_Config+0xc4>
    (hsd->CardType == HIGH_CAPACITY_SD_CARD))
  {
    if (WideMode == SDIO_BUS_WIDE_8B)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c2:	d103      	bne.n	80024cc <HAL_SD_WideBusOperation_Config+0x4c>
    {
      errorstate = SD_UNSUPPORTED_FEATURE;
 80024c4:	2327      	movs	r3, #39	; 0x27
 80024c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80024ca:	e017      	b.n	80024fc <HAL_SD_WideBusOperation_Config+0x7c>
    }
    else if (WideMode == SDIO_BUS_WIDE_4B)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024d2:	d106      	bne.n	80024e2 <HAL_SD_WideBusOperation_Config+0x62>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fcd9 	bl	8002e8c <SD_WideBus_Enable>
 80024da:	4603      	mov	r3, r0
 80024dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80024e0:	e00c      	b.n	80024fc <HAL_SD_WideBusOperation_Config+0x7c>
    }
    else if (WideMode == SDIO_BUS_WIDE_1B)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <HAL_SD_WideBusOperation_Config+0x76>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fd47 	bl	8002f7c <SD_WideBus_Disable>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80024f4:	e002      	b.n	80024fc <HAL_SD_WideBusOperation_Config+0x7c>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = SD_INVALID_PARAMETER;
 80024f6:	2326      	movs	r3, #38	; 0x26
 80024f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
      
    if (errorstate == SD_OK)
 80024fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002500:	2b00      	cmp	r3, #0
 8002502:	d11f      	bne.n	8002544 <HAL_SD_WideBusOperation_Config+0xc4>
    {
      /* Configure the SDIO peripheral */
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	60fb      	str	r3, [r7, #12]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	613b      	str	r3, [r7, #16]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	617b      	str	r3, [r7, #20]
      tmpinit.BusWide             = WideMode;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	61bb      	str	r3, [r7, #24]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	61fb      	str	r3, [r7, #28]
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	623b      	str	r3, [r7, #32]
      SDIO_Init(hsd->Instance, tmpinit);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681d      	ldr	r5, [r3, #0]
 800252a:	466c      	mov	r4, sp
 800252c:	f107 0318 	add.w	r3, r7, #24
 8002530:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002534:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800253e:	4628      	mov	r0, r5
 8002540:	f001 fada 	bl	8003af8 <SDIO_Init>
    }
  }
  
  return errorstate;
 8002544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002548:	4618      	mov	r0, r3
 800254a:	3728      	adds	r7, #40	; 0x28
 800254c:	46bd      	mov	sp, r7
 800254e:	bdb0      	pop	{r4, r5, r7, pc}

08002550 <HAL_SD_StopTransfer>:
  * @brief  Aborts an ongoing data transfer.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_StopTransfer(SD_HandleTypeDef *hsd)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	77fb      	strb	r3, [r7, #31]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdio_cmdinitstructure.Argument         = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8002560:	230c      	movs	r3, #12
 8002562:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8002564:	2340      	movs	r3, #64	; 0x40
 8002566:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800256c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002570:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f107 0208 	add.w	r2, r7, #8
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f001 fb71 	bl	8003c64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 8002582:	210c      	movs	r1, #12
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fadd 	bl	8002b44 <SD_CmdResp1Error>
 800258a:	4603      	mov	r3, r0
 800258c:	77fb      	strb	r3, [r7, #31]
  
  return errorstate;
 800258e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_SD_GetStatus>:
  * @brief  Gets the current sd card data status.
  * @param  hsd: SD handle
  * @retval Data Transfer state
  */
HAL_SD_TransferStateTypedef HAL_SD_GetStatus(SD_HandleTypeDef *hsd)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypedef cardstate =  SD_CARD_TRANSFER;
 80025a0:	2304      	movs	r3, #4
 80025a2:	73fb      	strb	r3, [r7, #15]

  /* Get SD card state */
  cardstate = SD_GetState(hsd);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f811 	bl	80025cc <SD_GetState>
 80025aa:	4603      	mov	r3, r0
 80025ac:	73fb      	strb	r3, [r7, #15]
  
  /* Find SD status according to card state*/
  if (cardstate == SD_CARD_TRANSFER)
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d101      	bne.n	80025b8 <HAL_SD_GetStatus+0x20>
  {
    return SD_TRANSFER_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e005      	b.n	80025c4 <HAL_SD_GetStatus+0x2c>
  }
  else if(cardstate == SD_CARD_ERROR)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2bff      	cmp	r3, #255	; 0xff
 80025bc:	d101      	bne.n	80025c2 <HAL_SD_GetStatus+0x2a>
  {
    return SD_TRANSFER_ERROR;
 80025be:	2302      	movs	r3, #2
 80025c0:	e000      	b.n	80025c4 <HAL_SD_GetStatus+0x2c>
  }
  else
  {
    return SD_TRANSFER_BUSY;
 80025c2:	2301      	movs	r3, #1
  }
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <SD_GetState>:
  * @brief  Returns the SD current state.
  * @param  hsd: SD handle
  * @retval SD card current state
  */
static HAL_SD_CardStateTypedef SD_GetState(SD_HandleTypeDef *hsd)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t resp1 = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
  
  if (SD_SendStatus(hsd, &resp1) != SD_OK)
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	4619      	mov	r1, r3
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f9e2 	bl	80029a8 <SD_SendStatus>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <SD_GetState+0x22>
  {
    return SD_CARD_ERROR;
 80025ea:	23ff      	movs	r3, #255	; 0xff
 80025ec:	e005      	b.n	80025fa <SD_GetState+0x2e>
  }
  else
  {
    return (HAL_SD_CardStateTypedef)((resp1 >> 9U) & 0x0FU);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	0a5b      	lsrs	r3, r3, #9
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	b2db      	uxtb	r3, r3
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop

08002604 <SD_Initialize_Cards>:
  *         into standby state.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_Initialize_Cards(SD_HandleTypeDef *hsd)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t sd_rca = 1U;
 8002612:	2301      	movs	r3, #1
 8002614:	81fb      	strh	r3, [r7, #14]
  
  if(SDIO_GetPowerState(hsd->Instance) == 0U) /* Power off */
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f001 fb14 	bl	8003c48 <SDIO_GetPowerState>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <SD_Initialize_Cards+0x2e>
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
 8002626:	2325      	movs	r3, #37	; 0x25
 8002628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 800262c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002630:	e0a7      	b.n	8002782 <SD_Initialize_Cards+0x17e>
  }
  
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	2b04      	cmp	r3, #4
 8002638:	d037      	beq.n	80026aa <SD_Initialize_Cards+0xa6>
  {
    /* Send CMD2 ALL_SEND_CID */
    sdio_cmdinitstructure.Argument         = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 800263e:	2302      	movs	r3, #2
 8002640:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 8002642:	23c0      	movs	r3, #192	; 0xc0
 8002644:	61bb      	str	r3, [r7, #24]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800264a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800264e:	623b      	str	r3, [r7, #32]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f107 0210 	add.w	r2, r7, #16
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fb02 	bl	8003c64 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fb6f 	bl	8002d44 <SD_CmdResp2Error>
 8002666:	4603      	mov	r3, r0
 8002668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 800266c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <SD_Initialize_Cards+0x76>
    {
      return errorstate;
 8002674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002678:	e083      	b.n	8002782 <SD_Initialize_Cards+0x17e>
    }
    
    /* Get Card identification number data */
    hsd->CID[0U] = SDIO_GetResponse(SDIO_RESP1);
 800267a:	2000      	movs	r0, #0
 800267c:	f001 fb66 	bl	8003d4c <SDIO_GetResponse>
 8002680:	4602      	mov	r2, r0
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->CID[1U] = SDIO_GetResponse(SDIO_RESP2);
 8002686:	2004      	movs	r0, #4
 8002688:	f001 fb60 	bl	8003d4c <SDIO_GetResponse>
 800268c:	4602      	mov	r2, r0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->CID[2U] = SDIO_GetResponse(SDIO_RESP3);
 8002692:	2008      	movs	r0, #8
 8002694:	f001 fb5a 	bl	8003d4c <SDIO_GetResponse>
 8002698:	4602      	mov	r2, r0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
    hsd->CID[3U] = SDIO_GetResponse(SDIO_RESP4);
 800269e:	200c      	movs	r0, #12
 80026a0:	f001 fb54 	bl	8003d4c <SDIO_GetResponse>
 80026a4:	4602      	mov	r2, r0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <SD_Initialize_Cards+0xc6>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d007      	beq.n	80026ca <SD_Initialize_Cards+0xc6>
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
    hsd->CID[1U] = SDIO_GetResponse(SDIO_RESP2);
    hsd->CID[2U] = SDIO_GetResponse(SDIO_RESP3);
    hsd->CID[3U] = SDIO_GetResponse(SDIO_RESP4);
  }
  
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d003      	beq.n	80026ca <SD_Initialize_Cards+0xc6>
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d11c      	bne.n	8002704 <SD_Initialize_Cards+0x100>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 80026ca:	2303      	movs	r3, #3
 80026cc:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80026ce:	2340      	movs	r3, #64	; 0x40
 80026d0:	61bb      	str	r3, [r7, #24]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f107 0210 	add.w	r2, r7, #16
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f001 fac1 	bl	8003c64 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp6Error(hsd, SD_CMD_SET_REL_ADDR, &sd_rca);
 80026e2:	f107 030e 	add.w	r3, r7, #14
 80026e6:	461a      	mov	r2, r3
 80026e8:	2103      	movs	r1, #3
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fb62 	bl	8002db4 <SD_CmdResp6Error>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 80026f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <SD_Initialize_Cards+0x100>
    {
      return errorstate;
 80026fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002702:	e03e      	b.n	8002782 <SD_Initialize_Cards+0x17e>
    }
  }
  
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	2b04      	cmp	r3, #4
 800270a:	d038      	beq.n	800277e <SD_Initialize_Cards+0x17a>
  {
    /* Get the SD card RCA */
    hsd->RCA = sd_rca;
 800270c:	89fb      	ldrh	r3, [r7, #14]
 800270e:	461a      	mov	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 800271c:	2309      	movs	r3, #9
 800271e:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 8002720:	23c0      	movs	r3, #192	; 0xc0
 8002722:	61bb      	str	r3, [r7, #24]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f107 0210 	add.w	r2, r7, #16
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f001 fa98 	bl	8003c64 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fb05 	bl	8002d44 <SD_CmdResp2Error>
 800273a:	4603      	mov	r3, r0
 800273c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8002740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <SD_Initialize_Cards+0x14a>
    {
      return errorstate;
 8002748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800274c:	e019      	b.n	8002782 <SD_Initialize_Cards+0x17e>
    }
    
    /* Get Card Specific Data */
    hsd->CSD[0U] = SDIO_GetResponse(SDIO_RESP1);
 800274e:	2000      	movs	r0, #0
 8002750:	f001 fafc 	bl	8003d4c <SDIO_GetResponse>
 8002754:	4602      	mov	r2, r0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->CSD[1U] = SDIO_GetResponse(SDIO_RESP2);
 800275a:	2004      	movs	r0, #4
 800275c:	f001 faf6 	bl	8003d4c <SDIO_GetResponse>
 8002760:	4602      	mov	r2, r0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->CSD[2U] = SDIO_GetResponse(SDIO_RESP3);
 8002766:	2008      	movs	r0, #8
 8002768:	f001 faf0 	bl	8003d4c <SDIO_GetResponse>
 800276c:	4602      	mov	r2, r0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
    hsd->CSD[3U] = SDIO_GetResponse(SDIO_RESP4);
 8002772:	200c      	movs	r0, #12
 8002774:	f001 faea 	bl	8003d4c <SDIO_GetResponse>
 8002778:	4602      	mov	r2, r0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  
  /* All cards are initialized */
  return errorstate;
 800277e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002782:	4618      	mov	r0, r3
 8002784:	3728      	adds	r7, #40	; 0x28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop

0800278c <SD_Select_Deselect>:
  * @param  hsd: SD handle
  * @param  addr: Address of the card to be selected  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_Select_Deselect(SD_HandleTypeDef *hsd, uint64_t addr)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 80027a2:	2307      	movs	r3, #7
 80027a4:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80027a6:	2340      	movs	r3, #64	; 0x40
 80027a8:	61bb      	str	r3, [r7, #24]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80027ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b2:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f107 0210 	add.w	r2, r7, #16
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 fa50 	bl	8003c64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 80027c4:	2107      	movs	r1, #7
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f9bc 	bl	8002b44 <SD_CmdResp1Error>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  return errorstate;
 80027d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3728      	adds	r7, #40	; 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop

080027e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_PowerON(SD_HandleTypeDef *hsd)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	; 0x30
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 80027e8:	2300      	movs	r3, #0
 80027ea:	72fb      	strb	r3, [r7, #11]
  uint32_t response = 0U, count = 0U, validvoltage = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f0:	2300      	movs	r3, #0
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sdtype = SD_STD_CAPACITY;
 80027f8:	2300      	movs	r3, #0
 80027fa:	623b      	str	r3, [r7, #32]
  
  /* Power ON Sequence -------------------------------------------------------*/
  /* Disable SDIO Clock */
  __HAL_SD_SDIO_DISABLE(); 
 80027fc:	4b69      	ldr	r3, [pc, #420]	; (80029a4 <SD_PowerON+0x1c4>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f001 fa10 	bl	8003c2c <SDIO_PowerState_ON>
  
  /* 1ms: required power up waiting time before starting the SD initialization 
     sequence */
  HAL_Delay(1);
 800280c:	2001      	movs	r0, #1
 800280e:	f7fd fd6f 	bl	80002f0 <HAL_Delay>
  
  /* Enable SDIO Clock */
  __HAL_SD_SDIO_ENABLE();
 8002812:	4b64      	ldr	r3, [pc, #400]	; (80029a4 <SD_PowerON+0x1c4>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]
  
  /* CMD0: GO_IDLE_STATE -----------------------------------------------------*/
  /* No CMD response required */
  sdio_cmdinitstructure.Argument         = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_NO;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8002828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800282c:	61fb      	str	r3, [r7, #28]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f107 020c 	add.w	r2, r7, #12
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f001 fa13 	bl	8003c64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdError(hsd);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f8ec 	bl	8002a1c <SD_CmdError>
 8002844:	4603      	mov	r3, r0
 8002846:	72fb      	strb	r3, [r7, #11]
  
  if(errorstate != SD_OK)
 8002848:	7afb      	ldrb	r3, [r7, #11]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <SD_PowerON+0x76>
  {
    /* CMD Response Timeout (wait for CMDSENT flag) */
    return errorstate;
 8002850:	7afb      	ldrb	r3, [r7, #11]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	e0a2      	b.n	800299c <SD_PowerON+0x1bc>
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdio_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 8002856:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800285a:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_SDIO_SEND_IF_COND;
 800285c:	2308      	movs	r3, #8
 800285e:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8002860:	2340      	movs	r3, #64	; 0x40
 8002862:	617b      	str	r3, [r7, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f107 020c 	add.w	r2, r7, #12
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f001 f9f8 	bl	8003c64 <SDIO_SendCommand>
  
  /* Check for error conditions */ 
  errorstate = SD_CmdResp7Error(hsd);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f90d 	bl	8002a94 <SD_CmdResp7Error>
 800287a:	4603      	mov	r3, r0
 800287c:	72fb      	strb	r3, [r7, #11]
  
  if (errorstate == SD_OK)
 800287e:	7afb      	ldrb	r3, [r7, #11]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <SD_PowerON+0xb2>
  {
    /* SD Card 2.0 */
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	621a      	str	r2, [r3, #32]
    sdtype        = SD_HIGH_CAPACITY;
 800288c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002890:	623b      	str	r3, [r7, #32]
  }
  
  /* Send CMD55 */
  sdio_cmdinitstructure.Argument         = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8002896:	2337      	movs	r3, #55	; 0x37
 8002898:	613b      	str	r3, [r7, #16]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f107 020c 	add.w	r2, r7, #12
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 f9dd 	bl	8003c64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80028aa:	2137      	movs	r1, #55	; 0x37
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f949 	bl	8002b44 <SD_CmdResp1Error>
 80028b2:	4603      	mov	r3, r0
 80028b4:	72fb      	strb	r3, [r7, #11]
  
  /* If errorstate is Command Timeout, it is a MMC card */
  /* If errorstate is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  if(errorstate == SD_OK)
 80028b6:	7afb      	ldrb	r3, [r7, #11]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d16c      	bne.n	8002998 <SD_PowerON+0x1b8>
  {
    /* SD CARD */
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 80028be:	e051      	b.n	8002964 <SD_PowerON+0x184>
    {
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      sdio_cmdinitstructure.Argument         = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80028c4:	2337      	movs	r3, #55	; 0x37
 80028c6:	613b      	str	r3, [r7, #16]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80028c8:	2340      	movs	r3, #64	; 0x40
 80028ca:	617b      	str	r3, [r7, #20]
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80028d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d4:	61fb      	str	r3, [r7, #28]
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f107 020c 	add.w	r2, r7, #12
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 f9bf 	bl	8003c64 <SDIO_SendCommand>
      
      /* Check for error conditions */
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80028e6:	2137      	movs	r1, #55	; 0x37
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f92b 	bl	8002b44 <SD_CmdResp1Error>
 80028ee:	4603      	mov	r3, r0
 80028f0:	72fb      	strb	r3, [r7, #11]
      
      if(errorstate != SD_OK)
 80028f2:	7afb      	ldrb	r3, [r7, #11]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <SD_PowerON+0x120>
      {
        return errorstate;
 80028fa:	7afb      	ldrb	r3, [r7, #11]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e04d      	b.n	800299c <SD_PowerON+0x1bc>
      }
      
      /* Send CMD41 */
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800290a:	60fb      	str	r3, [r7, #12]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 800290c:	2329      	movs	r3, #41	; 0x29
 800290e:	613b      	str	r3, [r7, #16]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8002910:	2340      	movs	r3, #64	; 0x40
 8002912:	617b      	str	r3, [r7, #20]
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8002918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800291c:	61fb      	str	r3, [r7, #28]
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f107 020c 	add.w	r2, r7, #12
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f001 f99b 	bl	8003c64 <SDIO_SendCommand>
      
      /* Check for error conditions */
      errorstate = SD_CmdResp3Error(hsd);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f9de 	bl	8002cf0 <SD_CmdResp3Error>
 8002934:	4603      	mov	r3, r0
 8002936:	72fb      	strb	r3, [r7, #11]
      
      if(errorstate != SD_OK)
 8002938:	7afb      	ldrb	r3, [r7, #11]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <SD_PowerON+0x166>
      {
        return errorstate;
 8002940:	7afb      	ldrb	r3, [r7, #11]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	e02a      	b.n	800299c <SD_PowerON+0x1bc>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(SDIO_RESP1);
 8002946:	2000      	movs	r0, #0
 8002948:	f001 fa00 	bl	8003d4c <SDIO_GetResponse>
 800294c:	62f8      	str	r0, [r7, #44]	; 0x2c
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	0fdb      	lsrs	r3, r3, #31
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <SD_PowerON+0x17a>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <SD_PowerON+0x17c>
 800295a:	2300      	movs	r3, #0
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
      
      count++;
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	3301      	adds	r3, #1
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
     or SD card 1.x */
  if(errorstate == SD_OK)
  {
    /* SD CARD */
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d104      	bne.n	8002974 <SD_PowerON+0x194>
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002970:	4293      	cmp	r3, r2
 8002972:	d9a5      	bls.n	80028c0 <SD_PowerON+0xe0>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
      
      count++;
    }
    
    if(count >= SD_MAX_VOLT_TRIAL)
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800297a:	4293      	cmp	r3, r2
 800297c:	d904      	bls.n	8002988 <SD_PowerON+0x1a8>
    {
      errorstate = SD_INVALID_VOLTRANGE;
 800297e:	231b      	movs	r3, #27
 8002980:	72fb      	strb	r3, [r7, #11]
      
      return errorstate;
 8002982:	7afb      	ldrb	r3, [r7, #11]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	e009      	b.n	800299c <SD_PowerON+0x1bc>
    }
    
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <SD_PowerON+0x1b8>
    {
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	621a      	str	r2, [r3, #32]
    }
    
  } /* else MMC Card */
  
  return errorstate;
 8002998:	7afb      	ldrb	r3, [r7, #11]
 800299a:	b2db      	uxtb	r3, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	3730      	adds	r7, #48	; 0x30
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	422580a0 	.word	0x422580a0

080029a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	77fb      	strb	r3, [r7, #31]
  
  if(pCardStatus == NULL)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d103      	bne.n	80029c4 <SD_SendStatus+0x1c>
  {
    errorstate = SD_INVALID_PARAMETER;
 80029bc:	2326      	movs	r3, #38	; 0x26
 80029be:	77fb      	strb	r3, [r7, #31]
    
    return errorstate;
 80029c0:	7ffb      	ldrb	r3, [r7, #31]
 80029c2:	e026      	b.n	8002a12 <SD_SendStatus+0x6a>
  }
  
  /* Send Status command */
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	60bb      	str	r3, [r7, #8]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 80029cc:	230d      	movs	r3, #13
 80029ce:	60fb      	str	r3, [r7, #12]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80029d0:	2340      	movs	r3, #64	; 0x40
 80029d2:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80029d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029dc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f107 0208 	add.w	r2, r7, #8
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 f93b 	bl	8003c64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 80029ee:	210d      	movs	r1, #13
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f8a7 	bl	8002b44 <SD_CmdResp1Error>
 80029f6:	4603      	mov	r3, r0
 80029f8:	77fb      	strb	r3, [r7, #31]
  
  if(errorstate != SD_OK)
 80029fa:	7ffb      	ldrb	r3, [r7, #31]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <SD_SendStatus+0x5c>
  {
    return errorstate;
 8002a00:	7ffb      	ldrb	r3, [r7, #31]
 8002a02:	e006      	b.n	8002a12 <SD_SendStatus+0x6a>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(SDIO_RESP1);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f001 f9a1 	bl	8003d4c <SDIO_GetResponse>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	601a      	str	r2, [r3, #0]
  
  return errorstate;
 8002a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop

08002a1c <SD_CmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdError(SD_HandleTypeDef *hsd)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout, tmp;
  
  timeout = SDIO_CMD0TIMEOUT;
 8002a28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a2c:	617b      	str	r3, [r7, #20]
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	613b      	str	r3, [r7, #16]
    
  while((timeout > 0U) && (!tmp))
 8002a44:	e00d      	b.n	8002a62 <SD_CmdError+0x46>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf14      	ite	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	2300      	moveq	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	613b      	str	r3, [r7, #16]
    timeout--;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
  
  timeout = SDIO_CMD0TIMEOUT;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
    
  while((timeout > 0U) && (!tmp))
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <SD_CmdError+0x52>
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0eb      	beq.n	8002a46 <SD_CmdError+0x2a>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
    timeout--;
  }
  
  if(timeout == 0U)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d103      	bne.n	8002a7c <SD_CmdError+0x60>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	73fb      	strb	r3, [r7, #15]
    return errorstate;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	e005      	b.n	8002a88 <SD_CmdError+0x6c>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <SD_CmdResp7Error>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp7Error(SD_HandleTypeDef *hsd)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_ERROR;
 8002a9c:	2329      	movs	r3, #41	; 0x29
 8002a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = SDIO_CMD0TIMEOUT, tmp;
 8002aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aa4:	617b      	str	r3, [r7, #20]
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT); 
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	613b      	str	r3, [r7, #16]
  
  while((!tmp) && (timeout > 0U))
 8002abc:	e00d      	b.n	8002ada <SD_CmdResp7Error+0x46>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	613b      	str	r3, [r7, #16]
    timeout--;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	617b      	str	r3, [r7, #20]
  HAL_SD_ErrorTypedef errorstate = SD_ERROR;
  uint32_t timeout = SDIO_CMD0TIMEOUT, tmp;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT); 
  
  while((!tmp) && (timeout > 0U))
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <SD_CmdResp7Error+0x52>
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1eb      	bne.n	8002abe <SD_CmdResp7Error+0x2a>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT);
    timeout--;
  }
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT); 
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf14      	ite	ne
 8002af4:	2301      	movne	r3, #1
 8002af6:	2300      	moveq	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	613b      	str	r3, [r7, #16]
  
  if((timeout == 0U) || tmp)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <SD_CmdResp7Error+0x74>
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <SD_CmdResp7Error+0x84>
  {
    /* Card is not V2.0 compliant or card does not support the set voltage range */
    errorstate = SD_CMD_RSP_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2204      	movs	r2, #4
 8002b12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	e00f      	b.n	8002b38 <SD_CmdResp7Error+0xa4>
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDREND))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <SD_CmdResp7Error+0xa2>
  {
    /* Card is SD V2.0 compliant */
    errorstate = SD_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CMDREND);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2240      	movs	r2, #64	; 0x40
 8002b30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	e000      	b.n	8002b38 <SD_CmdResp7Error+0xa4>
  }
  
  return errorstate;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	371c      	adds	r7, #28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <SD_CmdResp1Error>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp1Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	73fb      	strb	r3, [r7, #15]
  uint32_t response_r1;
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8002b54:	bf00      	nop
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f8      	beq.n	8002b56 <SD_CmdResp1Error+0x12>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <SD_CmdResp1Error+0x3e>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	e0b0      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <SD_CmdResp1Error+0x5c>
  {
    errorstate = SD_CMD_CRC_FAIL;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	e0a1      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 f8c3 	bl	8003d30 <SDIO_GetCommandResponse>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <SD_CmdResp1Error+0x78>
  {
    errorstate = SD_ILLEGAL_CMD;
 8002bb4:	2310      	movs	r3, #16
 8002bb6:	73fb      	strb	r3, [r7, #15]
    
    return errorstate;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	e093      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f001 f8c0 	bl	8003d4c <SDIO_GetResponse>
 8002bcc:	60b8      	str	r0, [r7, #8]
  
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	4b46      	ldr	r3, [pc, #280]	; (8002cec <SD_CmdResp1Error+0x1a8>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <SD_CmdResp1Error+0x98>
  {
    return errorstate;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	e083      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	da01      	bge.n	8002be6 <SD_CmdResp1Error+0xa2>
  {
    return(SD_ADDR_OUT_OF_RANGE);
 8002be2:	231c      	movs	r3, #28
 8002be4:	e07e      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <SD_CmdResp1Error+0xb0>
  {
    return(SD_ADDR_MISALIGNED);
 8002bf0:	2309      	movs	r3, #9
 8002bf2:	e077      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <SD_CmdResp1Error+0xbe>
  {
    return(SD_BLOCK_LEN_ERR);
 8002bfe:	230a      	movs	r3, #10
 8002c00:	e070      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <SD_CmdResp1Error+0xcc>
  {
    return(SD_ERASE_SEQ_ERR);
 8002c0c:	230b      	movs	r3, #11
 8002c0e:	e069      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <SD_CmdResp1Error+0xda>
  {
    return(SD_BAD_ERASE_PARAM);
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	e062      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <SD_CmdResp1Error+0xe8>
  {
    return(SD_WRITE_PROT_VIOLATION);
 8002c28:	230d      	movs	r3, #13
 8002c2a:	e05b      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <SD_CmdResp1Error+0xf6>
  {
    return(SD_LOCK_UNLOCK_FAILED);
 8002c36:	230e      	movs	r3, #14
 8002c38:	e054      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <SD_CmdResp1Error+0x104>
  {
    return(SD_COM_CRC_FAILED);
 8002c44:	230f      	movs	r3, #15
 8002c46:	e04d      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <SD_CmdResp1Error+0x112>
  {
    return(SD_ILLEGAL_CMD);
 8002c52:	2310      	movs	r3, #16
 8002c54:	e046      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <SD_CmdResp1Error+0x120>
  {
    return(SD_CARD_ECC_FAILED);
 8002c60:	2311      	movs	r3, #17
 8002c62:	e03f      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <SD_CmdResp1Error+0x12e>
  {
    return(SD_CC_ERROR);
 8002c6e:	2312      	movs	r3, #18
 8002c70:	e038      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <SD_CmdResp1Error+0x13c>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 8002c7c:	2313      	movs	r3, #19
 8002c7e:	e031      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <SD_CmdResp1Error+0x14a>
  {
    return(SD_STREAM_READ_UNDERRUN);
 8002c8a:	2314      	movs	r3, #20
 8002c8c:	e02a      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <SD_CmdResp1Error+0x158>
  {
    return(SD_STREAM_WRITE_OVERRUN);
 8002c98:	2315      	movs	r3, #21
 8002c9a:	e023      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <SD_CmdResp1Error+0x166>
  {
    return(SD_CID_CSD_OVERWRITE);
 8002ca6:	2316      	movs	r3, #22
 8002ca8:	e01c      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <SD_CmdResp1Error+0x174>
  {
    return(SD_WP_ERASE_SKIP);
 8002cb4:	2317      	movs	r3, #23
 8002cb6:	e015      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <SD_CmdResp1Error+0x182>
  {
    return(SD_CARD_ECC_DISABLED);
 8002cc2:	2318      	movs	r3, #24
 8002cc4:	e00e      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <SD_CmdResp1Error+0x190>
  {
    return(SD_ERASE_RESET);
 8002cd0:	2319      	movs	r3, #25
 8002cd2:	e007      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  if((response_r1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <SD_CmdResp1Error+0x19e>
  {
    return(SD_AKE_SEQ_ERROR);
 8002cde:	231a      	movs	r3, #26
 8002ce0:	e000      	b.n	8002ce4 <SD_CmdResp1Error+0x1a0>
  }
  
  return errorstate;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	fdffe008 	.word	0xfdffe008

08002cf0 <SD_CmdResp3Error>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp3Error(SD_HandleTypeDef *hsd)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]
  
  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8002cfc:	bf00      	nop
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f8      	beq.n	8002cfe <SD_CmdResp3Error+0xe>
  {
  }
  
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d007      	beq.n	8002d2a <SD_CmdResp3Error+0x3a>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2204      	movs	r2, #4
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	e005      	b.n	8002d36 <SD_CmdResp3Error+0x46>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d32:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop

08002d44 <SD_CmdResp2Error>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]
  
  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8002d50:	bf00      	nop
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d58:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f8      	beq.n	8002d52 <SD_CmdResp2Error+0xe>
  {
  }
    
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <SD_CmdResp2Error+0x3a>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2204      	movs	r2, #4
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	e014      	b.n	8002da8 <SD_CmdResp2Error+0x64>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <SD_CmdResp2Error+0x58>
  {
    errorstate = SD_CMD_CRC_FAIL;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2201      	movs	r2, #1
 8002d96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	e005      	b.n	8002da8 <SD_CmdResp2Error+0x64>
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <SD_CmdResp6Error>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp6Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD, uint16_t *pRCA)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	72fb      	strb	r3, [r7, #11]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
  uint32_t response_r1;
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8002dc6:	bf00      	nop
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dce:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f8      	beq.n	8002dc8 <SD_CmdResp6Error+0x14>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <SD_CmdResp6Error+0x40>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	75fb      	strb	r3, [r7, #23]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2204      	movs	r2, #4
 8002dee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	e047      	b.n	8002e84 <SD_CmdResp6Error+0xd0>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <SD_CmdResp6Error+0x5e>
  {
    errorstate = SD_CMD_CRC_FAIL;
 8002e02:	2301      	movs	r3, #1
 8002e04:	75fb      	strb	r3, [r7, #23]
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	e038      	b.n	8002e84 <SD_CmdResp6Error+0xd0>
  {
    /* No error flag set */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 ff8a 	bl	8003d30 <SDIO_GetCommandResponse>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	7afb      	ldrb	r3, [r7, #11]
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d003      	beq.n	8002e2e <SD_CmdResp6Error+0x7a>
  {
    errorstate = SD_ILLEGAL_CMD;
 8002e26:	2310      	movs	r3, #16
 8002e28:	75fb      	strb	r3, [r7, #23]
    
    return errorstate;
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
 8002e2c:	e02a      	b.n	8002e84 <SD_CmdResp6Error+0xd0>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f000 ff87 	bl	8003d4c <SDIO_GetResponse>
 8002e3e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <SD_CmdResp6Error+0xa4>
  {
    *pRCA = (uint16_t) (response_r1 >> 16U);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	801a      	strh	r2, [r3, #0]
    
    return errorstate;
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	e015      	b.n	8002e84 <SD_CmdResp6Error+0xd0>
  }
  
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <SD_CmdResp6Error+0xb2>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 8002e62:	2313      	movs	r3, #19
 8002e64:	e00e      	b.n	8002e84 <SD_CmdResp6Error+0xd0>
  }
  
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <SD_CmdResp6Error+0xc0>
  {
    return(SD_ILLEGAL_CMD);
 8002e70:	2310      	movs	r3, #16
 8002e72:	e007      	b.n	8002e84 <SD_CmdResp6Error+0xd0>
  }
  
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <SD_CmdResp6Error+0xce>
  {
    return(SD_COM_CRC_FAILED);
 8002e7e:	230f      	movs	r3, #15
 8002e80:	e000      	b.n	8002e84 <SD_CmdResp6Error+0xd0>
  }
  
  return errorstate;
 8002e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  uint32_t scr[2U] = {0U, 0U};
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f000 ff52 	bl	8003d4c <SDIO_GetResponse>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <SD_WideBus_Enable+0x32>
  {
    errorstate = SD_LOCK_UNLOCK_FAILED;
 8002eb2:	230e      	movs	r3, #14
 8002eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8002eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ebc:	e059      	b.n	8002f72 <SD_WideBus_Enable+0xe6>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002ebe:	f107 0308 	add.w	r3, r7, #8
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8d1 	bl	800306c <SD_FindSCR>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if(errorstate != SD_OK)
 8002ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <SD_WideBus_Enable+0x52>
  {
    return errorstate;
 8002ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002edc:	e049      	b.n	8002f72 <SD_WideBus_Enable+0xe6>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d03f      	beq.n	8002f68 <SD_WideBus_Enable+0xdc>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	041b      	lsls	r3, r3, #16
 8002eee:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8002ef0:	2337      	movs	r3, #55	; 0x37
 8002ef2:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8002ef4:	2340      	movs	r3, #64	; 0x40
 8002ef6:	61bb      	str	r3, [r7, #24]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8002efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f00:	623b      	str	r3, [r7, #32]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f107 0210 	add.w	r2, r7, #16
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fea9 	bl	8003c64 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8002f12:	2137      	movs	r1, #55	; 0x37
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff fe15 	bl	8002b44 <SD_CmdResp1Error>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8002f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <SD_WideBus_Enable+0xa2>
    {
      return errorstate;
 8002f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f2c:	e021      	b.n	8002f72 <SD_WideBus_Enable+0xe6>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    sdio_cmdinitstructure.Argument         = 2U;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8002f32:	2306      	movs	r3, #6
 8002f34:	617b      	str	r3, [r7, #20]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f107 0210 	add.w	r2, r7, #16
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fe8f 	bl	8003c64 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8002f46:	2106      	movs	r1, #6
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff fdfb 	bl	8002b44 <SD_CmdResp1Error>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8002f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <SD_WideBus_Enable+0xd6>
    {
      return errorstate;
 8002f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f60:	e007      	b.n	8002f72 <SD_WideBus_Enable+0xe6>
    }
    
    return errorstate;
 8002f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f66:	e004      	b.n	8002f72 <SD_WideBus_Enable+0xe6>
  }
  else
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
 8002f68:	2325      	movs	r3, #37	; 0x25
 8002f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8002f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  }
}   
 8002f72:	4618      	mov	r0, r3
 8002f74:	3728      	adds	r7, #40	; 0x28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop

08002f7c <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  uint32_t scr[2U] = {0U, 0U};
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8002f92:	2000      	movs	r0, #0
 8002f94:	f000 feda 	bl	8003d4c <SDIO_GetResponse>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <SD_WideBus_Disable+0x32>
  {
    errorstate = SD_LOCK_UNLOCK_FAILED;
 8002fa2:	230e      	movs	r3, #14
 8002fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 8002fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fac:	e059      	b.n	8003062 <SD_WideBus_Disable+0xe6>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002fae:	f107 0308 	add.w	r3, r7, #8
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f859 	bl	800306c <SD_FindSCR>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if(errorstate != SD_OK)
 8002fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <SD_WideBus_Disable+0x52>
  {
    return errorstate;
 8002fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fcc:	e049      	b.n	8003062 <SD_WideBus_Disable+0xe6>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d03f      	beq.n	8003058 <SD_WideBus_Disable+0xdc>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8002fe0:	2337      	movs	r3, #55	; 0x37
 8002fe2:	617b      	str	r3, [r7, #20]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8002fe4:	2340      	movs	r3, #64	; 0x40
 8002fe6:	61bb      	str	r3, [r7, #24]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61fb      	str	r3, [r7, #28]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8002fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ff0:	623b      	str	r3, [r7, #32]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f107 0210 	add.w	r2, r7, #16
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fe31 	bl	8003c64 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8003002:	2137      	movs	r1, #55	; 0x37
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff fd9d 	bl	8002b44 <SD_CmdResp1Error>
 800300a:	4603      	mov	r3, r0
 800300c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8003010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <SD_WideBus_Disable+0xa2>
    {
      return errorstate;
 8003018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800301c:	e021      	b.n	8003062 <SD_WideBus_Disable+0xe6>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    sdio_cmdinitstructure.Argument         = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8003022:	2306      	movs	r3, #6
 8003024:	617b      	str	r3, [r7, #20]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f107 0210 	add.w	r2, r7, #16
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fe17 	bl	8003c64 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8003036:	2106      	movs	r1, #6
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff fd83 	bl	8002b44 <SD_CmdResp1Error>
 800303e:	4603      	mov	r3, r0
 8003040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 8003044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <SD_WideBus_Disable+0xd6>
    {
      return errorstate;
 800304c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003050:	e007      	b.n	8003062 <SD_WideBus_Disable+0xe6>
    }
    
    return errorstate;
 8003052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003056:	e004      	b.n	8003062 <SD_WideBus_Disable+0xe6>
  }
  else
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
 8003058:	2325      	movs	r3, #37	; 0x25
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 800305e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3728      	adds	r7, #40	; 0x28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop

0800306c <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b093      	sub	sp, #76	; 0x4c
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint32_t index = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tempscr[2U] = {0U, 0U};
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	2300      	movs	r3, #0
 8003086:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)8U;
 8003088:	2308      	movs	r3, #8
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800308c:	2310      	movs	r3, #16
 800308e:	633b      	str	r3, [r7, #48]	; 0x30
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8003090:	2340      	movs	r3, #64	; 0x40
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8003094:	2300      	movs	r3, #0
 8003096:	63bb      	str	r3, [r7, #56]	; 0x38
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8003098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800309c:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fddb 	bl	8003c64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 80030ae:	2110      	movs	r1, #16
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff fd47 	bl	8002b44 <SD_CmdResp1Error>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  if(errorstate != SD_OK)
 80030bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <SD_FindSCR+0x5e>
  {
    return errorstate;
 80030c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80030c8:	e0d7      	b.n	800327a <SD_FindSCR+0x20e>
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16U);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80030d2:	2337      	movs	r3, #55	; 0x37
 80030d4:	633b      	str	r3, [r7, #48]	; 0x30
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fdbf 	bl	8003c64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80030e6:	2137      	movs	r1, #55	; 0x37
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff fd2b 	bl	8002b44 <SD_CmdResp1Error>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  if(errorstate != SD_OK)
 80030f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <SD_FindSCR+0x96>
  {
    return errorstate;
 80030fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003100:	e0bb      	b.n	800327a <SD_FindSCR+0x20e>
  }
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	617b      	str	r3, [r7, #20]
  sdio_datainitstructure.DataLength    = 8U;
 8003108:	2308      	movs	r3, #8
 800310a:	61bb      	str	r3, [r7, #24]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800310c:	2330      	movs	r3, #48	; 0x30
 800310e:	61fb      	str	r3, [r7, #28]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003110:	2302      	movs	r3, #2
 8003112:	623b      	str	r3, [r7, #32]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8003118:	2301      	movs	r3, #1
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f107 0214 	add.w	r2, r7, #20
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fe36 	bl	8003d98 <SDIO_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdio_cmdinitstructure.Argument         = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8003130:	2333      	movs	r3, #51	; 0x33
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fd90 	bl	8003c64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8003144:	2133      	movs	r1, #51	; 0x33
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff fcfc 	bl	8002b44 <SD_CmdResp1Error>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  if(errorstate != SD_OK)
 8003152:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003156:	2b00      	cmp	r3, #0
 8003158:	d018      	beq.n	800318c <SD_FindSCR+0x120>
  {
    return errorstate;
 800315a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800315e:	e08c      	b.n	800327a <SD_FindSCR+0x20e>
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
#endif /* SDIO_STA_STBITERR */
  {
    if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00e      	beq.n	800318c <SD_FindSCR+0x120>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800316e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	f107 020c 	add.w	r2, r7, #12
 8003176:	18d4      	adds	r4, r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fd35 	bl	8003bec <SDIO_ReadFIFO>
 8003182:	4603      	mov	r3, r0
 8003184:	6023      	str	r3, [r4, #0]
      index++;
 8003186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003188:	3301      	adds	r3, #1
 800318a:	647b      	str	r3, [r7, #68]	; 0x44
  if(errorstate != SD_OK)
  {
    return errorstate;
  }
#ifdef SDIO_STA_STBITERR  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003192:	f240 632a 	movw	r3, #1578	; 0x62a
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0e1      	beq.n	8003160 <SD_FindSCR+0xf4>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
      index++;
    }
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <SD_FindSCR+0x152>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2208      	movs	r2, #8
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
 80031b2:	2304      	movs	r3, #4
 80031b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 80031b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80031bc:	e05d      	b.n	800327a <SD_FindSCR+0x20e>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <SD_FindSCR+0x174>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2202      	movs	r2, #2
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_CRC_FAIL;
 80031d4:	2302      	movs	r3, #2
 80031d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 80031da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80031de:	e04c      	b.n	800327a <SD_FindSCR+0x20e>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <SD_FindSCR+0x196>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2220      	movs	r2, #32
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_RX_OVERRUN;
 80031f6:	2306      	movs	r3, #6
 80031f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 80031fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003200:	e03b      	b.n	800327a <SD_FindSCR+0x20e>
  }
#ifdef SDIO_STA_STBITERR
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <SD_FindSCR+0x1ba>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003218:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_START_BIT_ERR;
 800321a:	2307      	movs	r3, #7
 800321c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 8003220:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003224:	e029      	b.n	800327a <SD_FindSCR+0x20e>
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
  
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	3304      	adds	r3, #4
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	0611      	lsls	r1, r2, #24
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	0212      	lsls	r2, r2, #8
 800323c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8003240:	4311      	orrs	r1, r2
    ((tempscr[0U] & SD_16TO23BITS) >> 8U) | ((tempscr[0U] & SD_24TO31BITS) >> 24U);
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	0a12      	lsrs	r2, r2, #8
 8003246:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
  
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
 800324a:	4311      	orrs	r1, r2
    ((tempscr[0U] & SD_16TO23BITS) >> 8U) | ((tempscr[0U] & SD_24TO31BITS) >> 24U);
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	0e12      	lsrs	r2, r2, #24
 8003250:	430a      	orrs	r2, r1
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
  
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
 8003252:	601a      	str	r2, [r3, #0]
    ((tempscr[0U] & SD_16TO23BITS) >> 8U) | ((tempscr[0U] & SD_24TO31BITS) >> 24U);
  
  *(pSCR) = ((tempscr[1U] & SD_0TO7BITS) << 24U)  | ((tempscr[1U] & SD_8TO15BITS) << 8U) |\
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	061a      	lsls	r2, r3, #24
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003260:	431a      	orrs	r2, r3
    ((tempscr[1U] & SD_16TO23BITS) >> 8U) | ((tempscr[1U] & SD_24TO31BITS) >> 24U);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
  
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
    ((tempscr[0U] & SD_16TO23BITS) >> 8U) | ((tempscr[0U] & SD_24TO31BITS) >> 24U);
  
  *(pSCR) = ((tempscr[1U] & SD_0TO7BITS) << 24U)  | ((tempscr[1U] & SD_8TO15BITS) << 8U) |\
 800326a:	431a      	orrs	r2, r3
    ((tempscr[1U] & SD_16TO23BITS) >> 8U) | ((tempscr[1U] & SD_24TO31BITS) >> 24U);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	0e1b      	lsrs	r3, r3, #24
 8003270:	431a      	orrs	r2, r3
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
  
  *(pSCR + 1U) = ((tempscr[0U] & SD_0TO7BITS) << 24U)  | ((tempscr[0U] & SD_8TO15BITS) << 8U) |\
    ((tempscr[0U] & SD_16TO23BITS) >> 8U) | ((tempscr[0U] & SD_24TO31BITS) >> 24U);
  
  *(pSCR) = ((tempscr[1U] & SD_0TO7BITS) << 24U)  | ((tempscr[1U] & SD_8TO15BITS) << 8U) |\
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	601a      	str	r2, [r3, #0]
    ((tempscr[1U] & SD_16TO23BITS) >> 8U) | ((tempscr[1U] & SD_24TO31BITS) >> 24U);
  
  return errorstate;
 8003276:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
 800327a:	4618      	mov	r0, r3
 800327c:	374c      	adds	r7, #76	; 0x4c
 800327e:	46bd      	mov	sp, r7
 8003280:	bd90      	pop	{r4, r7, pc}
 8003282:	bf00      	nop

08003284 <SD_IsCardProgramming>:
  * @param  hsd: SD handle
  * @param  pStatus: pointer to the variable that will contain the SD card state  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_IsCardProgramming(SD_HandleTypeDef *hsd, uint8_t *pStatus)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  __IO uint32_t responseR1 = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
  
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16U);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	613b      	str	r3, [r7, #16]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 80032a0:	230d      	movs	r3, #13
 80032a2:	617b      	str	r3, [r7, #20]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80032a4:	2340      	movs	r3, #64	; 0x40
 80032a6:	61bb      	str	r3, [r7, #24]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61fb      	str	r3, [r7, #28]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80032ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b0:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f107 0210 	add.w	r2, r7, #16
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fcd1 	bl	8003c64 <SDIO_SendCommand>
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 80032c2:	bf00      	nop
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f8      	beq.n	80032c4 <SD_IsCardProgramming+0x40>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d009      	beq.n	80032f4 <SD_IsCardProgramming+0x70>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2204      	movs	r2, #4
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 80032ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032f2:	e0bd      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <SD_IsCardProgramming+0x92>
  {
    errorstate = SD_CMD_CRC_FAIL;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2201      	movs	r2, #1
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8003310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003314:	e0ac      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  {
    /* No error flag set */
  }
  
  /* Check response received is of desired command */
  if((uint32_t)SDIO_GetCommandResponse(hsd->Instance) != SD_CMD_SEND_STATUS)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fd08 	bl	8003d30 <SDIO_GetCommandResponse>
 8003320:	4603      	mov	r3, r0
 8003322:	2b0d      	cmp	r3, #13
 8003324:	d005      	beq.n	8003332 <SD_IsCardProgramming+0xae>
  {
    errorstate = SD_ILLEGAL_CMD;
 8003326:	2310      	movs	r3, #16
 8003328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 800332c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003330:	e09e      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800333a:	639a      	str	r2, [r3, #56]	; 0x38
  
  
  /* We have received response, retrieve it for analysis */
  responseR1 = SDIO_GetResponse(SDIO_RESP1);
 800333c:	2000      	movs	r0, #0
 800333e:	f000 fd05 	bl	8003d4c <SDIO_GetResponse>
 8003342:	4603      	mov	r3, r0
 8003344:	60fb      	str	r3, [r7, #12]
  
  /* Find out card status */
  *pStatus = (uint8_t)((responseR1 >> 9U) & 0x0000000FU);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	0a5b      	lsrs	r3, r3, #9
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	b2da      	uxtb	r2, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	701a      	strb	r2, [r3, #0]
  
  if((responseR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4b47      	ldr	r3, [pc, #284]	; (8003478 <SD_IsCardProgramming+0x1f4>)
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <SD_IsCardProgramming+0xe2>
  {
    return errorstate;
 8003360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003364:	e084      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	da01      	bge.n	8003370 <SD_IsCardProgramming+0xec>
  {
    return(SD_ADDR_OUT_OF_RANGE);
 800336c:	231c      	movs	r3, #28
 800336e:	e07f      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <SD_IsCardProgramming+0xfa>
  {
    return(SD_ADDR_MISALIGNED);
 800337a:	2309      	movs	r3, #9
 800337c:	e078      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <SD_IsCardProgramming+0x108>
  {
    return(SD_BLOCK_LEN_ERR);
 8003388:	230a      	movs	r3, #10
 800338a:	e071      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <SD_IsCardProgramming+0x116>
  {
    return(SD_ERASE_SEQ_ERR);
 8003396:	230b      	movs	r3, #11
 8003398:	e06a      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <SD_IsCardProgramming+0x124>
  {
    return(SD_BAD_ERASE_PARAM);
 80033a4:	230c      	movs	r3, #12
 80033a6:	e063      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <SD_IsCardProgramming+0x132>
  {
    return(SD_WRITE_PROT_VIOLATION);
 80033b2:	230d      	movs	r3, #13
 80033b4:	e05c      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <SD_IsCardProgramming+0x140>
  {
    return(SD_LOCK_UNLOCK_FAILED);
 80033c0:	230e      	movs	r3, #14
 80033c2:	e055      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <SD_IsCardProgramming+0x14e>
  {
    return(SD_COM_CRC_FAILED);
 80033ce:	230f      	movs	r3, #15
 80033d0:	e04e      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <SD_IsCardProgramming+0x15c>
  {
    return(SD_ILLEGAL_CMD);
 80033dc:	2310      	movs	r3, #16
 80033de:	e047      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <SD_IsCardProgramming+0x16a>
  {
    return(SD_CARD_ECC_FAILED);
 80033ea:	2311      	movs	r3, #17
 80033ec:	e040      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <SD_IsCardProgramming+0x178>
  {
    return(SD_CC_ERROR);
 80033f8:	2312      	movs	r3, #18
 80033fa:	e039      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <SD_IsCardProgramming+0x186>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 8003406:	2313      	movs	r3, #19
 8003408:	e032      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <SD_IsCardProgramming+0x194>
  {
    return(SD_STREAM_READ_UNDERRUN);
 8003414:	2314      	movs	r3, #20
 8003416:	e02b      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <SD_IsCardProgramming+0x1a2>
  {
    return(SD_STREAM_WRITE_OVERRUN);
 8003422:	2315      	movs	r3, #21
 8003424:	e024      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <SD_IsCardProgramming+0x1b0>
  {
    return(SD_CID_CSD_OVERWRITE);
 8003430:	2316      	movs	r3, #22
 8003432:	e01d      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <SD_IsCardProgramming+0x1be>
  {
    return(SD_WP_ERASE_SKIP);
 800343e:	2317      	movs	r3, #23
 8003440:	e016      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <SD_IsCardProgramming+0x1cc>
  {
    return(SD_CARD_ECC_DISABLED);
 800344c:	2318      	movs	r3, #24
 800344e:	e00f      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <SD_IsCardProgramming+0x1da>
  {
    return(SD_ERASE_RESET);
 800345a:	2319      	movs	r3, #25
 800345c:	e008      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  if((responseR1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <SD_IsCardProgramming+0x1e8>
  {
    return(SD_AKE_SEQ_ERROR);
 8003468:	231a      	movs	r3, #26
 800346a:	e001      	b.n	8003470 <SD_IsCardProgramming+0x1ec>
  }
  
  return errorstate;
 800346c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}   
 8003470:	4618      	mov	r0, r3
 8003472:	3728      	adds	r7, #40	; 0x28
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	fdffe008 	.word	0xfdffe008

0800347c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0be      	b.n	800360c <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d031      	beq.n	80034fa <HAL_UART_Init+0x7e>
  { 
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a5e      	ldr	r2, [pc, #376]	; (8003614 <HAL_UART_Init+0x198>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d013      	beq.n	80034c8 <HAL_UART_Init+0x4c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a5c      	ldr	r2, [pc, #368]	; (8003618 <HAL_UART_Init+0x19c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00e      	beq.n	80034c8 <HAL_UART_Init+0x4c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a5b      	ldr	r2, [pc, #364]	; (800361c <HAL_UART_Init+0x1a0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d009      	beq.n	80034c8 <HAL_UART_Init+0x4c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a59      	ldr	r2, [pc, #356]	; (8003620 <HAL_UART_Init+0x1a4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_UART_Init+0x4c>
 80034be:	f44f 7181 	mov.w	r1, #258	; 0x102
 80034c2:	4858      	ldr	r0, [pc, #352]	; (8003624 <HAL_UART_Init+0x1a8>)
 80034c4:	f003 fd2c 	bl	8006f20 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d041      	beq.n	8003554 <HAL_UART_Init+0xd8>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d8:	d03c      	beq.n	8003554 <HAL_UART_Init+0xd8>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e2:	d037      	beq.n	8003554 <HAL_UART_Init+0xd8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ec:	d032      	beq.n	8003554 <HAL_UART_Init+0xd8>
 80034ee:	f240 1103 	movw	r1, #259	; 0x103
 80034f2:	484c      	ldr	r0, [pc, #304]	; (8003624 <HAL_UART_Init+0x1a8>)
 80034f4:	f003 fd14 	bl	8006f20 <assert_failed>
 80034f8:	e02c      	b.n	8003554 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a45      	ldr	r2, [pc, #276]	; (8003614 <HAL_UART_Init+0x198>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d027      	beq.n	8003554 <HAL_UART_Init+0xd8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a43      	ldr	r2, [pc, #268]	; (8003618 <HAL_UART_Init+0x19c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d022      	beq.n	8003554 <HAL_UART_Init+0xd8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a42      	ldr	r2, [pc, #264]	; (800361c <HAL_UART_Init+0x1a0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d01d      	beq.n	8003554 <HAL_UART_Init+0xd8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a42      	ldr	r2, [pc, #264]	; (8003628 <HAL_UART_Init+0x1ac>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d018      	beq.n	8003554 <HAL_UART_Init+0xd8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a41      	ldr	r2, [pc, #260]	; (800362c <HAL_UART_Init+0x1b0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <HAL_UART_Init+0xd8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a3b      	ldr	r2, [pc, #236]	; (8003620 <HAL_UART_Init+0x1a4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00e      	beq.n	8003554 <HAL_UART_Init+0xd8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a3d      	ldr	r2, [pc, #244]	; (8003630 <HAL_UART_Init+0x1b4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d009      	beq.n	8003554 <HAL_UART_Init+0xd8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a3b      	ldr	r2, [pc, #236]	; (8003634 <HAL_UART_Init+0x1b8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <HAL_UART_Init+0xd8>
 800354a:	f240 1107 	movw	r1, #263	; 0x107
 800354e:	4835      	ldr	r0, [pc, #212]	; (8003624 <HAL_UART_Init+0x1a8>)
 8003550:	f003 fce6 	bl	8006f20 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <HAL_UART_Init+0xf4>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003564:	d004      	beq.n	8003570 <HAL_UART_Init+0xf4>
 8003566:	f240 1109 	movw	r1, #265	; 0x109
 800356a:	482e      	ldr	r0, [pc, #184]	; (8003624 <HAL_UART_Init+0x1a8>)
 800356c:	f003 fcd8 	bl	8006f20 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_UART_Init+0x110>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003580:	d004      	beq.n	800358c <HAL_UART_Init+0x110>
 8003582:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8003586:	4827      	ldr	r0, [pc, #156]	; (8003624 <HAL_UART_Init+0x1a8>)
 8003588:	f003 fcca 	bl	8006f20 <assert_failed>
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d106      	bne.n	80035a6 <HAL_UART_Init+0x12a>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f003 fdf7 	bl	8007194 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2224      	movs	r2, #36	; 0x24
 80035aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	68d2      	ldr	r2, [r2, #12]
 80035b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035bc:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f83a 	bl	8003638 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6812      	ldr	r2, [r2, #0]
 80035cc:	6912      	ldr	r2, [r2, #16]
 80035ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	6952      	ldr	r2, [r2, #20]
 80035de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e2:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	68d2      	ldr	r2, [r2, #12]
 80035ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f2:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40011000 	.word	0x40011000
 8003618:	40004400 	.word	0x40004400
 800361c:	40004800 	.word	0x40004800
 8003620:	40011400 	.word	0x40011400
 8003624:	0800730c 	.word	0x0800730c
 8003628:	40004c00 	.word	0x40004c00
 800362c:	40005000 	.word	0x40005000
 8003630:	40007800 	.word	0x40007800
 8003634:	40007c00 	.word	0x40007c00

08003638 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	4ab0      	ldr	r2, [pc, #704]	; (800390c <UART_SetConfig+0x2d4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d904      	bls.n	8003658 <UART_SetConfig+0x20>
 800364e:	f640 1184 	movw	r1, #2436	; 0x984
 8003652:	48af      	ldr	r0, [pc, #700]	; (8003910 <UART_SetConfig+0x2d8>)
 8003654:	f003 fc64 	bl	8006f20 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d009      	beq.n	8003674 <UART_SetConfig+0x3c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003668:	d004      	beq.n	8003674 <UART_SetConfig+0x3c>
 800366a:	f640 1185 	movw	r1, #2437	; 0x985
 800366e:	48a8      	ldr	r0, [pc, #672]	; (8003910 <UART_SetConfig+0x2d8>)
 8003670:	f003 fc56 	bl	8006f20 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00e      	beq.n	800369a <UART_SetConfig+0x62>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d009      	beq.n	800369a <UART_SetConfig+0x62>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800368e:	d004      	beq.n	800369a <UART_SetConfig+0x62>
 8003690:	f640 1186 	movw	r1, #2438	; 0x986
 8003694:	489e      	ldr	r0, [pc, #632]	; (8003910 <UART_SetConfig+0x2d8>)
 8003696:	f003 fc43 	bl	8006f20 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d103      	bne.n	80036b0 <UART_SetConfig+0x78>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <UART_SetConfig+0x82>
 80036b0:	f640 1187 	movw	r1, #2439	; 0x987
 80036b4:	4896      	ldr	r0, [pc, #600]	; (8003910 <UART_SetConfig+0x2d8>)
 80036b6:	f003 fc33 	bl	8006f20 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036ea:	f023 030c 	bic.w	r3, r3, #12
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	4313      	orrs	r3, r2
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003722:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800373e:	f040 80ef 	bne.w	8003920 <UART_SetConfig+0x2e8>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a73      	ldr	r2, [pc, #460]	; (8003914 <UART_SetConfig+0x2dc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <UART_SetConfig+0x11e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a71      	ldr	r2, [pc, #452]	; (8003918 <UART_SetConfig+0x2e0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d16c      	bne.n	8003830 <UART_SetConfig+0x1f8>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681c      	ldr	r4, [r3, #0]
 800375a:	f7fd ffc9 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 800375e:	4602      	mov	r2, r0
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009a      	lsls	r2, r3, #2
 8003768:	441a      	add	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	4a69      	ldr	r2, [pc, #420]	; (800391c <UART_SetConfig+0x2e4>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	011d      	lsls	r5, r3, #4
 800377e:	f7fd ffb7 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 8003782:	4602      	mov	r2, r0
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009a      	lsls	r2, r3, #2
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fbb2 f6f3 	udiv	r6, r2, r3
 8003798:	f7fd ffaa 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 800379c:	4602      	mov	r2, r0
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	009a      	lsls	r2, r3, #2
 80037a6:	441a      	add	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b2:	4a5a      	ldr	r2, [pc, #360]	; (800391c <UART_SetConfig+0x2e4>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	2264      	movs	r2, #100	; 0x64
 80037bc:	fb02 f303 	mul.w	r3, r2, r3
 80037c0:	1af3      	subs	r3, r6, r3
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	3332      	adds	r3, #50	; 0x32
 80037c6:	4a55      	ldr	r2, [pc, #340]	; (800391c <UART_SetConfig+0x2e4>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	441d      	add	r5, r3
 80037d6:	f7fd ff8b 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 80037da:	4602      	mov	r2, r0
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009a      	lsls	r2, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80037f0:	f7fd ff7e 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	009a      	lsls	r2, r3, #2
 80037fe:	441a      	add	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	fbb2 f3f3 	udiv	r3, r2, r3
 800380a:	4a44      	ldr	r2, [pc, #272]	; (800391c <UART_SetConfig+0x2e4>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	2264      	movs	r2, #100	; 0x64
 8003814:	fb02 f303 	mul.w	r3, r2, r3
 8003818:	1af3      	subs	r3, r6, r3
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	3332      	adds	r3, #50	; 0x32
 800381e:	4a3f      	ldr	r2, [pc, #252]	; (800391c <UART_SetConfig+0x2e4>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	442b      	add	r3, r5
 800382c:	60a3      	str	r3, [r4, #8]
 800382e:	e159      	b.n	8003ae4 <UART_SetConfig+0x4ac>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681c      	ldr	r4, [r3, #0]
 8003834:	f7fd ff3a 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 8003838:	4602      	mov	r2, r0
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	009a      	lsls	r2, r3, #2
 8003842:	441a      	add	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	4a33      	ldr	r2, [pc, #204]	; (800391c <UART_SetConfig+0x2e4>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	011d      	lsls	r5, r3, #4
 8003858:	f7fd ff28 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 800385c:	4602      	mov	r2, r0
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	009a      	lsls	r2, r3, #2
 8003866:	441a      	add	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003872:	f7fd ff1b 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 8003876:	4602      	mov	r2, r0
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	009a      	lsls	r2, r3, #2
 8003880:	441a      	add	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	4a23      	ldr	r2, [pc, #140]	; (800391c <UART_SetConfig+0x2e4>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	2264      	movs	r2, #100	; 0x64
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	1af3      	subs	r3, r6, r3
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	3332      	adds	r3, #50	; 0x32
 80038a0:	4a1e      	ldr	r2, [pc, #120]	; (800391c <UART_SetConfig+0x2e4>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	441d      	add	r5, r3
 80038b0:	f7fd fefc 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009a      	lsls	r2, r3, #2
 80038be:	441a      	add	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80038ca:	f7fd feef 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 80038ce:	4602      	mov	r2, r0
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009a      	lsls	r2, r3, #2
 80038d8:	441a      	add	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	4a0d      	ldr	r2, [pc, #52]	; (800391c <UART_SetConfig+0x2e4>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	2264      	movs	r2, #100	; 0x64
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	1af3      	subs	r3, r6, r3
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	3332      	adds	r3, #50	; 0x32
 80038f8:	4a08      	ldr	r2, [pc, #32]	; (800391c <UART_SetConfig+0x2e4>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	442b      	add	r3, r5
 8003906:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003908:	e0ec      	b.n	8003ae4 <UART_SetConfig+0x4ac>
 800390a:	bf00      	nop
 800390c:	00a037a0 	.word	0x00a037a0
 8003910:	0800730c 	.word	0x0800730c
 8003914:	40011000 	.word	0x40011000
 8003918:	40011400 	.word	0x40011400
 800391c:	51eb851f 	.word	0x51eb851f
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a71      	ldr	r2, [pc, #452]	; (8003aec <UART_SetConfig+0x4b4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <UART_SetConfig+0x2fc>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a70      	ldr	r2, [pc, #448]	; (8003af0 <UART_SetConfig+0x4b8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d16b      	bne.n	8003a0c <UART_SetConfig+0x3d4>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681c      	ldr	r4, [r3, #0]
 8003938:	f7fd feda 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 800393c:	4602      	mov	r2, r0
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	009a      	lsls	r2, r3, #2
 8003946:	441a      	add	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	4a68      	ldr	r2, [pc, #416]	; (8003af4 <UART_SetConfig+0x4bc>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	011d      	lsls	r5, r3, #4
 800395c:	f7fd fec8 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 8003960:	4602      	mov	r2, r0
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009a      	lsls	r2, r3, #2
 800396a:	441a      	add	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	fbb2 f6f3 	udiv	r6, r2, r3
 8003976:	f7fd febb 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 800397a:	4602      	mov	r2, r0
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009a      	lsls	r2, r3, #2
 8003984:	441a      	add	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	4a58      	ldr	r2, [pc, #352]	; (8003af4 <UART_SetConfig+0x4bc>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	2264      	movs	r2, #100	; 0x64
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	1af3      	subs	r3, r6, r3
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	3332      	adds	r3, #50	; 0x32
 80039a4:	4a53      	ldr	r2, [pc, #332]	; (8003af4 <UART_SetConfig+0x4bc>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b0:	441d      	add	r5, r3
 80039b2:	f7fd fe9d 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 80039b6:	4602      	mov	r2, r0
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009a      	lsls	r2, r3, #2
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80039cc:	f7fd fe90 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	009a      	lsls	r2, r3, #2
 80039da:	441a      	add	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e6:	4a43      	ldr	r2, [pc, #268]	; (8003af4 <UART_SetConfig+0x4bc>)
 80039e8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	2264      	movs	r2, #100	; 0x64
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
 80039f4:	1af3      	subs	r3, r6, r3
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	3332      	adds	r3, #50	; 0x32
 80039fa:	4a3e      	ldr	r2, [pc, #248]	; (8003af4 <UART_SetConfig+0x4bc>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	442b      	add	r3, r5
 8003a08:	60a3      	str	r3, [r4, #8]
 8003a0a:	e06b      	b.n	8003ae4 <UART_SetConfig+0x4ac>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681c      	ldr	r4, [r3, #0]
 8003a10:	f7fd fe4c 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009a      	lsls	r2, r3, #2
 8003a1e:	441a      	add	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	4a32      	ldr	r2, [pc, #200]	; (8003af4 <UART_SetConfig+0x4bc>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	011d      	lsls	r5, r3, #4
 8003a34:	f7fd fe3a 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009a      	lsls	r2, r3, #2
 8003a42:	441a      	add	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a4e:	f7fd fe2d 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 8003a52:	4602      	mov	r2, r0
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	009a      	lsls	r2, r3, #2
 8003a5c:	441a      	add	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	4a22      	ldr	r2, [pc, #136]	; (8003af4 <UART_SetConfig+0x4bc>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	2264      	movs	r2, #100	; 0x64
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	1af3      	subs	r3, r6, r3
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	3332      	adds	r3, #50	; 0x32
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <UART_SetConfig+0x4bc>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a88:	441d      	add	r5, r3
 8003a8a:	f7fd fe0f 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009a      	lsls	r2, r3, #2
 8003a98:	441a      	add	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003aa4:	f7fd fe02 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009a      	lsls	r2, r3, #2
 8003ab2:	441a      	add	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	4a0d      	ldr	r2, [pc, #52]	; (8003af4 <UART_SetConfig+0x4bc>)
 8003ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	2264      	movs	r2, #100	; 0x64
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	1af3      	subs	r3, r6, r3
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	3332      	adds	r3, #50	; 0x32
 8003ad2:	4a08      	ldr	r2, [pc, #32]	; (8003af4 <UART_SetConfig+0x4bc>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	442b      	add	r3, r5
 8003ae0:	60a3      	str	r3, [r4, #8]
    }
  }
}
 8003ae2:	e7ff      	b.n	8003ae4 <UART_SetConfig+0x4ac>
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aec:	40011000 	.word	0x40011000
 8003af0:	40011400 	.word	0x40011400
 8003af4:	51eb851f 	.word	0x51eb851f

08003af8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDIO register base
  * @param  Init: SDIO initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003af8:	b084      	sub	sp, #16
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	f107 001c 	add.w	r0, r7, #28
 8003b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U; 
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(SDIOx));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a34      	ldr	r2, [pc, #208]	; (8003be4 <SDIO_Init+0xec>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <SDIO_Init+0x26>
 8003b16:	21de      	movs	r1, #222	; 0xde
 8003b18:	4833      	ldr	r0, [pc, #204]	; (8003be8 <SDIO_Init+0xf0>)
 8003b1a:	f003 fa01 	bl	8006f20 <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(Init.ClockEdge)); 
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <SDIO_Init+0x3c>
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2a:	d003      	beq.n	8003b34 <SDIO_Init+0x3c>
 8003b2c:	21df      	movs	r1, #223	; 0xdf
 8003b2e:	482e      	ldr	r0, [pc, #184]	; (8003be8 <SDIO_Init+0xf0>)
 8003b30:	f003 f9f6 	bl	8006f20 <assert_failed>
  assert_param(IS_SDIO_CLOCK_BYPASS(Init.ClockBypass));
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <SDIO_Init+0x52>
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b40:	d003      	beq.n	8003b4a <SDIO_Init+0x52>
 8003b42:	21e0      	movs	r1, #224	; 0xe0
 8003b44:	4828      	ldr	r0, [pc, #160]	; (8003be8 <SDIO_Init+0xf0>)
 8003b46:	f003 f9eb 	bl	8006f20 <assert_failed>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <SDIO_Init+0x68>
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b56:	d003      	beq.n	8003b60 <SDIO_Init+0x68>
 8003b58:	21e1      	movs	r1, #225	; 0xe1
 8003b5a:	4823      	ldr	r0, [pc, #140]	; (8003be8 <SDIO_Init+0xf0>)
 8003b5c:	f003 f9e0 	bl	8006f20 <assert_failed>
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <SDIO_Init+0x86>
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b6c:	d007      	beq.n	8003b7e <SDIO_Init+0x86>
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	d003      	beq.n	8003b7e <SDIO_Init+0x86>
 8003b76:	21e2      	movs	r1, #226	; 0xe2
 8003b78:	481b      	ldr	r0, [pc, #108]	; (8003be8 <SDIO_Init+0xf0>)
 8003b7a:	f003 f9d1 	bl	8006f20 <assert_failed>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <SDIO_Init+0x9c>
 8003b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b8a:	d003      	beq.n	8003b94 <SDIO_Init+0x9c>
 8003b8c:	21e3      	movs	r1, #227	; 0xe3
 8003b8e:	4816      	ldr	r0, [pc, #88]	; (8003be8 <SDIO_Init+0xf0>)
 8003b90:	f003 f9c6 	bl	8006f20 <assert_failed>
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	2bff      	cmp	r3, #255	; 0xff
 8003b98:	d903      	bls.n	8003ba2 <SDIO_Init+0xaa>
 8003b9a:	21e4      	movs	r1, #228	; 0xe4
 8003b9c:	4812      	ldr	r0, [pc, #72]	; (8003be8 <SDIO_Init+0xf0>)
 8003b9e:	f003 f9bf 	bl	8006f20 <assert_failed>
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003ba2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003ba6:	431a      	orrs	r2, r3
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
 8003baa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
             Init.BusWide             |\
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
 8003bae:	431a      	orrs	r2, r3
             Init.BusWide             |\
             Init.HardwareFlowControl |\
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
             Init.BusWide             |\
 8003bb2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
             Init.ClockDiv
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
             Init.BusWide             |\
             Init.HardwareFlowControl |\
 8003bb6:	4313      	orrs	r3, r2
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDIO CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003bc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bde:	b004      	add	sp, #16
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40012c00 	.word	0x40012c00
 8003be8:	08007348 	.word	0x08007348

08003bec <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDIO register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop

08003c08 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDIO register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop

08003c2c <SDIO_PowerState_ON>:
  * @brief  Set SDIO Power state to ON. 
  * @param  SDIOx: Pointer to SDIO register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2203      	movs	r2, #3
 8003c38:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0303 	and.w	r3, r3, #3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <SDIO_SendCommand>:
  * @param  SDIO_CmdInitStruct: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDIO command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->CmdIndex));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b3f      	cmp	r3, #63	; 0x3f
 8003c78:	d904      	bls.n	8003c84 <SDIO_SendCommand+0x20>
 8003c7a:	f240 1169 	movw	r1, #361	; 0x169
 8003c7e:	482b      	ldr	r0, [pc, #172]	; (8003d2c <SDIO_SendCommand+0xc8>)
 8003c80:	f003 f94e 	bl	8006f20 <assert_failed>
  assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->Response));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00c      	beq.n	8003ca6 <SDIO_SendCommand+0x42>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d008      	beq.n	8003ca6 <SDIO_SendCommand+0x42>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2bc0      	cmp	r3, #192	; 0xc0
 8003c9a:	d004      	beq.n	8003ca6 <SDIO_SendCommand+0x42>
 8003c9c:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8003ca0:	4822      	ldr	r0, [pc, #136]	; (8003d2c <SDIO_SendCommand+0xc8>)
 8003ca2:	f003 f93d 	bl	8006f20 <assert_failed>
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->WaitForInterrupt));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00e      	beq.n	8003ccc <SDIO_SendCommand+0x68>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb6:	d009      	beq.n	8003ccc <SDIO_SendCommand+0x68>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc0:	d004      	beq.n	8003ccc <SDIO_SendCommand+0x68>
 8003cc2:	f240 116b 	movw	r1, #363	; 0x16b
 8003cc6:	4819      	ldr	r0, [pc, #100]	; (8003d2c <SDIO_SendCommand+0xc8>)
 8003cc8:	f003 f92a 	bl	8006f20 <assert_failed>
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->CPSM));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <SDIO_SendCommand+0x84>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cdc:	d004      	beq.n	8003ce8 <SDIO_SendCommand+0x84>
 8003cde:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8003ce2:	4812      	ldr	r0, [pc, #72]	; (8003d2c <SDIO_SendCommand+0xc8>)
 8003ce4:	f003 f91c 	bl	8006f20 <assert_failed>

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	609a      	str	r2, [r3, #8]

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
                       SDIO_CmdInitStruct->Response         |\
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 8003cf8:	431a      	orrs	r2, r3
                       SDIO_CmdInitStruct->Response         |\
                       SDIO_CmdInitStruct->WaitForInterrupt |\
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
                       SDIO_CmdInitStruct->Response         |\
 8003cfe:	431a      	orrs	r2, r3
                       SDIO_CmdInitStruct->WaitForInterrupt |\
                       SDIO_CmdInitStruct->CPSM);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	691b      	ldr	r3, [r3, #16]
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
                       SDIO_CmdInitStruct->Response         |\
                       SDIO_CmdInitStruct->WaitForInterrupt |\
 8003d04:	4313      	orrs	r3, r2

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
                       SDIO_CmdInitStruct->Response         |\
                       SDIO_CmdInitStruct->WaitForInterrupt |\
                       SDIO_CmdInitStruct->CPSM);
  
  /* Write to SDIO CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003d14:	f023 030f 	bic.w	r3, r3, #15
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	08007348 	.word	0x08007348

08003d30 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDIO register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	b2db      	uxtb	r3, r3
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop

08003d4c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <SDIO_GetResponse+0x2e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d00a      	beq.n	8003d7a <SDIO_GetResponse+0x2e>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d007      	beq.n	8003d7a <SDIO_GetResponse+0x2e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b0c      	cmp	r3, #12
 8003d6e:	d004      	beq.n	8003d7a <SDIO_GetResponse+0x2e>
 8003d70:	f240 1197 	movw	r1, #407	; 0x197
 8003d74:	4806      	ldr	r0, [pc, #24]	; (8003d90 <SDIO_GetResponse+0x44>)
 8003d76:	f003 f8d3 	bl	8006f20 <assert_failed>

  /* Get the response */
  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <SDIO_GetResponse+0x48>)
 8003d7e:	4413      	add	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
}  
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	08007348 	.word	0x08007348
 8003d94:	40012c14 	.word	0x40012c14

08003d98 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_DataConfig(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->DataLength));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dae:	d304      	bcc.n	8003dba <SDIO_DataConfig+0x22>
 8003db0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8003db4:	4846      	ldr	r0, [pc, #280]	; (8003ed0 <SDIO_DataConfig+0x138>)
 8003db6:	f003 f8b3 	bl	8006f20 <assert_failed>
  assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->DataBlockSize));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d03c      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d038      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	d034      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b30      	cmp	r3, #48	; 0x30
 8003dd8:	d030      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d02c      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b50      	cmp	r3, #80	; 0x50
 8003de8:	d028      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b60      	cmp	r3, #96	; 0x60
 8003df0:	d024      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b70      	cmp	r3, #112	; 0x70
 8003df8:	d020      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b80      	cmp	r3, #128	; 0x80
 8003e00:	d01c      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b90      	cmp	r3, #144	; 0x90
 8003e08:	d018      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2ba0      	cmp	r3, #160	; 0xa0
 8003e10:	d014      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2bb0      	cmp	r3, #176	; 0xb0
 8003e18:	d010      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e20:	d00c      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2bd0      	cmp	r3, #208	; 0xd0
 8003e28:	d008      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2be0      	cmp	r3, #224	; 0xe0
 8003e30:	d004      	beq.n	8003e3c <SDIO_DataConfig+0xa4>
 8003e32:	f240 11ad 	movw	r1, #429	; 0x1ad
 8003e36:	4826      	ldr	r0, [pc, #152]	; (8003ed0 <SDIO_DataConfig+0x138>)
 8003e38:	f003 f872 	bl	8006f20 <assert_failed>
  assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->TransferDir));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <SDIO_DataConfig+0xbe>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d004      	beq.n	8003e56 <SDIO_DataConfig+0xbe>
 8003e4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003e50:	481f      	ldr	r0, [pc, #124]	; (8003ed0 <SDIO_DataConfig+0x138>)
 8003e52:	f003 f865 	bl	8006f20 <assert_failed>
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->TransferMode));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <SDIO_DataConfig+0xd8>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d004      	beq.n	8003e70 <SDIO_DataConfig+0xd8>
 8003e66:	f240 11af 	movw	r1, #431	; 0x1af
 8003e6a:	4819      	ldr	r0, [pc, #100]	; (8003ed0 <SDIO_DataConfig+0x138>)
 8003e6c:	f003 f858 	bl	8006f20 <assert_failed>
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->DPSM));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <SDIO_DataConfig+0xf2>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d004      	beq.n	8003e8a <SDIO_DataConfig+0xf2>
 8003e80:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8003e84:	4812      	ldr	r0, [pc, #72]	; (8003ed0 <SDIO_DataConfig+0x138>)
 8003e86:	f003 f84b 	bl	8006f20 <assert_failed>

  /* Set the SDIO Data Timeout value */
  SDIOx->DTIMER = SDIO_DataInitStruct->DataTimeOut;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
                       SDIO_DataInitStruct->TransferDir   |\
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8003ea2:	431a      	orrs	r2, r3
                       SDIO_DataInitStruct->TransferDir   |\
                       SDIO_DataInitStruct->TransferMode  |\
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
                       SDIO_DataInitStruct->TransferDir   |\
 8003ea8:	431a      	orrs	r2, r3
                       SDIO_DataInitStruct->TransferMode  |\
                       SDIO_DataInitStruct->DPSM);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
                       SDIO_DataInitStruct->TransferDir   |\
                       SDIO_DataInitStruct->TransferMode  |\
 8003eae:	4313      	orrs	r3, r2

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
                       SDIO_DataInitStruct->TransferDir   |\
                       SDIO_DataInitStruct->TransferMode  |\
                       SDIO_DataInitStruct->DPSM);
  
  /* Write to SDIO DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0

}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	08007348 	.word	0x08007348

08003ed4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <disk_status+0x30>)
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	79fa      	ldrb	r2, [r7, #7]
 8003eec:	4905      	ldr	r1, [pc, #20]	; (8003f04 <disk_status+0x30>)
 8003eee:	440a      	add	r2, r1
 8003ef0:	7a12      	ldrb	r2, [r2, #8]
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4798      	blx	r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000044 	.word	0x20000044

08003f08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	4a0d      	ldr	r2, [pc, #52]	; (8003f50 <disk_initialize+0x48>)
 8003f1a:	5cd3      	ldrb	r3, [r2, r3]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d111      	bne.n	8003f44 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	4a0b      	ldr	r2, [pc, #44]	; (8003f50 <disk_initialize+0x48>)
 8003f24:	2101      	movs	r1, #1
 8003f26:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	4a09      	ldr	r2, [pc, #36]	; (8003f50 <disk_initialize+0x48>)
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	79fa      	ldrb	r2, [r7, #7]
 8003f36:	4906      	ldr	r1, [pc, #24]	; (8003f50 <disk_initialize+0x48>)
 8003f38:	440a      	add	r2, r1
 8003f3a:	7a12      	ldrb	r2, [r2, #8]
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4798      	blx	r3
 8003f40:	4603      	mov	r3, r0
 8003f42:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000044 	.word	0x20000044

08003f54 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	4603      	mov	r3, r0
 8003f62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <disk_read+0x3c>)
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	689c      	ldr	r4, [r3, #8]
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <disk_read+0x3c>)
 8003f74:	4413      	add	r3, r2
 8003f76:	7a18      	ldrb	r0, [r3, #8]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	47a0      	blx	r4
 8003f80:	4603      	mov	r3, r0
 8003f82:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd90      	pop	{r4, r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000044 	.word	0x20000044

08003f94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <disk_write+0x3c>)
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	68dc      	ldr	r4, [r3, #12]
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	4a07      	ldr	r2, [pc, #28]	; (8003fd0 <disk_write+0x3c>)
 8003fb4:	4413      	add	r3, r2
 8003fb6:	7a18      	ldrb	r0, [r3, #8]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	47a0      	blx	r4
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	75fb      	strb	r3, [r7, #23]
  return res;
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd90      	pop	{r4, r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000044 	.word	0x20000044

08003fd4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	603a      	str	r2, [r7, #0]
 8003fde:	71fb      	strb	r3, [r7, #7]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <disk_ioctl+0x38>)
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	79fa      	ldrb	r2, [r7, #7]
 8003ff2:	4906      	ldr	r1, [pc, #24]	; (800400c <disk_ioctl+0x38>)
 8003ff4:	440a      	add	r2, r1
 8003ff6:	7a10      	ldrb	r0, [r2, #8]
 8003ff8:	79b9      	ldrb	r1, [r7, #6]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	4798      	blx	r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	73fb      	strb	r3, [r7, #15]
  return res;
 8004002:	7bfb      	ldrb	r3, [r7, #15]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20000044 	.word	0x20000044

08004010 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800401a:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <SD_initialize+0x38>)
 800401c:	2201      	movs	r2, #1
 800401e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8004020:	f002 fda4 	bl	8006b6c <BSP_SD_Init>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d107      	bne.n	800403a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800402a:	4b07      	ldr	r3, [pc, #28]	; (8004048 <SD_initialize+0x38>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	b2da      	uxtb	r2, r3
 8004036:	4b04      	ldr	r3, [pc, #16]	; (8004048 <SD_initialize+0x38>)
 8004038:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800403a:	4b03      	ldr	r3, [pc, #12]	; (8004048 <SD_initialize+0x38>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	b2db      	uxtb	r3, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000000 	.word	0x20000000

0800404c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004056:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <SD_status+0x38>)
 8004058:	2201      	movs	r2, #1
 800405a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 800405c:	f002 fdf2 	bl	8006c44 <BSP_SD_GetStatus>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d107      	bne.n	8004076 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <SD_status+0x38>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	b2da      	uxtb	r2, r3
 8004072:	4b04      	ldr	r3, [pc, #16]	; (8004084 <SD_status+0x38>)
 8004074:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8004076:	4b03      	ldr	r3, [pc, #12]	; (8004084 <SD_status+0x38>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	b2db      	uxtb	r3, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000000 	.word	0x20000000

08004088 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004088:	b590      	push	{r4, r7, lr}
 800408a:	b089      	sub	sp, #36	; 0x24
 800408c:	af02      	add	r7, sp, #8
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	4603      	mov	r3, r0
 8004096:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
                       (uint64_t) (sector * BLOCK_SIZE), 
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	025b      	lsls	r3, r3, #9
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 80040a0:	f04f 0400 	mov.w	r4, #0
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	9201      	str	r2, [sp, #4]
 80040a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ac:	9200      	str	r2, [sp, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	4623      	mov	r3, r4
 80040b2:	68b8      	ldr	r0, [r7, #8]
 80040b4:	f002 fd86 	bl	8006bc4 <BSP_SD_ReadBlocks>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <SD_read+0x3a>
                       (uint64_t) (sector * BLOCK_SIZE), 
                       BLOCK_SIZE, 
                       count) != MSD_OK)
  {
    res = RES_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd90      	pop	{r4, r7, pc}

080040cc <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b089      	sub	sp, #36	; 0x24
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	4603      	mov	r3, r0
 80040da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
                        (uint64_t)(sector * BLOCK_SIZE), 
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	025b      	lsls	r3, r3, #9
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80040e4:	f04f 0400 	mov.w	r4, #0
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	9201      	str	r2, [sp, #4]
 80040ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f0:	9200      	str	r2, [sp, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	4623      	mov	r3, r4
 80040f6:	68b8      	ldr	r0, [r7, #8]
 80040f8:	f002 fd84 	bl	8006c04 <BSP_SD_WriteBlocks>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <SD_write+0x3a>
                        (uint64_t)(sector * BLOCK_SIZE), 
                        BLOCK_SIZE, count) != MSD_OK)
  {
    res = RES_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
}
 8004108:	4618      	mov	r0, r3
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	bd90      	pop	{r4, r7, pc}

08004110 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004110:	b5b0      	push	{r4, r5, r7, lr}
 8004112:	b09a      	sub	sp, #104	; 0x68
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	603a      	str	r2, [r7, #0]
 800411a:	71fb      	strb	r3, [r7, #7]
 800411c:	460b      	mov	r3, r1
 800411e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004126:	4b21      	ldr	r3, [pc, #132]	; (80041ac <SD_ioctl+0x9c>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <SD_ioctl+0x28>
 8004134:	2303      	movs	r3, #3
 8004136:	e035      	b.n	80041a4 <SD_ioctl+0x94>
  
  switch (cmd)
 8004138:	79bb      	ldrb	r3, [r7, #6]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d82d      	bhi.n	800419a <SD_ioctl+0x8a>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <SD_ioctl+0x34>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004155 	.word	0x08004155
 8004148:	0800415d 	.word	0x0800415d
 800414c:	08004181 	.word	0x08004181
 8004150:	08004191 	.word	0x08004191
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    break;
 800415a:	e021      	b.n	80041a0 <SD_ioctl+0x90>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800415c:	f107 0308 	add.w	r3, r7, #8
 8004160:	4618      	mov	r0, r3
 8004162:	f002 fd79 	bl	8006c58 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 8004166:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800416a:	0a54      	lsrs	r4, r2, #9
 800416c:	ea44 54c3 	orr.w	r4, r4, r3, lsl #23
 8004170:	0a5d      	lsrs	r5, r3, #9
 8004172:	4622      	mov	r2, r4
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    break;
 800417e:	e00f      	b.n	80041a0 <SD_ioctl+0x90>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = BLOCK_SIZE;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004186:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    break;
 800418e:	e007      	b.n	80041a0 <SD_ioctl+0x90>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004196:	601a      	str	r2, [r3, #0]
    break;
 8004198:	e002      	b.n	80041a0 <SD_ioctl+0x90>
  
  default:
    res = RES_PARERR;
 800419a:	2304      	movs	r3, #4
 800419c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  return res;
 80041a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3768      	adds	r7, #104	; 0x68
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bdb0      	pop	{r4, r5, r7, pc}
 80041ac:	20000000 	.word	0x20000000

080041b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80041c4:	e007      	b.n	80041d6 <mem_cpy+0x26>
		*d++ = *s++;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	617a      	str	r2, [r7, #20]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	1c51      	adds	r1, r2, #1
 80041d0:	6139      	str	r1, [r7, #16]
 80041d2:	7812      	ldrb	r2, [r2, #0]
 80041d4:	701a      	strb	r2, [r3, #0]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	1e5a      	subs	r2, r3, #1
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f2      	bne.n	80041c6 <mem_cpy+0x16>
		*d++ = *s++;
}
 80041e0:	bf00      	nop
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80041fc:	e005      	b.n	800420a <mem_set+0x1e>
		*d++ = (BYTE)val;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	617a      	str	r2, [r7, #20]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	1e5a      	subs	r2, r3, #1
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f4      	bne.n	80041fe <mem_set+0x12>
		*d++ = (BYTE)val;
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	; 0x24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004238:	bf00      	nop
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	1e5a      	subs	r2, r3, #1
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00d      	beq.n	8004260 <mem_cmp+0x40>
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	61fa      	str	r2, [r7, #28]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	4619      	mov	r1, r3
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	61ba      	str	r2, [r7, #24]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	1acb      	subs	r3, r1, r3
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ec      	beq.n	800423a <mem_cmp+0x1a>
	return r;
 8004260:	697b      	ldr	r3, [r7, #20]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3724      	adds	r7, #36	; 0x24
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800427a:	e002      	b.n	8004282 <chk_chr+0x12>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3301      	adds	r3, #1
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <chk_chr+0x26>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d1f2      	bne.n	800427c <chk_chr+0xc>
	return *str;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	781b      	ldrb	r3, [r3, #0]
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop

080042a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	e038      	b.n	800432e <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80042bc:	4930      	ldr	r1, [pc, #192]	; (8004380 <chk_lock+0xd8>)
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4613      	mov	r3, r2
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d029      	beq.n	8004324 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80042d0:	492b      	ldr	r1, [pc, #172]	; (8004380 <chk_lock+0xd8>)
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4613      	mov	r3, r2
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d11e      	bne.n	8004328 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80042ea:	4925      	ldr	r1, [pc, #148]	; (8004380 <chk_lock+0xd8>)
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4613      	mov	r3, r2
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	3304      	adds	r3, #4
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004302:	429a      	cmp	r2, r3
 8004304:	d110      	bne.n	8004328 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
				Files[i].idx == dp->index) break;
 8004306:	491e      	ldr	r1, [pc, #120]	; (8004380 <chk_lock+0xd8>)
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4613      	mov	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	3308      	adds	r3, #8
 8004316:	881a      	ldrh	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->sclust &&
 800431e:	429a      	cmp	r2, r3
 8004320:	d102      	bne.n	8004328 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004322:	e007      	b.n	8004334 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8004324:	2301      	movs	r3, #1
 8004326:	60bb      	str	r3, [r7, #8]
)
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3301      	adds	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d9c3      	bls.n	80042bc <chk_lock+0x14>
				Files[i].idx == dp->index) break;
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d109      	bne.n	800434e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <chk_lock+0x9e>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d101      	bne.n	800434a <chk_lock+0xa2>
 8004346:	2300      	movs	r3, #0
 8004348:	e013      	b.n	8004372 <chk_lock+0xca>
 800434a:	2312      	movs	r3, #18
 800434c:	e011      	b.n	8004372 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10b      	bne.n	800436c <chk_lock+0xc4>
 8004354:	490a      	ldr	r1, [pc, #40]	; (8004380 <chk_lock+0xd8>)
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4613      	mov	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	330a      	adds	r3, #10
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436a:	d101      	bne.n	8004370 <chk_lock+0xc8>
 800436c:	2310      	movs	r3, #16
 800436e:	e000      	b.n	8004372 <chk_lock+0xca>
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	2000002c 	.word	0x2000002c

08004384 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800438a:	2300      	movs	r3, #0
 800438c:	607b      	str	r3, [r7, #4]
 800438e:	e002      	b.n	8004396 <enq_lock+0x12>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3301      	adds	r3, #1
 8004394:	607b      	str	r3, [r7, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d809      	bhi.n	80043b0 <enq_lock+0x2c>
 800439c:	490a      	ldr	r1, [pc, #40]	; (80043c8 <enq_lock+0x44>)
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ef      	bne.n	8004390 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	bf14      	ite	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	2300      	moveq	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	2000002c 	.word	0x2000002c

080043cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	e02b      	b.n	8004434 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80043dc:	4956      	ldr	r1, [pc, #344]	; (8004538 <inc_lock+0x16c>)
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4613      	mov	r3, r2
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d11b      	bne.n	800442e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80043f6:	4950      	ldr	r1, [pc, #320]	; (8004538 <inc_lock+0x16c>)
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	3304      	adds	r3, #4
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 800440e:	429a      	cmp	r2, r3
 8004410:	d10d      	bne.n	800442e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
 8004412:	4949      	ldr	r1, [pc, #292]	; (8004538 <inc_lock+0x16c>)
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4613      	mov	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	3308      	adds	r3, #8
 8004422:	881a      	ldrh	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
			Files[i].clu == dp->sclust &&
 800442a:	429a      	cmp	r2, r3
 800442c:	d006      	beq.n	800443c <inc_lock+0x70>
)
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3301      	adds	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d9d0      	bls.n	80043dc <inc_lock+0x10>
 800443a:	e000      	b.n	800443e <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
 800443c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d145      	bne.n	80044d0 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e002      	b.n	8004450 <inc_lock+0x84>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3301      	adds	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d809      	bhi.n	800446a <inc_lock+0x9e>
 8004456:	4938      	ldr	r1, [pc, #224]	; (8004538 <inc_lock+0x16c>)
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1ef      	bne.n	800444a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d101      	bne.n	8004474 <inc_lock+0xa8>
 8004470:	2300      	movs	r3, #0
 8004472:	e05a      	b.n	800452a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800447a:	482f      	ldr	r0, [pc, #188]	; (8004538 <inc_lock+0x16c>)
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4613      	mov	r3, r2
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4403      	add	r3, r0
 8004488:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8004490:	4829      	ldr	r0, [pc, #164]	; (8004538 <inc_lock+0x16c>)
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4613      	mov	r3, r2
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4403      	add	r3, r0
 800449e:	3304      	adds	r3, #4
 80044a0:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80044a8:	4923      	ldr	r1, [pc, #140]	; (8004538 <inc_lock+0x16c>)
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4613      	mov	r3, r2
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	3308      	adds	r3, #8
 80044b8:	4602      	mov	r2, r0
 80044ba:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80044bc:	491e      	ldr	r1, [pc, #120]	; (8004538 <inc_lock+0x16c>)
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4613      	mov	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	330a      	adds	r3, #10
 80044cc:	2200      	movs	r2, #0
 80044ce:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00c      	beq.n	80044f0 <inc_lock+0x124>
 80044d6:	4918      	ldr	r1, [pc, #96]	; (8004538 <inc_lock+0x16c>)
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4613      	mov	r3, r2
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	330a      	adds	r3, #10
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <inc_lock+0x124>
 80044ec:	2300      	movs	r3, #0
 80044ee:	e01c      	b.n	800452a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <inc_lock+0x142>
 80044f6:	4910      	ldr	r1, [pc, #64]	; (8004538 <inc_lock+0x16c>)
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4613      	mov	r3, r2
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	330a      	adds	r3, #10
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	3301      	adds	r3, #1
 800450a:	b299      	uxth	r1, r3
 800450c:	e001      	b.n	8004512 <inc_lock+0x146>
 800450e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004512:	4809      	ldr	r0, [pc, #36]	; (8004538 <inc_lock+0x16c>)
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4613      	mov	r3, r2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4403      	add	r3, r0
 8004520:	330a      	adds	r3, #10
 8004522:	460a      	mov	r2, r1
 8004524:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3301      	adds	r3, #1
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	2000002c 	.word	0x2000002c

0800453c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3b01      	subs	r3, #1
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d82e      	bhi.n	80045ae <dec_lock+0x72>
		n = Files[i].ctr;
 8004550:	491b      	ldr	r1, [pc, #108]	; (80045c0 <dec_lock+0x84>)
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	4413      	add	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	330a      	adds	r3, #10
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004564:	89fb      	ldrh	r3, [r7, #14]
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	d101      	bne.n	8004570 <dec_lock+0x34>
 800456c:	2300      	movs	r3, #0
 800456e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004570:	89fb      	ldrh	r3, [r7, #14]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <dec_lock+0x40>
 8004576:	89fb      	ldrh	r3, [r7, #14]
 8004578:	3b01      	subs	r3, #1
 800457a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800457c:	4910      	ldr	r1, [pc, #64]	; (80045c0 <dec_lock+0x84>)
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	330a      	adds	r3, #10
 800458c:	89fa      	ldrh	r2, [r7, #14]
 800458e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004590:	89fb      	ldrh	r3, [r7, #14]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d108      	bne.n	80045a8 <dec_lock+0x6c>
 8004596:	490a      	ldr	r1, [pc, #40]	; (80045c0 <dec_lock+0x84>)
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	737b      	strb	r3, [r7, #13]
 80045ac:	e001      	b.n	80045b2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80045ae:	2302      	movs	r3, #2
 80045b0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80045b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	2000002c 	.word	0x2000002c

080045c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e016      	b.n	8004600 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80045d2:	4910      	ldr	r1, [pc, #64]	; (8004614 <clear_lock+0x50>)
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4613      	mov	r3, r2
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d108      	bne.n	80045fa <clear_lock+0x36>
 80045e8:	490a      	ldr	r1, [pc, #40]	; (8004614 <clear_lock+0x50>)
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4613      	mov	r3, r2
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d9e5      	bls.n	80045d2 <clear_lock+0xe>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8004606:	bf00      	nop
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	2000002c 	.word	0x2000002c

08004618 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800462a:	2b00      	cmp	r3, #0
 800462c:	d038      	beq.n	80046a0 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004634:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	2301      	movs	r3, #1
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	f7ff fca7 	bl	8003f94 <disk_write>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
 8004650:	e026      	b.n	80046a0 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	1ad2      	subs	r2, r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800466a:	429a      	cmp	r2, r3
 800466c:	d218      	bcs.n	80046a0 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e010      	b.n	800469a <sync_window+0x82>
					wsect += fs->fsize;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4413      	add	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	2301      	movs	r3, #1
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	f7ff fc80 	bl	8003f94 <disk_write>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	3b01      	subs	r3, #1
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d8eb      	bhi.n	8004678 <sync_window+0x60>
					disk_write(fs->drv, fs->win.d8, wsect, 1);
				}
			}
		}
	}
	return res;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop

080046ac <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d01b      	beq.n	80046fe <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff ffa6 	bl	8004618 <sync_window>
 80046cc:	4603      	mov	r3, r0
 80046ce:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d113      	bne.n	80046fe <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	2301      	movs	r3, #1
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	f7ff fc37 	bl	8003f54 <disk_read>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d004      	beq.n	80046f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80046ec:	f04f 33ff 	mov.w	r3, #4294967295
 80046f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ff81 	bl	8004618 <sync_window>
 8004716:	4603      	mov	r3, r0
 8004718:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f040 8096 	bne.w	800484e <sync_fs+0x146>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004728:	2b03      	cmp	r3, #3
 800472a:	f040 8083 	bne.w	8004834 <sync_fs+0x12c>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004734:	2b01      	cmp	r3, #1
 8004736:	d17d      	bne.n	8004834 <sync_fs+0x12c>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800473e:	2100      	movs	r1, #0
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff fd53 	bl	80041ec <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2255      	movs	r2, #85	; 0x55
 800474a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	22aa      	movs	r2, #170	; 0xaa
 8004752:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2252      	movs	r2, #82	; 0x52
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2252      	movs	r2, #82	; 0x52
 8004760:	705a      	strb	r2, [r3, #1]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2261      	movs	r2, #97	; 0x61
 8004766:	709a      	strb	r2, [r3, #2]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2241      	movs	r2, #65	; 0x41
 800476c:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2272      	movs	r2, #114	; 0x72
 8004772:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2272      	movs	r2, #114	; 0x72
 800477a:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2241      	movs	r2, #65	; 0x41
 8004782:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2261      	movs	r2, #97	; 0x61
 800478a:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004794:	b2da      	uxtb	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80047a2:	121b      	asrs	r3, r3, #8
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80047b2:	0c1b      	lsrs	r3, r3, #16
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80047c2:	0e1b      	lsrs	r3, r3, #24
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80047e0:	121b      	asrs	r3, r3, #8
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004800:	0e1b      	lsrs	r3, r3, #24
 8004802:	b2da      	uxtb	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8004826:	2301      	movs	r3, #1
 8004828:	f7ff fbb4 	bl	8003f94 <disk_write>
			fs->fsi_flag = 0;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800483a:	2200      	movs	r2, #0
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fbc8 	bl	8003fd4 <disk_ioctl>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <sync_fs+0x146>
			res = FR_DISK_ERR;
 800484a:	2301      	movs	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800484e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	3b02      	subs	r3, #2
 8004866:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800486e:	1e9a      	subs	r2, r3, #2
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d801      	bhi.n	800487a <clust2sect+0x22>
 8004876:	2300      	movs	r3, #0
 8004878:	e00a      	b.n	8004890 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004880:	461a      	mov	r2, r3
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	fb03 f202 	mul.w	r2, r3, r2
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800488e:	4413      	add	r3, r2
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d905      	bls.n	80048b8 <get_fat+0x1c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d802      	bhi.n	80048be <get_fat+0x22>
		val = 1;	/* Internal error */
 80048b8:	2301      	movs	r3, #1
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	e0a0      	b.n	8004a00 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80048be:	f04f 33ff 	mov.w	r3, #4294967295
 80048c2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d044      	beq.n	8004958 <get_fat+0xbc>
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d063      	beq.n	800499a <get_fat+0xfe>
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	f040 808a 	bne.w	80049ec <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4413      	add	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	0a5b      	lsrs	r3, r3, #9
 80048f0:	4413      	add	r3, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff fed9 	bl	80046ac <move_window>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d178      	bne.n	80049f2 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	613a      	str	r2, [r7, #16]
 8004906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	5cd3      	ldrb	r3, [r2, r3]
 800490e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	0a5b      	lsrs	r3, r3, #9
 800491a:	4413      	add	r3, r2
 800491c:	4619      	mov	r1, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff fec4 	bl	80046ac <move_window>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d165      	bne.n	80049f6 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	5cd3      	ldrb	r3, [r2, r3]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	461a      	mov	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <get_fat+0xb2>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	e002      	b.n	8004954 <get_fat+0xb8>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004954:	617b      	str	r3, [r7, #20]
			break;
 8004956:	e053      	b.n	8004a00 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	0a1b      	lsrs	r3, r3, #8
 8004962:	4413      	add	r3, r2
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fea0 	bl	80046ac <move_window>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d143      	bne.n	80049fa <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	60bb      	str	r3, [r7, #8]
			val = LD_WORD(p);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	3301      	adds	r3, #1
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	b21a      	sxth	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	b21b      	sxth	r3, r3
 8004990:	4313      	orrs	r3, r2
 8004992:	b21b      	sxth	r3, r3
 8004994:	b29b      	uxth	r3, r3
 8004996:	617b      	str	r3, [r7, #20]
			break;
 8004998:	e032      	b.n	8004a00 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	09db      	lsrs	r3, r3, #7
 80049a4:	4413      	add	r3, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff fe7f 	bl	80046ac <move_window>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d124      	bne.n	80049fe <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	4413      	add	r3, r2
 80049c0:	60bb      	str	r3, [r7, #8]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	3303      	adds	r3, #3
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	061a      	lsls	r2, r3, #24
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	3302      	adds	r3, #2
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	041b      	lsls	r3, r3, #16
 80049d2:	4313      	orrs	r3, r2
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	3201      	adds	r2, #1
 80049d8:	7812      	ldrb	r2, [r2, #0]
 80049da:	0212      	lsls	r2, r2, #8
 80049dc:	4313      	orrs	r3, r2
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	7812      	ldrb	r2, [r2, #0]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049e8:	617b      	str	r3, [r7, #20]
			break;
 80049ea:	e009      	b.n	8004a00 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 80049ec:	2301      	movs	r3, #1
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	e006      	b.n	8004a00 <get_fat+0x164>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049f2:	bf00      	nop
 80049f4:	e004      	b.n	8004a00 <get_fat+0x164>
			wc = fs->win.d8[bc++ % SS(fs)];
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049f6:	bf00      	nop
 80049f8:	e002      	b.n	8004a00 <get_fat+0x164>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80049fa:	bf00      	nop
 80049fc:	e000      	b.n	8004a00 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
			val = LD_WORD(p);
			break;

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80049fe:	bf00      	nop
		default:
			val = 1;	/* Internal error */
		}
	}

	return val;
 8004a00:	697b      	ldr	r3, [r7, #20]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop

08004a0c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d905      	bls.n	8004a2a <put_fat+0x1e>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d802      	bhi.n	8004a30 <put_fat+0x24>
		res = FR_INT_ERR;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	77fb      	strb	r3, [r7, #31]
 8004a2e:	e0f1      	b.n	8004c14 <put_fat+0x208>

	} else {
		switch (fs->fs_type) {
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d076      	beq.n	8004b28 <put_fat+0x11c>
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	f000 8099 	beq.w	8004b72 <put_fat+0x166>
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	f040 80dd 	bne.w	8004c00 <put_fat+0x1f4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	085b      	lsrs	r3, r3, #1
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4413      	add	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	0a5b      	lsrs	r3, r3, #9
 8004a5e:	4413      	add	r3, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f7ff fe22 	bl	80046ac <move_window>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a6c:	7ffb      	ldrb	r3, [r7, #31]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f040 80c9 	bne.w	8004c06 <put_fat+0x1fa>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	61ba      	str	r2, [r7, #24]
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00f      	beq.n	8004aae <put_fat+0xa2>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	b25b      	sxtb	r3, r3
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	b25a      	sxtb	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	b25b      	sxtb	r3, r3
 8004aa0:	f023 030f 	bic.w	r3, r3, #15
 8004aa4:	b25b      	sxtb	r3, r3
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	b25b      	sxtb	r3, r3
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	e001      	b.n	8004ab2 <put_fat+0xa6>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	0a5b      	lsrs	r3, r3, #9
 8004ac8:	4413      	add	r3, r2
 8004aca:	4619      	mov	r1, r3
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7ff fded 	bl	80046ac <move_window>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ad6:	7ffb      	ldrb	r3, [r7, #31]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f040 8096 	bne.w	8004c0a <put_fat+0x1fe>
			p = &fs->win.d8[bc % SS(fs)];
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <put_fat+0xf0>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	091b      	lsrs	r3, r3, #4
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	e00e      	b.n	8004b1a <put_fat+0x10e>
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	b25b      	sxtb	r3, r3
 8004b02:	f023 030f 	bic.w	r3, r3, #15
 8004b06:	b25a      	sxtb	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	0a1b      	lsrs	r3, r3, #8
 8004b0c:	b25b      	sxtb	r3, r3
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	b25b      	sxtb	r3, r3
 8004b14:	4313      	orrs	r3, r2
 8004b16:	b25b      	sxtb	r3, r3
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004b26:	e075      	b.n	8004c14 <put_fat+0x208>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	0a1b      	lsrs	r3, r3, #8
 8004b32:	4413      	add	r3, r2
 8004b34:	4619      	mov	r1, r3
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7ff fdb8 	bl	80046ac <move_window>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b40:	7ffb      	ldrb	r3, [r7, #31]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d163      	bne.n	8004c0e <put_fat+0x202>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	1212      	asrs	r2, r2, #8
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004b70:	e050      	b.n	8004c14 <put_fat+0x208>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	09db      	lsrs	r3, r3, #7
 8004b7c:	4413      	add	r3, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff fd93 	bl	80046ac <move_window>
 8004b86:	4603      	mov	r3, r0
 8004b88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b8a:	7ffb      	ldrb	r3, [r7, #31]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d140      	bne.n	8004c12 <put_fat+0x206>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	3303      	adds	r3, #3
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	061a      	lsls	r2, r3, #24
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	3302      	adds	r3, #2
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	3201      	adds	r2, #1
 8004bb4:	7812      	ldrb	r2, [r2, #0]
 8004bb6:	0212      	lsls	r2, r2, #8
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	7812      	ldrb	r2, [r2, #0]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	1212      	asrs	r2, r2, #8
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	3302      	adds	r3, #2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	0c12      	lsrs	r2, r2, #16
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	3303      	adds	r3, #3
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	0e12      	lsrs	r2, r2, #24
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004bfe:	e009      	b.n	8004c14 <put_fat+0x208>

		default :
			res = FR_INT_ERR;
 8004c00:	2302      	movs	r3, #2
 8004c02:	77fb      	strb	r3, [r7, #31]
 8004c04:	e006      	b.n	8004c14 <put_fat+0x208>
	} else {
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
 8004c06:	bf00      	nop
 8004c08:	e004      	b.n	8004c14 <put_fat+0x208>
			p = &fs->win.d8[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
 8004c0a:	bf00      	nop
 8004c0c:	e002      	b.n	8004c14 <put_fat+0x208>
			fs->wflag = 1;
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
 8004c0e:	bf00      	nop
 8004c10:	e000      	b.n	8004c14 <put_fat+0x208>
			fs->wflag = 1;
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
			if (res != FR_OK) break;
 8004c12:	bf00      	nop
		default :
			res = FR_INT_ERR;
		}
	}

	return res;
 8004c14:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop

08004c20 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d905      	bls.n	8004c3c <remove_chain+0x1c>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d802      	bhi.n	8004c42 <remove_chain+0x22>
		res = FR_INT_ERR;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	73fb      	strb	r3, [r7, #15]
 8004c40:	e043      	b.n	8004cca <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004c46:	e036      	b.n	8004cb6 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff fe26 	bl	800489c <get_fat>
 8004c50:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d035      	beq.n	8004cc4 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d102      	bne.n	8004c64 <remove_chain+0x44>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	73fb      	strb	r3, [r7, #15]
 8004c62:	e032      	b.n	8004cca <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6a:	d102      	bne.n	8004c72 <remove_chain+0x52>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
 8004c70:	e02b      	b.n	8004cca <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004c72:	2200      	movs	r2, #0
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff fec8 	bl	8004a0c <put_fat>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d120      	bne.n	8004cc8 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d00f      	beq.n	8004cb2 <remove_chain+0x92>
				fs->free_clust++;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	603b      	str	r3, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d8c2      	bhi.n	8004c48 <remove_chain+0x28>
 8004cc2:	e002      	b.n	8004cca <remove_chain+0xaa>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
 8004cc4:	bf00      	nop
 8004cc6:	e000      	b.n	8004cca <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
 8004cc8:	bf00      	nop
#endif
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10f      	bne.n	8004d04 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004cea:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <create_chain+0x2a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d81c      	bhi.n	8004d38 <create_chain+0x64>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	e019      	b.n	8004d38 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004d04:	6839      	ldr	r1, [r7, #0]
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fdc8 	bl	800489c <get_fat>
 8004d0c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d801      	bhi.n	8004d18 <create_chain+0x44>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e076      	b.n	8004e06 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d101      	bne.n	8004d24 <create_chain+0x50>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	e070      	b.n	8004e06 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d901      	bls.n	8004d34 <create_chain+0x60>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	e068      	b.n	8004e06 <create_chain+0x132>
		scl = clst;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d807      	bhi.n	8004d5e <create_chain+0x8a>
			ncl = 2;
 8004d4e:	2302      	movs	r3, #2
 8004d50:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d901      	bls.n	8004d5e <create_chain+0x8a>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e053      	b.n	8004e06 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004d5e:	6979      	ldr	r1, [r7, #20]
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff fd9b 	bl	800489c <get_fat>
 8004d66:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00e      	beq.n	8004d8c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d002      	beq.n	8004d7c <create_chain+0xa8>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <create_chain+0xac>
			return cs;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	e042      	b.n	8004e06 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d1d9      	bne.n	8004d3c <create_chain+0x68>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e03c      	b.n	8004e06 <create_chain+0x132>
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
 8004d8c:	bf00      	nop
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004d8e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004d92:	6979      	ldr	r1, [r7, #20]
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff fe39 	bl	8004a0c <put_fat>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d109      	bne.n	8004db8 <create_chain+0xe4>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d006      	beq.n	8004db8 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fe2c 	bl	8004a0c <put_fat>
 8004db4:	4603      	mov	r3, r0
 8004db6:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d11a      	bne.n	8004df4 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d018      	beq.n	8004e04 <create_chain+0x130>
			fs->free_clust--;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004dd8:	1e5a      	subs	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8004df2:	e007      	b.n	8004e04 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d102      	bne.n	8004e00 <create_chain+0x12c>
 8004dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfe:	e000      	b.n	8004e02 <create_chain+0x12e>
 8004e00:	2301      	movs	r3, #1
 8004e02:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004e04:	697b      	ldr	r3, [r7, #20]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop

08004e10 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004e20:	3304      	adds	r3, #4
 8004e22:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	0a5b      	lsrs	r3, r3, #9
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004e2e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004e32:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1d1a      	adds	r2, r3, #4
 8004e3c:	613a      	str	r2, [r7, #16]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <clmt_clust+0x3c>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e010      	b.n	8004e6e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d307      	bcc.n	8004e64 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	613b      	str	r3, [r7, #16]
	}
 8004e62:	e7e9      	b.n	8004e38 <clmt_clust+0x28>
	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (!ncl) return 0;		/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
 8004e64:	bf00      	nop
		cl -= ncl; tbl++;		/* Next fragment */
	}
	return cl + *tbl;	/* Return the cluster number */
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	4413      	add	r3, r2
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop

08004e7c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004e96:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d007      	beq.n	8004eae <dir_sdi+0x32>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ea4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d801      	bhi.n	8004eb2 <dir_sdi+0x36>
		return FR_INT_ERR;
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e074      	b.n	8004f9c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10c      	bne.n	8004ed2 <dir_sdi+0x56>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ebe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d105      	bne.n	8004ed2 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ecc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004ed0:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d111      	bne.n	8004efc <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ede:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d801      	bhi.n	8004eee <dir_sdi+0x72>
			return FR_INT_ERR;
 8004eea:	2302      	movs	r3, #2
 8004eec:	e056      	b.n	8004f9c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ef4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004ef8:	613b      	str	r3, [r7, #16]
 8004efa:	e032      	b.n	8004f62 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f02:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004f0a:	e01e      	b.n	8004f4a <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f12:	6979      	ldr	r1, [r7, #20]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fcc1 	bl	800489c <get_fat>
 8004f1a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d101      	bne.n	8004f28 <dir_sdi+0xac>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e039      	b.n	8004f9c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d907      	bls.n	8004f3e <dir_sdi+0xc2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f34:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d801      	bhi.n	8004f42 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e02c      	b.n	8004f9c <dir_sdi+0x120>
			idx -= ic;
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	603b      	str	r3, [r7, #0]
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d2dc      	bcs.n	8004f0c <dir_sdi+0x90>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f58:	6979      	ldr	r1, [r7, #20]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff fc7c 	bl	8004858 <clust2sect>
 8004f60:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <dir_sdi+0xf8>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e013      	b.n	8004f9c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	091a      	lsrs	r2, r3, #4
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	441a      	add	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f88:	461a      	mov	r2, r3
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	015b      	lsls	r3, r3, #5
 8004f92:	441a      	add	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d004      	beq.n	8004fca <dir_next+0x26>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <dir_next+0x2a>
		return FR_NO_FILE;
 8004fca:	2304      	movs	r3, #4
 8004fcc:	e0dd      	b.n	800518a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f040 80c6 	bne.w	8005166 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10b      	bne.n	800500a <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ff8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	429a      	cmp	r2, r3
 8005002:	f200 80b0 	bhi.w	8005166 <dir_next+0x1c2>
				return FR_NO_FILE;
 8005006:	2304      	movs	r3, #4
 8005008:	e0bf      	b.n	800518a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	091b      	lsrs	r3, r3, #4
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005014:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005018:	3a01      	subs	r2, #1
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	f040 80a2 	bne.w	8005166 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f7ff fc33 	bl	800489c <get_fat>
 8005036:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d801      	bhi.n	8005042 <dir_next+0x9e>
 800503e:	2302      	movs	r3, #2
 8005040:	e0a3      	b.n	800518a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d101      	bne.n	800504e <dir_next+0xaa>
 800504a:	2301      	movs	r3, #1
 800504c:	e09d      	b.n	800518a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005054:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	429a      	cmp	r2, r3
 800505c:	d874      	bhi.n	8005148 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <dir_next+0xc4>
 8005064:	2304      	movs	r3, #4
 8005066:	e090      	b.n	800518a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f7ff fe2c 	bl	8004cd4 <create_chain>
 800507c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <dir_next+0xe4>
 8005084:	2307      	movs	r3, #7
 8005086:	e080      	b.n	800518a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d101      	bne.n	8005092 <dir_next+0xee>
 800508e:	2302      	movs	r3, #2
 8005090:	e07b      	b.n	800518a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005098:	d101      	bne.n	800509e <dir_next+0xfa>
 800509a:	2301      	movs	r3, #1
 800509c:	e075      	b.n	800518a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fab7 	bl	8004618 <sync_window>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <dir_next+0x110>
 80050b0:	2301      	movs	r3, #1
 80050b2:	e06a      	b.n	800518a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050be:	2100      	movs	r1, #0
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff f893 	bl	80041ec <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050d2:	6979      	ldr	r1, [r7, #20]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fbbf 	bl	8004858 <clust2sect>
 80050da:	4603      	mov	r3, r0
 80050dc:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	e01b      	b.n	800511e <dir_next+0x17a>
						dp->fs->wflag = 1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fa8d 	bl	8004618 <sync_window>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <dir_next+0x164>
 8005104:	2301      	movs	r3, #1
 8005106:	e040      	b.n	800518a <dir_next+0x1e6>
						dp->fs->winsect++;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800510e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005112:	3201      	adds	r2, #1
 8005114:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	3301      	adds	r3, #1
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005124:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005128:	461a      	mov	r2, r3
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	429a      	cmp	r2, r3
 800512e:	d8da      	bhi.n	80050e6 <dir_next+0x142>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800513c:	f8d2 122c 	ldr.w	r1, [r2, #556]	; 0x22c
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	1a8a      	subs	r2, r1, r2
 8005144:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005156:	6979      	ldr	r1, [r7, #20]
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fb7d 	bl	8004858 <clust2sect>
 800515e:	4602      	mov	r2, r0
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	b29a      	uxth	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005176:	461a      	mov	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	015b      	lsls	r3, r3, #5
 8005180:	441a      	add	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	bd90      	pop	{r4, r7, pc}
 8005192:	bf00      	nop

08005194 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800519e:	2100      	movs	r1, #0
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff fe6b 	bl	8004e7c <dir_sdi>
 80051a6:	4603      	mov	r3, r0
 80051a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d131      	bne.n	8005214 <dir_alloc+0x80>
		n = 0;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f7ff fa72 	bl	80046ac <move_window>
 80051c8:	4603      	mov	r3, r0
 80051ca:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d11f      	bne.n	8005212 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2be5      	cmp	r3, #229	; 0xe5
 80051dc:	d005      	beq.n	80051ea <dir_alloc+0x56>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d107      	bne.n	80051fa <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	3301      	adds	r3, #1
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d102      	bne.n	80051fe <dir_alloc+0x6a>
 80051f8:	e00c      	b.n	8005214 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80051fa:	2300      	movs	r3, #0
 80051fc:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80051fe:	2101      	movs	r1, #1
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff fecf 	bl	8004fa4 <dir_next>
 8005206:	4603      	mov	r3, r0
 8005208:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0d1      	beq.n	80051b4 <dir_alloc+0x20>
 8005210:	e000      	b.n	8005214 <dir_alloc+0x80>
	res = dir_sdi(dp, 0);
	if (res == FR_OK) {
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
			if (res != FR_OK) break;
 8005212:	bf00      	nop
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b04      	cmp	r3, #4
 8005218:	d101      	bne.n	800521e <dir_alloc+0x8a>
 800521a:	2307      	movs	r3, #7
 800521c:	73fb      	strb	r3, [r7, #15]
	return res;
 800521e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	331b      	adds	r3, #27
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	b21a      	sxth	r2, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	331a      	adds	r3, #26
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	b21b      	sxth	r3, r3
 8005244:	4313      	orrs	r3, r2
 8005246:	b21b      	sxth	r3, r3
 8005248:	b29b      	uxth	r3, r3
 800524a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005252:	2b03      	cmp	r3, #3
 8005254:	d10f      	bne.n	8005276 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	3315      	adds	r3, #21
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	b21a      	sxth	r2, r3
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	3314      	adds	r3, #20
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	b21b      	sxth	r3, r3
 8005268:	4313      	orrs	r3, r2
 800526a:	b21b      	sxth	r3, r3
 800526c:	b29b      	uxth	r3, r3
 800526e:	041b      	lsls	r3, r3, #16
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

	return cl;
 8005276:	68fb      	ldr	r3, [r7, #12]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	331a      	adds	r3, #26
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	331b      	adds	r3, #27
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	1212      	asrs	r2, r2, #8
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3314      	adds	r3, #20
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	0c12      	lsrs	r2, r2, #16
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3315      	adds	r3, #21
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	0c12      	lsrs	r2, r2, #16
 80052b8:	1212      	asrs	r2, r2, #8
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop

080052cc <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80052d4:	2100      	movs	r1, #0
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fdd0 	bl	8004e7c <dir_sdi>
 80052dc:	4603      	mov	r3, r0
 80052de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <dir_find+0x1e>
 80052e6:	7dfb      	ldrb	r3, [r7, #23]
 80052e8:	e03b      	b.n	8005362 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80052f6:	4619      	mov	r1, r3
 80052f8:	4610      	mov	r0, r2
 80052fa:	f7ff f9d7 	bl	80046ac <move_window>
 80052fe:	4603      	mov	r3, r0
 8005300:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005302:	7dfb      	ldrb	r3, [r7, #23]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d128      	bne.n	800535a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800530e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d102      	bne.n	8005322 <dir_find+0x56>
 800531c:	2304      	movs	r3, #4
 800531e:	75fb      	strb	r3, [r7, #23]
 8005320:	e01e      	b.n	8005360 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	330b      	adds	r3, #11
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <dir_find+0x7a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005336:	220b      	movs	r2, #11
 8005338:	4619      	mov	r1, r3
 800533a:	6938      	ldr	r0, [r7, #16]
 800533c:	f7fe ff70 	bl	8004220 <mem_cmp>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00b      	beq.n	800535e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005346:	2100      	movs	r1, #0
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff fe2b 	bl	8004fa4 <dir_next>
 800534e:	4603      	mov	r3, r0
 8005350:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005352:	7dfb      	ldrb	r3, [r7, #23]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0c8      	beq.n	80052ea <dir_find+0x1e>
 8005358:	e002      	b.n	8005360 <dir_find+0x94>
#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <dir_find+0x94>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
 800535e:	bf00      	nop
#endif
		res = dir_next(dp, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
 8005360:	7dfb      	ldrb	r3, [r7, #23]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop

0800536c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005374:	2101      	movs	r1, #1
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff ff0c 	bl	8005194 <dir_alloc>
 800537c:	4603      	mov	r3, r0
 800537e:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d126      	bne.n	80053d4 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005392:	4619      	mov	r1, r3
 8005394:	4610      	mov	r0, r2
 8005396:	f7ff f989 	bl	80046ac <move_window>
 800539a:	4603      	mov	r3, r0
 800539c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d117      	bne.n	80053d4 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053aa:	2220      	movs	r2, #32
 80053ac:	2100      	movs	r1, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fe ff1c 	bl	80041ec <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80053c0:	220b      	movs	r2, #11
 80053c2:	4619      	mov	r1, r3
 80053c4:	f7fe fef4 	bl	80041b0 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop

080053e0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e002      	b.n	80053f8 <create_name+0x18>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3301      	adds	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b2f      	cmp	r3, #47	; 0x2f
 80053fe:	d0f8      	beq.n	80053f2 <create_name+0x12>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b5c      	cmp	r3, #92	; 0x5c
 8005406:	d0f4      	beq.n	80053f2 <create_name+0x12>
	sfn = dp->fn;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800540e:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005410:	220b      	movs	r2, #11
 8005412:	2120      	movs	r1, #32
 8005414:	68b8      	ldr	r0, [r7, #8]
 8005416:	f7fe fee9 	bl	80041ec <mem_set>
	si = i = b = 0; ni = 8;
 800541a:	2300      	movs	r3, #0
 800541c:	77fb      	strb	r3, [r7, #31]
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	2308      	movs	r3, #8
 8005428:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	617a      	str	r2, [r7, #20]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005438:	7fbb      	ldrb	r3, [r7, #30]
 800543a:	2b20      	cmp	r3, #32
 800543c:	d953      	bls.n	80054e6 <create_name+0x106>
 800543e:	7fbb      	ldrb	r3, [r7, #30]
 8005440:	2b2f      	cmp	r3, #47	; 0x2f
 8005442:	d050      	beq.n	80054e6 <create_name+0x106>
 8005444:	7fbb      	ldrb	r3, [r7, #30]
 8005446:	2b5c      	cmp	r3, #92	; 0x5c
 8005448:	d04d      	beq.n	80054e6 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800544a:	7fbb      	ldrb	r3, [r7, #30]
 800544c:	2b2e      	cmp	r3, #46	; 0x2e
 800544e:	d003      	beq.n	8005458 <create_name+0x78>
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	429a      	cmp	r2, r3
 8005456:	d30f      	bcc.n	8005478 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b08      	cmp	r3, #8
 800545c:	d102      	bne.n	8005464 <create_name+0x84>
 800545e:	7fbb      	ldrb	r3, [r7, #30]
 8005460:	2b2e      	cmp	r3, #46	; 0x2e
 8005462:	d001      	beq.n	8005468 <create_name+0x88>
 8005464:	2306      	movs	r3, #6
 8005466:	e073      	b.n	8005550 <create_name+0x170>
			i = 8; ni = 11;
 8005468:	2308      	movs	r3, #8
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	230b      	movs	r3, #11
 800546e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8005470:	7ffb      	ldrb	r3, [r7, #31]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e035      	b.n	80054e4 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005478:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800547c:	2b00      	cmp	r3, #0
 800547e:	da08      	bge.n	8005492 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8005480:	7ffb      	ldrb	r3, [r7, #31]
 8005482:	f043 0303 	orr.w	r3, r3, #3
 8005486:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005488:	7fbb      	ldrb	r3, [r7, #30]
 800548a:	3b80      	subs	r3, #128	; 0x80
 800548c:	4a32      	ldr	r2, [pc, #200]	; (8005558 <create_name+0x178>)
 800548e:	5cd3      	ldrb	r3, [r2, r3]
 8005490:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8005492:	7fbb      	ldrb	r3, [r7, #30]
 8005494:	4619      	mov	r1, r3
 8005496:	4831      	ldr	r0, [pc, #196]	; (800555c <create_name+0x17c>)
 8005498:	f7fe feea 	bl	8004270 <chk_chr>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <create_name+0xc6>
				return FR_INVALID_NAME;
 80054a2:	2306      	movs	r3, #6
 80054a4:	e054      	b.n	8005550 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80054a6:	7fbb      	ldrb	r3, [r7, #30]
 80054a8:	2b40      	cmp	r3, #64	; 0x40
 80054aa:	d907      	bls.n	80054bc <create_name+0xdc>
 80054ac:	7fbb      	ldrb	r3, [r7, #30]
 80054ae:	2b5a      	cmp	r3, #90	; 0x5a
 80054b0:	d804      	bhi.n	80054bc <create_name+0xdc>
				b |= 2;
 80054b2:	7ffb      	ldrb	r3, [r7, #31]
 80054b4:	f043 0302 	orr.w	r3, r3, #2
 80054b8:	77fb      	strb	r3, [r7, #31]
 80054ba:	e00c      	b.n	80054d6 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80054bc:	7fbb      	ldrb	r3, [r7, #30]
 80054be:	2b60      	cmp	r3, #96	; 0x60
 80054c0:	d909      	bls.n	80054d6 <create_name+0xf6>
 80054c2:	7fbb      	ldrb	r3, [r7, #30]
 80054c4:	2b7a      	cmp	r3, #122	; 0x7a
 80054c6:	d806      	bhi.n	80054d6 <create_name+0xf6>
					b |= 1; c -= 0x20;
 80054c8:	7ffb      	ldrb	r3, [r7, #31]
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	77fb      	strb	r3, [r7, #31]
 80054d0:	7fbb      	ldrb	r3, [r7, #30]
 80054d2:	3b20      	subs	r3, #32
 80054d4:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	613a      	str	r2, [r7, #16]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	4413      	add	r3, r2
 80054e0:	7fba      	ldrb	r2, [r7, #30]
 80054e2:	701a      	strb	r2, [r3, #0]
		}
	}
 80054e4:	e7a1      	b.n	800542a <create_name+0x4a>
	*path = &p[si];						/* Return pointer to the next segment */
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	441a      	add	r2, r3
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80054f0:	7fbb      	ldrb	r3, [r7, #30]
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d801      	bhi.n	80054fa <create_name+0x11a>
 80054f6:	2304      	movs	r3, #4
 80054f8:	e000      	b.n	80054fc <create_name+0x11c>
 80054fa:	2300      	movs	r3, #0
 80054fc:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <create_name+0x128>
 8005504:	2306      	movs	r3, #6
 8005506:	e023      	b.n	8005550 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2be5      	cmp	r3, #229	; 0xe5
 800550e:	d102      	bne.n	8005516 <create_name+0x136>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2205      	movs	r2, #5
 8005514:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d102      	bne.n	8005522 <create_name+0x142>
 800551c:	7ffb      	ldrb	r3, [r7, #31]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8005522:	7ffb      	ldrb	r3, [r7, #31]
 8005524:	f003 0303 	and.w	r3, r3, #3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d103      	bne.n	8005534 <create_name+0x154>
 800552c:	7fbb      	ldrb	r3, [r7, #30]
 800552e:	f043 0310 	orr.w	r3, r3, #16
 8005532:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8005534:	7ffb      	ldrb	r3, [r7, #31]
 8005536:	f003 030c 	and.w	r3, r3, #12
 800553a:	2b04      	cmp	r3, #4
 800553c:	d103      	bne.n	8005546 <create_name+0x166>
 800553e:	7fbb      	ldrb	r3, [r7, #30]
 8005540:	f043 0308 	orr.w	r3, r3, #8
 8005544:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	330b      	adds	r3, #11
 800554a:	7fba      	ldrb	r2, [r7, #30]
 800554c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800554e:	2300      	movs	r3, #0
#endif
}
 8005550:	4618      	mov	r0, r3
 8005552:	3720      	adds	r7, #32
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	0800741c 	.word	0x0800741c
 800555c:	08007384 	.word	0x08007384

08005560 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b2f      	cmp	r3, #47	; 0x2f
 8005570:	d003      	beq.n	800557a <follow_path+0x1a>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b5c      	cmp	r3, #92	; 0x5c
 8005578:	d102      	bne.n	8005580 <follow_path+0x20>
		path++;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	3301      	adds	r3, #1
 800557e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b1f      	cmp	r3, #31
 800558e:	d80a      	bhi.n	80055a6 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8005590:	2100      	movs	r1, #0
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff fc72 	bl	8004e7c <dir_sdi>
 8005598:	4603      	mov	r3, r0
 800559a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80055a4:	e045      	b.n	8005632 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80055a6:	463b      	mov	r3, r7
 80055a8:	4619      	mov	r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff ff18 	bl	80053e0 <create_name>
 80055b0:	4603      	mov	r3, r0
 80055b2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d136      	bne.n	8005628 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff fe86 	bl	80052cc <dir_find>
 80055c0:	4603      	mov	r3, r0
 80055c2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80055ca:	7adb      	ldrb	r3, [r3, #11]
 80055cc:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d128      	bne.n	800562c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80055da:	7bbb      	ldrb	r3, [r7, #14]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d123      	bne.n	800562c <follow_path+0xcc>
 80055e4:	2305      	movs	r3, #5
 80055e6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80055e8:	e020      	b.n	800562c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80055ea:	7bbb      	ldrb	r3, [r7, #14]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d11d      	bne.n	8005630 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055fa:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	330b      	adds	r3, #11
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b00      	cmp	r3, #0
 8005608:	d102      	bne.n	8005610 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800560a:	2305      	movs	r3, #5
 800560c:	73fb      	strb	r3, [r7, #15]
 800560e:	e010      	b.n	8005632 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fe05 	bl	8005228 <ld_clust>
 800561e:	4602      	mov	r2, r0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		}
 8005626:	e7be      	b.n	80055a6 <follow_path+0x46>
		res = dir_sdi(dp, 0);
		dp->dir = 0;
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
 8005628:	bf00      	nop
 800562a:	e002      	b.n	8005632 <follow_path+0xd2>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800562c:	bf00      	nop
 800562e:	e000      	b.n	8005632 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005630:	bf00      	nop
			}
			dp->sclust = ld_clust(dp->fs, dir);
		}
	}

	return res;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005644:	f04f 33ff 	mov.w	r3, #4294967295
 8005648:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d031      	beq.n	80056b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	e002      	b.n	8005660 <get_ldnumber+0x24>
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	3301      	adds	r3, #1
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b20      	cmp	r3, #32
 8005666:	d903      	bls.n	8005670 <get_ldnumber+0x34>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b3a      	cmp	r3, #58	; 0x3a
 800566e:	d1f4      	bne.n	800565a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b3a      	cmp	r3, #58	; 0x3a
 8005676:	d11c      	bne.n	80056b2 <get_ldnumber+0x76>
			tp = *path;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	60fa      	str	r2, [r7, #12]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	3b30      	subs	r3, #48	; 0x30
 8005688:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b09      	cmp	r3, #9
 800568e:	d80e      	bhi.n	80056ae <get_ldnumber+0x72>
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	429a      	cmp	r2, r3
 8005696:	d10a      	bne.n	80056ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d107      	bne.n	80056ae <get_ldnumber+0x72>
					vol = (int)i;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	3301      	adds	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	e002      	b.n	80056b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80056b2:	2300      	movs	r3, #0
 80056b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80056b6:	693b      	ldr	r3, [r7, #16]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f04f 32ff 	mov.w	r2, #4294967295
 80056dc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fe ffe2 	bl	80046ac <move_window>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <check_fs+0x2e>
		return 3;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e04a      	b.n	8005788 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80056f8:	3301      	adds	r3, #1
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	b21a      	sxth	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005706:	b21b      	sxth	r3, r3
 8005708:	4313      	orrs	r3, r2
 800570a:	b21b      	sxth	r3, r3
 800570c:	4a20      	ldr	r2, [pc, #128]	; (8005790 <check_fs+0xcc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d001      	beq.n	8005716 <check_fs+0x52>
		return 2;
 8005712:	2302      	movs	r3, #2
 8005714:	e038      	b.n	8005788 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3336      	adds	r3, #54	; 0x36
 800571a:	3303      	adds	r3, #3
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	061a      	lsls	r2, r3, #24
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3336      	adds	r3, #54	; 0x36
 8005724:	3302      	adds	r3, #2
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	4313      	orrs	r3, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	3236      	adds	r2, #54	; 0x36
 8005730:	3201      	adds	r2, #1
 8005732:	7812      	ldrb	r2, [r2, #0]
 8005734:	0212      	lsls	r2, r2, #8
 8005736:	4313      	orrs	r3, r2
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800573e:	4313      	orrs	r3, r2
 8005740:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005744:	4a13      	ldr	r2, [pc, #76]	; (8005794 <check_fs+0xd0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d101      	bne.n	800574e <check_fs+0x8a>
		return 0;
 800574a:	2300      	movs	r3, #0
 800574c:	e01c      	b.n	8005788 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3352      	adds	r3, #82	; 0x52
 8005752:	3303      	adds	r3, #3
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	061a      	lsls	r2, r3, #24
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3352      	adds	r3, #82	; 0x52
 800575c:	3302      	adds	r3, #2
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	041b      	lsls	r3, r3, #16
 8005762:	4313      	orrs	r3, r2
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	3252      	adds	r2, #82	; 0x52
 8005768:	3201      	adds	r2, #1
 800576a:	7812      	ldrb	r2, [r2, #0]
 800576c:	0212      	lsls	r2, r2, #8
 800576e:	4313      	orrs	r3, r2
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005776:	4313      	orrs	r3, r2
 8005778:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800577c:	4a05      	ldr	r2, [pc, #20]	; (8005794 <check_fs+0xd0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d101      	bne.n	8005786 <check_fs+0xc2>
		return 0;
 8005782:	2300      	movs	r3, #0
 8005784:	e000      	b.n	8005788 <check_fs+0xc4>

	return 1;
 8005786:	2301      	movs	r3, #1
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	ffffaa55 	.word	0xffffaa55
 8005794:	00544146 	.word	0x00544146

08005798 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b096      	sub	sp, #88	; 0x58
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	4613      	mov	r3, r2
 80057a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80057ac:	68b8      	ldr	r0, [r7, #8]
 80057ae:	f7ff ff45 	bl	800563c <get_ldnumber>
 80057b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80057b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	da01      	bge.n	80057be <find_volume+0x26>
 80057ba:	230b      	movs	r3, #11
 80057bc:	e2aa      	b.n	8005d14 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80057be:	4a9e      	ldr	r2, [pc, #632]	; (8005a38 <find_volume+0x2a0>)
 80057c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <find_volume+0x3a>
 80057ce:	230c      	movs	r3, #12
 80057d0:	e2a0      	b.n	8005d14 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057d6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80057d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01b      	beq.n	800581a <find_volume+0x82>
		stat = disk_status(fs->drv);
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe fb73 	bl	8003ed4 <disk_status>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80057f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10c      	bne.n	800581a <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <find_volume+0x7e>
 8005806:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8005812:	230a      	movs	r3, #10
 8005814:	e27e      	b.n	8005d14 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 8005816:	2300      	movs	r3, #0
 8005818:	e27c      	b.n	8005d14 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005824:	b2da      	uxtb	r2, r3
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe fb68 	bl	8003f08 <disk_initialize>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800583e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800584a:	2303      	movs	r3, #3
 800584c:	e262      	b.n	8005d14 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <find_volume+0xcc>
 8005854:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8005860:	230a      	movs	r3, #10
 8005862:	e257      	b.n	8005d14 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005868:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800586a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800586c:	f7ff ff2a 	bl	80056c4 <check_fs>
 8005870:	4603      	mov	r3, r0
 8005872:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800587a:	2b01      	cmp	r3, #1
 800587c:	d155      	bne.n	800592a <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800587e:	2300      	movs	r3, #0
 8005880:	643b      	str	r3, [r7, #64]	; 0x40
 8005882:	e029      	b.n	80058d8 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800588e:	4413      	add	r3, r2
 8005890:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	3304      	adds	r3, #4
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d012      	beq.n	80058c2 <find_volume+0x12a>
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	330b      	adds	r3, #11
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	061a      	lsls	r2, r3, #24
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	330a      	adds	r3, #10
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	041b      	lsls	r3, r3, #16
 80058ac:	4313      	orrs	r3, r2
 80058ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b0:	3209      	adds	r2, #9
 80058b2:	7812      	ldrb	r2, [r2, #0]
 80058b4:	0212      	lsls	r2, r2, #8
 80058b6:	4313      	orrs	r3, r2
 80058b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ba:	3208      	adds	r2, #8
 80058bc:	7812      	ldrb	r2, [r2, #0]
 80058be:	431a      	orrs	r2, r3
 80058c0:	e000      	b.n	80058c4 <find_volume+0x12c>
 80058c2:	2200      	movs	r2, #0
 80058c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80058cc:	440b      	add	r3, r1
 80058ce:	f843 2c44 	str.w	r2, [r3, #-68]
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80058d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058d4:	3301      	adds	r3, #1
 80058d6:	643b      	str	r3, [r7, #64]	; 0x40
 80058d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d9d2      	bls.n	8005884 <find_volume+0xec>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80058de:	2300      	movs	r3, #0
 80058e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80058e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <find_volume+0x156>
 80058e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ea:	3b01      	subs	r3, #1
 80058ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80058ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80058f6:	4413      	add	r3, r2
 80058f8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80058fc:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80058fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <find_volume+0x178>
 8005904:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005906:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005908:	f7ff fedc 	bl	80056c4 <check_fs>
 800590c:	4603      	mov	r3, r0
 800590e:	e000      	b.n	8005912 <find_volume+0x17a>
 8005910:	2302      	movs	r3, #2
 8005912:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005916:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <find_volume+0x192>
 800591e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005920:	3301      	adds	r3, #1
 8005922:	643b      	str	r3, [r7, #64]	; 0x40
 8005924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005926:	2b03      	cmp	r3, #3
 8005928:	d9e1      	bls.n	80058ee <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800592a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800592e:	2b03      	cmp	r3, #3
 8005930:	d101      	bne.n	8005936 <find_volume+0x19e>
 8005932:	2301      	movs	r3, #1
 8005934:	e1ee      	b.n	8005d14 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005936:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <find_volume+0x1aa>
 800593e:	230d      	movs	r3, #13
 8005940:	e1e8      	b.n	8005d14 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	7b1b      	ldrb	r3, [r3, #12]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	b21a      	sxth	r2, r3
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	7adb      	ldrb	r3, [r3, #11]
 800594e:	b21b      	sxth	r3, r3
 8005950:	4313      	orrs	r3, r2
 8005952:	b21b      	sxth	r3, r3
 8005954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005958:	d001      	beq.n	800595e <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 800595a:	230d      	movs	r3, #13
 800595c:	e1da      	b.n	8005d14 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005960:	7ddb      	ldrb	r3, [r3, #23]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	b21a      	sxth	r2, r3
 8005966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005968:	7d9b      	ldrb	r3, [r3, #22]
 800596a:	b21b      	sxth	r3, r3
 800596c:	4313      	orrs	r3, r2
 800596e:	b21b      	sxth	r3, r3
 8005970:	b29b      	uxth	r3, r3
 8005972:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d112      	bne.n	80059a0 <find_volume+0x208>
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005980:	061a      	lsls	r2, r3, #24
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005988:	041b      	lsls	r3, r3, #16
 800598a:	4313      	orrs	r3, r2
 800598c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800598e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005992:	0212      	lsls	r2, r2, #8
 8005994:	4313      	orrs	r3, r2
 8005996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005998:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800599c:	4313      	orrs	r3, r2
 800599e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	7c1a      	ldrb	r2, [r3, #16]
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d006      	beq.n	80059ca <find_volume+0x232>
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d001      	beq.n	80059ca <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 80059c6:	230d      	movs	r3, #13
 80059c8:	e1a4      	b.n	8005d14 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80059d0:	461a      	mov	r2, r3
 80059d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d4:	fb02 f303 	mul.w	r3, r2, r3
 80059d8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	7b5a      	ldrb	r2, [r3, #13]
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <find_volume+0x26c>
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80059f4:	461a      	mov	r2, r3
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80059fc:	3b01      	subs	r3, #1
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8005a04:	230d      	movs	r3, #13
 8005a06:	e185      	b.n	8005d14 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	7c9b      	ldrb	r3, [r3, #18]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	b21a      	sxth	r2, r3
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	7c5b      	ldrb	r3, [r3, #17]
 8005a14:	b21b      	sxth	r3, r3
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b21b      	sxth	r3, r3
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8005a32:	230d      	movs	r3, #13
 8005a34:	e16e      	b.n	8005d14 <find_volume+0x57c>
 8005a36:	bf00      	nop
 8005a38:	20000024 	.word	0x20000024

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3e:	7d1b      	ldrb	r3, [r3, #20]
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	b21a      	sxth	r2, r3
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	7cdb      	ldrb	r3, [r3, #19]
 8005a48:	b21b      	sxth	r3, r3
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	b21b      	sxth	r3, r3
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d112      	bne.n	8005a7e <find_volume+0x2e6>
 8005a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005a5e:	061a      	lsls	r2, r3, #24
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a6c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005a70:	0212      	lsls	r2, r2, #8
 8005a72:	4313      	orrs	r3, r2
 8005a74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a76:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	7bdb      	ldrb	r3, [r3, #15]
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	b21a      	sxth	r2, r3
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	7b9b      	ldrb	r3, [r3, #14]
 8005a8a:	b21b      	sxth	r3, r3
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	b21b      	sxth	r3, r3
 8005a90:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005a92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <find_volume+0x304>
 8005a98:	230d      	movs	r3, #13
 8005a9a:	e13b      	b.n	8005d14 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005a9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa0:	4413      	add	r3, r2
 8005aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aa4:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8005aa8:	0912      	lsrs	r2, r2, #4
 8005aaa:	b292      	uxth	r2, r2
 8005aac:	4413      	add	r3, r2
 8005aae:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005ab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d201      	bcs.n	8005abc <find_volume+0x324>
 8005ab8:	230d      	movs	r3, #13
 8005aba:	e12b      	b.n	8005d14 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005abc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ac4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005ac8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <find_volume+0x340>
 8005ad4:	230d      	movs	r3, #13
 8005ad6:	e11d      	b.n	8005d14 <find_volume+0x57c>
	fmt = FS_FAT12;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d902      	bls.n	8005aee <find_volume+0x356>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d902      	bls.n	8005afe <find_volume+0x366>
 8005af8:	2303      	movs	r3, #3
 8005afa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	1c9a      	adds	r2, r3, #2
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8005b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005b10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b14:	441a      	add	r2, r3
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8005b1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	441a      	add	r2, r3
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8005b28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d121      	bne.n	8005b74 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <find_volume+0x3a6>
 8005b3a:	230d      	movs	r3, #13
 8005b3c:	e0ea      	b.n	8005d14 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005b44:	061a      	lsls	r2, r3, #24
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005b4c:	041b      	lsls	r3, r3, #16
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b52:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005b56:	0212      	lsls	r2, r2, #8
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b5c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005b60:	431a      	orrs	r2, r3
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	647b      	str	r3, [r7, #68]	; 0x44
 8005b72:	e025      	b.n	8005bc0 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b76:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <find_volume+0x3ea>
 8005b7e:	230d      	movs	r3, #13
 8005b80:	e0c8      	b.n	8005d14 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b84:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b8a:	441a      	add	r2, r3
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005b92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d104      	bne.n	8005ba4 <find_volume+0x40c>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	e00c      	b.n	8005bbe <find_volume+0x426>
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005baa:	4613      	mov	r3, r2
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	4413      	add	r3, r2
 8005bb0:	085a      	lsrs	r2, r3, #1
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	4413      	add	r3, r2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005bbe:	647b      	str	r3, [r7, #68]	; 0x44
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005bcc:	0a5b      	lsrs	r3, r3, #9
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d201      	bcs.n	8005bd6 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 8005bd2:	230d      	movs	r3, #13
 8005bd4:	e09e      	b.n	8005d14 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bdc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8005be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	2280      	movs	r2, #128	; 0x80
 8005bf0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d177      	bne.n	8005cec <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	b21a      	sxth	r2, r3
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c0c:	b21b      	sxth	r3, r3
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	b21b      	sxth	r3, r3
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d16a      	bne.n	8005cec <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c18:	3301      	adds	r3, #1
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c1e:	f7fe fd45 	bl	80046ac <move_window>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d161      	bne.n	8005cec <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	b21a      	sxth	r2, r3
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005c40:	b21b      	sxth	r3, r3
 8005c42:	4313      	orrs	r3, r2
 8005c44:	b21b      	sxth	r3, r3
 8005c46:	4a35      	ldr	r2, [pc, #212]	; (8005d1c <find_volume+0x584>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d14f      	bne.n	8005cec <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	78db      	ldrb	r3, [r3, #3]
 8005c50:	061a      	lsls	r2, r3, #24
 8005c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c54:	789b      	ldrb	r3, [r3, #2]
 8005c56:	041b      	lsls	r3, r3, #16
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c5c:	7852      	ldrb	r2, [r2, #1]
 8005c5e:	0212      	lsls	r2, r2, #8
 8005c60:	4313      	orrs	r3, r2
 8005c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c64:	7812      	ldrb	r2, [r2, #0]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	4a2d      	ldr	r2, [pc, #180]	; (8005d20 <find_volume+0x588>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d13e      	bne.n	8005cec <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c70:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005c74:	061a      	lsls	r2, r3, #24
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005c7c:	041b      	lsls	r3, r3, #16
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c82:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8005c86:	0212      	lsls	r2, r2, #8
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c8c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005c90:	4313      	orrs	r3, r2
 8005c92:	4a24      	ldr	r2, [pc, #144]	; (8005d24 <find_volume+0x58c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d129      	bne.n	8005cec <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005c9e:	061a      	lsls	r2, r3, #24
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8005ca6:	041b      	lsls	r3, r3, #16
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cac:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005cb0:	0212      	lsls	r2, r2, #8
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cb6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8005cc8:	061a      	lsls	r2, r3, #24
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005cd0:	041b      	lsls	r3, r3, #16
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cd6:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8005cda:	0212      	lsls	r2, r2, #8
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ce0:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005cf2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <find_volume+0x590>)
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	4b0a      	ldr	r3, [pc, #40]	; (8005d28 <find_volume+0x590>)
 8005d00:	801a      	strh	r2, [r3, #0]
 8005d02:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <find_volume+0x590>)
 8005d04:	881a      	ldrh	r2, [r3, #0]
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005d0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d0e:	f7fe fc59 	bl	80045c4 <clear_lock>
#endif

	return FR_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3758      	adds	r7, #88	; 0x58
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	ffffaa55 	.word	0xffffaa55
 8005d20:	41615252 	.word	0x41615252
 8005d24:	61417272 	.word	0x61417272
 8005d28:	20000028 	.word	0x20000028

08005d2c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d022      	beq.n	8005d84 <validate+0x58>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01d      	beq.n	8005d84 <validate+0x58>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d4e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d016      	beq.n	8005d84 <validate+0x58>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d5c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d10c      	bne.n	8005d84 <validate+0x58>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d70:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fe f8ad 	bl	8003ed4 <disk_status>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8005d84:	2309      	movs	r3, #9
 8005d86:	e000      	b.n	8005d8a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop

08005d94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005da6:	f107 0310 	add.w	r3, r7, #16
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff fc46 	bl	800563c <get_ldnumber>
 8005db0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	da01      	bge.n	8005dbc <f_mount+0x28>
 8005db8:	230b      	movs	r3, #11
 8005dba:	e02d      	b.n	8005e18 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005dbc:	4a18      	ldr	r2, [pc, #96]	; (8005e20 <f_mount+0x8c>)
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d006      	beq.n	8005dda <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8005dcc:	69b8      	ldr	r0, [r7, #24]
 8005dce:	f7fe fbf9 	bl	80045c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	490d      	ldr	r1, [pc, #52]	; (8005e20 <f_mount+0x8c>)
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <f_mount+0x6a>
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d001      	beq.n	8005e02 <f_mount+0x6e>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e00a      	b.n	8005e18 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005e02:	f107 0108 	add.w	r1, r7, #8
 8005e06:	f107 030c 	add.w	r3, r7, #12
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fcc3 	bl	8005798 <find_volume>
 8005e12:	4603      	mov	r3, r0
 8005e14:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3720      	adds	r7, #32
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20000024 	.word	0x20000024

08005e24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	f107 030c 	add.w	r3, r7, #12
 8005e30:	6018      	str	r0, [r3, #0]
 8005e32:	f107 0308 	add.w	r3, r7, #8
 8005e36:	6019      	str	r1, [r3, #0]
 8005e38:	1dfb      	adds	r3, r7, #7
 8005e3a:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005e3c:	f107 030c 	add.w	r3, r7, #12
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <f_open+0x26>
 8005e46:	2309      	movs	r3, #9
 8005e48:	e1f0      	b.n	800622c <f_open+0x408>
	fp->fs = 0;			/* Clear file object */
 8005e4a:	f107 030c 	add.w	r3, r7, #12
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005e56:	1dfb      	adds	r3, r7, #7
 8005e58:	1dfa      	adds	r2, r7, #7
 8005e5a:	7812      	ldrb	r2, [r2, #0]
 8005e5c:	f002 021f 	and.w	r2, r2, #31
 8005e60:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005e62:	1dfb      	adds	r3, r7, #7
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	f023 0301 	bic.w	r3, r3, #1
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	f107 0108 	add.w	r1, r7, #8
 8005e70:	f107 0320 	add.w	r3, r7, #32
 8005e74:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7ff fc8d 	bl	8005798 <find_volume>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005e84:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f040 81cd 	bne.w	8006228 <f_open+0x404>
		INIT_BUF(dj);
 8005e8e:	f107 0320 	add.w	r3, r7, #32
 8005e92:	f107 0214 	add.w	r2, r7, #20
 8005e96:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8005e9a:	f107 0308 	add.w	r3, r7, #8
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	f107 0320 	add.w	r3, r7, #32
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fb5a 	bl	8005560 <follow_path>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8005eb2:	f107 0320 	add.w	r3, r7, #32
 8005eb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005eba:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005ebe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d11a      	bne.n	8005efc <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8005ec6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d103      	bne.n	8005ed6 <f_open+0xb2>
				res = FR_INVALID_NAME;
 8005ece:	2306      	movs	r3, #6
 8005ed0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005ed4:	e012      	b.n	8005efc <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ed6:	1dfb      	adds	r3, r7, #7
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bf14      	ite	ne
 8005ee2:	2301      	movne	r3, #1
 8005ee4:	2300      	moveq	r3, #0
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f107 0320 	add.w	r3, r7, #32
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fe f9d9 	bl	80042a8 <chk_lock>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005efc:	1dfb      	adds	r3, r7, #7
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f003 031c 	and.w	r3, r3, #28
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 80ca 	beq.w	800609e <f_open+0x27a>
			if (res != FR_OK) {					/* No file, create new */
 8005f0a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01f      	beq.n	8005f52 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005f12:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d10e      	bne.n	8005f38 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005f1a:	f7fe fa33 	bl	8004384 <enq_lock>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d006      	beq.n	8005f32 <f_open+0x10e>
 8005f24:	f107 0320 	add.w	r3, r7, #32
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff fa1f 	bl	800536c <dir_register>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	e000      	b.n	8005f34 <f_open+0x110>
 8005f32:	2312      	movs	r3, #18
 8005f34:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005f38:	1dfb      	adds	r3, r7, #7
 8005f3a:	1dfa      	adds	r2, r7, #7
 8005f3c:	7812      	ldrb	r2, [r2, #0]
 8005f3e:	f042 0208 	orr.w	r2, r2, #8
 8005f42:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8005f44:	f107 0320 	add.w	r3, r7, #32
 8005f48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f4c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8005f50:	e014      	b.n	8005f7c <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005f52:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005f56:	330b      	adds	r3, #11
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	f003 0311 	and.w	r3, r3, #17
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <f_open+0x146>
					res = FR_DENIED;
 8005f62:	2307      	movs	r3, #7
 8005f64:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005f68:	e008      	b.n	8005f7c <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005f6a:	1dfb      	adds	r3, r7, #7
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <f_open+0x158>
						res = FR_EXIST;
 8005f76:	2308      	movs	r3, #8
 8005f78:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005f7c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f040 80ad 	bne.w	80060e0 <f_open+0x2bc>
 8005f86:	1dfb      	adds	r3, r7, #7
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 80a6 	beq.w	80060e0 <f_open+0x2bc>
				dw = GET_FATTIME();				/* Created time */
 8005f94:	f000 fe7c 	bl	8006c90 <get_fattime>
 8005f98:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005f9c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005fa0:	330e      	adds	r3, #14
 8005fa2:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005fae:	330f      	adds	r3, #15
 8005fb0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8005fb4:	1212      	asrs	r2, r2, #8
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005fbe:	3310      	adds	r3, #16
 8005fc0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8005fc4:	0c12      	lsrs	r2, r2, #16
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005fce:	3311      	adds	r3, #17
 8005fd0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8005fd4:	0e12      	lsrs	r2, r2, #24
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005fda:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005fde:	330b      	adds	r3, #11
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005fe4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005fe8:	331c      	adds	r3, #28
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ff2:	331d      	adds	r3, #29
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ffc:	331e      	adds	r3, #30
 8005ffe:	2200      	movs	r2, #0
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006006:	331f      	adds	r3, #31
 8006008:	2200      	movs	r2, #0
 800600a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800600c:	f107 0320 	add.w	r3, r7, #32
 8006010:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006014:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff f905 	bl	8005228 <ld_clust>
 800601e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8006022:	2100      	movs	r1, #0
 8006024:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8006028:	f7ff f92c 	bl	8005284 <st_clust>
				dj.fs->wflag = 1;
 800602c:	f107 0320 	add.w	r3, r7, #32
 8006030:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800603a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800603e:	2b00      	cmp	r3, #0
 8006040:	d04e      	beq.n	80060e0 <f_open+0x2bc>
					dw = dj.fs->winsect;
 8006042:	f107 0320 	add.w	r3, r7, #32
 8006046:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800604a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800604e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8006052:	f107 0320 	add.w	r3, r7, #32
 8006056:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800605a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe fdde 	bl	8004c20 <remove_chain>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800606a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800606e:	2b00      	cmp	r3, #0
 8006070:	d136      	bne.n	80060e0 <f_open+0x2bc>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006072:	f107 0320 	add.w	r3, r7, #32
 8006076:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800607a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800607e:	3a01      	subs	r2, #1
 8006080:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8006084:	f107 0320 	add.w	r3, r7, #32
 8006088:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800608c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe fb0b 	bl	80046ac <move_window>
 8006096:	4603      	mov	r3, r0
 8006098:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800609c:	e020      	b.n	80060e0 <f_open+0x2bc>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800609e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d11c      	bne.n	80060e0 <f_open+0x2bc>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80060a6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80060aa:	330b      	adds	r3, #11
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <f_open+0x29a>
					res = FR_NO_FILE;
 80060b6:	2304      	movs	r3, #4
 80060b8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80060bc:	e010      	b.n	80060e0 <f_open+0x2bc>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80060be:	1dfb      	adds	r3, r7, #7
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <f_open+0x2bc>
 80060ca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80060ce:	330b      	adds	r3, #11
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <f_open+0x2bc>
						res = FR_DENIED;
 80060da:	2307      	movs	r3, #7
 80060dc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80060e0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d13d      	bne.n	8006164 <f_open+0x340>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80060e8:	1dfb      	adds	r3, r7, #7
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <f_open+0x2dc>
				mode |= FA__WRITTEN;
 80060f4:	1dfb      	adds	r3, r7, #7
 80060f6:	1dfa      	adds	r2, r7, #7
 80060f8:	7812      	ldrb	r2, [r2, #0]
 80060fa:	f042 0220 	orr.w	r2, r2, #32
 80060fe:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006100:	f107 0320 	add.w	r3, r7, #32
 8006104:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006108:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800610c:	f107 030c 	add.w	r3, r7, #12
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8006116:	f107 030c 	add.w	r3, r7, #12
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006120:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006124:	1dfb      	adds	r3, r7, #7
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f023 0301 	bic.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	bf14      	ite	ne
 8006130:	2301      	movne	r3, #1
 8006132:	2300      	moveq	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	461a      	mov	r2, r3
 8006138:	f107 0320 	add.w	r3, r7, #32
 800613c:	4611      	mov	r1, r2
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe f944 	bl	80043cc <inc_lock>
 8006144:	4602      	mov	r2, r0
 8006146:	f107 030c 	add.w	r3, r7, #12
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8006150:	f107 030c 	add.w	r3, r7, #12
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800615a:	2b00      	cmp	r3, #0
 800615c:	d102      	bne.n	8006164 <f_open+0x340>
 800615e:	2302      	movs	r3, #2
 8006160:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006164:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006168:	2b00      	cmp	r3, #0
 800616a:	d15d      	bne.n	8006228 <f_open+0x404>
			fp->flag = mode;					/* File access mode */
 800616c:	f107 030c 	add.w	r3, r7, #12
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	1dfa      	adds	r2, r7, #7
 8006174:	7812      	ldrb	r2, [r2, #0]
 8006176:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800617a:	f107 030c 	add.w	r3, r7, #12
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006186:	f107 0320 	add.w	r3, r7, #32
 800618a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800618e:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff f848 	bl	8005228 <ld_clust>
 8006198:	4602      	mov	r2, r0
 800619a:	f107 030c 	add.w	r3, r7, #12
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80061a4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061a8:	331f      	adds	r3, #31
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	061a      	lsls	r2, r3, #24
 80061ae:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061b2:	331e      	adds	r3, #30
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	041b      	lsls	r3, r3, #16
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80061be:	321d      	adds	r2, #29
 80061c0:	7812      	ldrb	r2, [r2, #0]
 80061c2:	0212      	lsls	r2, r2, #8
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80061ca:	321c      	adds	r2, #28
 80061cc:	7812      	ldrb	r2, [r2, #0]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	f107 030c 	add.w	r3, r7, #12
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80061da:	f107 030c 	add.w	r3, r7, #12
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80061e6:	f107 030c 	add.w	r3, r7, #12
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80061f2:	f107 030c 	add.w	r3, r7, #12
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80061fe:	f107 0320 	add.w	r3, r7, #32
 8006202:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006206:	f107 030c 	add.w	r3, r7, #12
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8006210:	f107 030c 	add.w	r3, r7, #12
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800621a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800621e:	f107 030c 	add.w	r3, r7, #12
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8006228:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800622c:	4618      	mov	r0, r3
 800622e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop

08006238 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08c      	sub	sp, #48	; 0x30
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff fd6b 	bl	8005d2c <validate>
 8006256:	4603      	mov	r3, r0
 8006258:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800625a:	7ffb      	ldrb	r3, [r7, #31]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <f_read+0x2c>
 8006260:	7ffb      	ldrb	r3, [r7, #31]
 8006262:	e150      	b.n	8006506 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006274:	e147      	b.n	8006506 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006284:	2307      	movs	r3, #7
 8006286:	e13e      	b.n	8006506 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	429a      	cmp	r2, r3
 800629e:	f240 812d 	bls.w	80064fc <f_read+0x2c4>
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80062a6:	e129      	b.n	80064fc <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80062ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f040 80f2 	bne.w	800649c <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80062be:	0a5b      	lsrs	r3, r3, #9
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062c8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	4013      	ands	r3, r2
 80062d2:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80062d4:	7dfb      	ldrb	r3, [r7, #23]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d139      	bne.n	800634e <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ec:	e018      	b.n	8006320 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d008      	beq.n	800630a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80062fe:	4619      	mov	r1, r3
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7fe fd85 	bl	8004e10 <clmt_clust>
 8006306:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006308:	e00a      	b.n	8006320 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f7fe fabf 	bl	800489c <get_fat>
 800631e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	2b01      	cmp	r3, #1
 8006324:	d805      	bhi.n	8006332 <f_read+0xfa>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2202      	movs	r2, #2
 800632a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800632e:	2302      	movs	r3, #2
 8006330:	e0e9      	b.n	8006506 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d105      	bne.n	8006346 <f_read+0x10e>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006342:	2301      	movs	r3, #1
 8006344:	e0df      	b.n	8006506 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800634a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800635a:	4619      	mov	r1, r3
 800635c:	4610      	mov	r0, r2
 800635e:	f7fe fa7b 	bl	8004858 <clust2sect>
 8006362:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d105      	bne.n	8006376 <f_read+0x13e>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2202      	movs	r2, #2
 800636e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006372:	2302      	movs	r3, #2
 8006374:	e0c7      	b.n	8006506 <f_read+0x2ce>
			sect += csect;
 8006376:	7dfb      	ldrb	r3, [r7, #23]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4413      	add	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	0a5b      	lsrs	r3, r3, #9
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	2b00      	cmp	r3, #0
 8006388:	d046      	beq.n	8006418 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800638a:	7dfa      	ldrb	r2, [r7, #23]
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	4413      	add	r3, r2
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006396:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800639a:	4293      	cmp	r3, r2
 800639c:	d908      	bls.n	80063b0 <f_read+0x178>
					cc = fp->fs->csize - csect;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063a4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80063a8:	461a      	mov	r2, r3
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063b6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	6a39      	ldr	r1, [r7, #32]
 80063c0:	f7fd fdc8 	bl	8003f54 <disk_read>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d005      	beq.n	80063d6 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80063d2:	2301      	movs	r3, #1
 80063d4:	e097      	b.n	8006506 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80063dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d015      	beq.n	8006410 <f_read+0x1d8>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad2      	subs	r2, r2, r3
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d20d      	bcs.n	8006410 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	025b      	lsls	r3, r3, #9
 8006400:	6a3a      	ldr	r2, [r7, #32]
 8006402:	4413      	add	r3, r2
 8006404:	68f9      	ldr	r1, [r7, #12]
 8006406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800640a:	4618      	mov	r0, r3
 800640c:	f7fd fed0 	bl	80041b0 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	025b      	lsls	r3, r3, #9
 8006414:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006416:	e05b      	b.n	80064d0 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	429a      	cmp	r2, r3
 8006422:	d037      	beq.n	8006494 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800642a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d01d      	beq.n	800646e <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006438:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800643c:	68f9      	ldr	r1, [r7, #12]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006444:	2301      	movs	r3, #1
 8006446:	f7fd fda5 	bl	8003f94 <disk_write>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006458:	2301      	movs	r3, #1
 800645a:	e054      	b.n	8006506 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006466:	b2da      	uxtb	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006474:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006478:	68f9      	ldr	r1, [r7, #12]
 800647a:	2301      	movs	r3, #1
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	f7fd fd69 	bl	8003f54 <disk_read>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006490:	2301      	movs	r3, #1
 8006492:	e038      	b.n	8006506 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80064a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80064aa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80064ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d901      	bls.n	80064b8 <f_read+0x280>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80064be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064c8:	4619      	mov	r1, r3
 80064ca:	6a38      	ldr	r0, [r7, #32]
 80064cc:	f7fd fe70 	bl	80041b0 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80064d0:	6a3a      	ldr	r2, [r7, #32]
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	4413      	add	r3, r2
 80064d6:	623b      	str	r3, [r7, #32]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	441a      	add	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	441a      	add	r2, r3
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	607b      	str	r3, [r7, #4]
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f47f aed2 	bne.w	80062a8 <f_read+0x70>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3730      	adds	r7, #48	; 0x30
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop

08006510 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08a      	sub	sp, #40	; 0x28
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f7ff fbff 	bl	8005d2c <validate>
 800652e:	4603      	mov	r3, r0
 8006530:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006532:	7dfb      	ldrb	r3, [r7, #23]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <f_write+0x2c>
 8006538:	7dfb      	ldrb	r3, [r7, #23]
 800653a:	e192      	b.n	8006862 <f_write+0x352>
	if (fp->err)							/* Check error */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800654c:	e189      	b.n	8006862 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800655c:	2307      	movs	r3, #7
 800655e:	e180      	b.n	8006862 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	441a      	add	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006570:	429a      	cmp	r2, r3
 8006572:	f080 8158 	bcs.w	8006826 <f_write+0x316>
 8006576:	2300      	movs	r3, #0
 8006578:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800657a:	e154      	b.n	8006826 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006586:	2b00      	cmp	r3, #0
 8006588:	f040 8114 	bne.w	80067b4 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006592:	0a5b      	lsrs	r3, r3, #9
 8006594:	b2da      	uxtb	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800659c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	4013      	ands	r3, r2
 80065a6:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80065a8:	7dbb      	ldrb	r3, [r7, #22]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d151      	bne.n	8006652 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10f      	bne.n	80065d8 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d121      	bne.n	800660a <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065cc:	2100      	movs	r1, #0
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fb80 	bl	8004cd4 <create_chain>
 80065d4:	6278      	str	r0, [r7, #36]	; 0x24
 80065d6:	e018      	b.n	800660a <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80065e8:	4619      	mov	r1, r3
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f7fe fc10 	bl	8004e10 <clmt_clust>
 80065f0:	6278      	str	r0, [r7, #36]	; 0x24
 80065f2:	e00a      	b.n	800660a <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006600:	4619      	mov	r1, r3
 8006602:	4610      	mov	r0, r2
 8006604:	f7fe fb66 	bl	8004cd4 <create_chain>
 8006608:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 810f 	beq.w	8006830 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	2b01      	cmp	r3, #1
 8006616:	d105      	bne.n	8006624 <f_write+0x114>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006620:	2302      	movs	r3, #2
 8006622:	e11e      	b.n	8006862 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662a:	d105      	bne.n	8006638 <f_write+0x128>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006634:	2301      	movs	r3, #1
 8006636:	e114      	b.n	8006862 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006646:	2b00      	cmp	r3, #0
 8006648:	d103      	bne.n	8006652 <f_write+0x142>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01d      	beq.n	800669c <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006666:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800666a:	68f9      	ldr	r1, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006672:	2301      	movs	r3, #1
 8006674:	f7fd fc8e 	bl	8003f94 <disk_write>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006686:	2301      	movs	r3, #1
 8006688:	e0eb      	b.n	8006862 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006694:	b2da      	uxtb	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066a8:	4619      	mov	r1, r3
 80066aa:	4610      	mov	r0, r2
 80066ac:	f7fe f8d4 	bl	8004858 <clust2sect>
 80066b0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d105      	bne.n	80066c4 <f_write+0x1b4>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80066c0:	2302      	movs	r3, #2
 80066c2:	e0ce      	b.n	8006862 <f_write+0x352>
			sect += csect;
 80066c4:	7dbb      	ldrb	r3, [r7, #22]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4413      	add	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	0a5b      	lsrs	r3, r3, #9
 80066d0:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d048      	beq.n	800676a <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80066d8:	7dba      	ldrb	r2, [r7, #22]
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4413      	add	r3, r2
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80066e4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d908      	bls.n	80066fe <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066f2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80066f6:	461a      	mov	r2, r3
 80066f8:	7dbb      	ldrb	r3, [r7, #22]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006704:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	69b9      	ldr	r1, [r7, #24]
 800670e:	f7fd fc41 	bl	8003f94 <disk_write>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006720:	2301      	movs	r3, #1
 8006722:	e09e      	b.n	8006862 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad2      	subs	r2, r2, r3
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	429a      	cmp	r2, r3
 8006732:	d216      	bcs.n	8006762 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	025b      	lsls	r3, r3, #9
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	4413      	add	r3, r2
 8006746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800674a:	4619      	mov	r1, r3
 800674c:	f7fd fd30 	bl	80041b0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800675a:	b2da      	uxtb	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	025b      	lsls	r3, r3, #9
 8006766:	623b      	str	r3, [r7, #32]
				continue;
 8006768:	e047      	b.n	80067fa <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	429a      	cmp	r2, r3
 8006774:	d01a      	beq.n	80067ac <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006782:	429a      	cmp	r2, r3
 8006784:	d212      	bcs.n	80067ac <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800678c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006790:	68f9      	ldr	r1, [r7, #12]
 8006792:	2301      	movs	r3, #1
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	f7fd fbdd 	bl	8003f54 <disk_read>
 800679a:	4603      	mov	r3, r0
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80067a8:	2301      	movs	r3, #1
 80067aa:	e05a      	b.n	8006862 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80067ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067be:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80067c2:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80067c4:	6a3a      	ldr	r2, [r7, #32]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d901      	bls.n	80067d0 <f_write+0x2c0>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80067d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	6a3a      	ldr	r2, [r7, #32]
 80067e0:	69b9      	ldr	r1, [r7, #24]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fd fce4 	bl	80041b0 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80067ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	4413      	add	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	441a      	add	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	441a      	add	r2, r3
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	607b      	str	r3, [r7, #4]
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	f47f aea7 	bne.w	800657c <f_write+0x6c>
 800682e:	e000      	b.n	8006832 <f_write+0x322>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006830:	bf00      	nop
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800683e:	429a      	cmp	r2, r3
 8006840:	d905      	bls.n	800684e <f_write+0x33e>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006854:	f043 0320 	orr.w	r3, r3, #32
 8006858:	b2da      	uxtb	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3728      	adds	r7, #40	; 0x28
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop

0800686c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff fa59 	bl	8005d2c <validate>
 800687a:	4603      	mov	r3, r0
 800687c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	2b00      	cmp	r3, #0
 8006882:	f040 80a4 	bne.w	80069ce <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 809c 	beq.w	80069ce <f_sync+0x162>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800689c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d019      	beq.n	80068d8 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068aa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80068b6:	2301      	movs	r3, #1
 80068b8:	f7fd fb6c 	bl	8003f94 <disk_write>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80068c2:	2301      	movs	r3, #1
 80068c4:	e084      	b.n	80069d0 <f_sync+0x164>
				fp->flag &= ~FA__DIRTY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80068cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80068e4:	4619      	mov	r1, r3
 80068e6:	4610      	mov	r0, r2
 80068e8:	f7fd fee0 	bl	80046ac <move_window>
 80068ec:	4603      	mov	r3, r0
 80068ee:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d16b      	bne.n	80069ce <f_sync+0x162>
				dir = fp->dir_ptr;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80068fc:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	330b      	adds	r3, #11
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	320b      	adds	r2, #11
 8006906:	7812      	ldrb	r2, [r2, #0]
 8006908:	f042 0220 	orr.w	r2, r2, #32
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	331c      	adds	r3, #28
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	331d      	adds	r3, #29
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 8006928:	1212      	asrs	r2, r2, #8
 800692a:	b2d2      	uxtb	r2, r2
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	331e      	adds	r3, #30
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 8006938:	0c12      	lsrs	r2, r2, #16
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	331f      	adds	r3, #31
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 8006948:	0e12      	lsrs	r2, r2, #24
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006954:	4619      	mov	r1, r3
 8006956:	6938      	ldr	r0, [r7, #16]
 8006958:	f7fe fc94 	bl	8005284 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800695c:	f000 f998 	bl	8006c90 <get_fattime>
 8006960:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	3316      	adds	r3, #22
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	3317      	adds	r3, #23
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	1212      	asrs	r2, r2, #8
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	3318      	adds	r3, #24
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	0c12      	lsrs	r2, r2, #16
 8006980:	b2d2      	uxtb	r2, r2
 8006982:	701a      	strb	r2, [r3, #0]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	3319      	adds	r3, #25
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	0e12      	lsrs	r2, r2, #24
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	3312      	adds	r3, #18
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	3313      	adds	r3, #19
 800699c:	2200      	movs	r2, #0
 800699e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80069a6:	f023 0320 	bic.w	r3, r3, #32
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fd fe9f 	bl	8004708 <sync_fs>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff ff43 	bl	800686c <f_sync>
 80069e6:	4603      	mov	r3, r0
 80069e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d116      	bne.n	8006a1e <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff f99b 	bl	8005d2c <validate>
 80069f6:	4603      	mov	r3, r0
 80069f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10e      	bne.n	8006a1e <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fd fd98 	bl	800453c <dec_lock>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	4613      	mov	r3, r2
 8006a34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006a36:	2301      	movs	r3, #1
 8006a38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006a3e:	4b1f      	ldr	r3, [pc, #124]	; (8006abc <FATFS_LinkDriverEx+0x94>)
 8006a40:	7a5b      	ldrb	r3, [r3, #9]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d831      	bhi.n	8006aac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006a48:	4b1c      	ldr	r3, [pc, #112]	; (8006abc <FATFS_LinkDriverEx+0x94>)
 8006a4a:	7a5b      	ldrb	r3, [r3, #9]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	461a      	mov	r2, r3
 8006a50:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <FATFS_LinkDriverEx+0x94>)
 8006a52:	2100      	movs	r1, #0
 8006a54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006a56:	4b19      	ldr	r3, [pc, #100]	; (8006abc <FATFS_LinkDriverEx+0x94>)
 8006a58:	7a5b      	ldrb	r3, [r3, #9]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	4a17      	ldr	r2, [pc, #92]	; (8006abc <FATFS_LinkDriverEx+0x94>)
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006a66:	4b15      	ldr	r3, [pc, #84]	; (8006abc <FATFS_LinkDriverEx+0x94>)
 8006a68:	7a5b      	ldrb	r3, [r3, #9]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4b13      	ldr	r3, [pc, #76]	; (8006abc <FATFS_LinkDriverEx+0x94>)
 8006a70:	4413      	add	r3, r2
 8006a72:	79fa      	ldrb	r2, [r7, #7]
 8006a74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006a76:	4b11      	ldr	r3, [pc, #68]	; (8006abc <FATFS_LinkDriverEx+0x94>)
 8006a78:	7a5b      	ldrb	r3, [r3, #9]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	b2d1      	uxtb	r1, r2
 8006a80:	4a0e      	ldr	r2, [pc, #56]	; (8006abc <FATFS_LinkDriverEx+0x94>)
 8006a82:	7251      	strb	r1, [r2, #9]
 8006a84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006a86:	7dbb      	ldrb	r3, [r7, #22]
 8006a88:	3330      	adds	r3, #48	; 0x30
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	3301      	adds	r3, #1
 8006a94:	223a      	movs	r2, #58	; 0x3a
 8006a96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	3302      	adds	r3, #2
 8006a9c:	222f      	movs	r2, #47	; 0x2f
 8006a9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	3303      	adds	r3, #3
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000044 	.word	0x20000044

08006ac0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006aca:	2200      	movs	r2, #0
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff ffaa 	bl	8006a28 <FATFS_LinkDriverEx>
 8006ad4:	4603      	mov	r3, r0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop

08006ae0 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path  
  * @param  lun : not used   
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8006af0:	2301      	movs	r3, #1
 8006af2:	73fb      	strb	r3, [r7, #15]
  
  if(disk.nbr >= 1)
 8006af4:	4b15      	ldr	r3, [pc, #84]	; (8006b4c <FATFS_UnLinkDriverEx+0x6c>)
 8006af6:	7a5b      	ldrb	r3, [r3, #9]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01e      	beq.n	8006b3c <FATFS_UnLinkDriverEx+0x5c>
  {    
    DiskNum = path[0] - '0';
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	3b30      	subs	r3, #48	; 0x30
 8006b04:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8006b06:	7bbb      	ldrb	r3, [r7, #14]
 8006b08:	4a10      	ldr	r2, [pc, #64]	; (8006b4c <FATFS_UnLinkDriverEx+0x6c>)
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d013      	beq.n	8006b3c <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8006b14:	7bbb      	ldrb	r3, [r7, #14]
 8006b16:	4a0d      	ldr	r2, [pc, #52]	; (8006b4c <FATFS_UnLinkDriverEx+0x6c>)
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <FATFS_UnLinkDriverEx+0x6c>)
 8006b24:	4413      	add	r3, r2
 8006b26:	2200      	movs	r2, #0
 8006b28:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8006b2a:	4b08      	ldr	r3, [pc, #32]	; (8006b4c <FATFS_UnLinkDriverEx+0x6c>)
 8006b2c:	7a5b      	ldrb	r3, [r3, #9]
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <FATFS_UnLinkDriverEx+0x6c>)
 8006b36:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  return ret;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	20000044 	.word	0x20000044

08006b50 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8006b58:	2100      	movs	r1, #0
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff ffc0 	bl	8006ae0 <FATFS_UnLinkDriverEx>
 8006b60:	4603      	mov	r3, r0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop

08006b6c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006b76:	f000 f87d 	bl	8006c74 <BSP_SD_IsDetected>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d001      	beq.n	8006b84 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e016      	b.n	8006bb2 <BSP_SD_Init+0x46>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd, &SDCardInfo);
 8006b84:	490d      	ldr	r1, [pc, #52]	; (8006bbc <BSP_SD_Init+0x50>)
 8006b86:	480e      	ldr	r0, [pc, #56]	; (8006bc0 <BSP_SD_Init+0x54>)
 8006b88:	f7fa fdd4 	bl	8001734 <HAL_SD_Init>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	71fb      	strb	r3, [r7, #7]
#ifdef BUS_4BITS
  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10c      	bne.n	8006bb0 <BSP_SD_Init+0x44>
  {
    /* Enable wide operation */
    if (HAL_SD_WideBusOperation_Config(&hsd, SDIO_BUS_WIDE_4B) != SD_OK)
 8006b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b9a:	4809      	ldr	r0, [pc, #36]	; (8006bc0 <BSP_SD_Init+0x54>)
 8006b9c:	f7fb fc70 	bl	8002480 <HAL_SD_WideBusOperation_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <BSP_SD_Init+0x40>
    {
      sd_state = MSD_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	71fb      	strb	r3, [r7, #7]
 8006baa:	e001      	b.n	8006bb0 <BSP_SD_Init+0x44>
    }
    else
    {
      sd_state = MSD_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif
  return sd_state;
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	200004b8 	.word	0x200004b8
 8006bc0:	20000510 	.word	0x20000510

08006bc4 <BSP_SD_ReadBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t sd_state;
  if(HAL_SD_ReadBlocks(&hsd, pData, ReadAddr, BlockSize, NumOfBlocks) != SD_OK)
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bdc:	68f9      	ldr	r1, [r7, #12]
 8006bde:	4808      	ldr	r0, [pc, #32]	; (8006c00 <BSP_SD_ReadBlocks+0x3c>)
 8006be0:	f7fa fe1e 	bl	8001820 <HAL_SD_ReadBlocks>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	75fb      	strb	r3, [r7, #23]
 8006bee:	e001      	b.n	8006bf4 <BSP_SD_ReadBlocks+0x30>
  }
  else
  {
    sd_state = MSD_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	75fb      	strb	r3, [r7, #23]
  }
  return sd_state;  
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20000510 	.word	0x20000510

08006c04 <BSP_SD_WriteBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t sd_state;
  if(HAL_SD_WriteBlocks(&hsd, pData, WriteAddr, BlockSize, NumOfBlocks) != SD_OK)  
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	9301      	str	r3, [sp, #4]
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c1c:	68f9      	ldr	r1, [r7, #12]
 8006c1e:	4808      	ldr	r0, [pc, #32]	; (8006c40 <BSP_SD_WriteBlocks+0x3c>)
 8006c20:	f7fa ff5e 	bl	8001ae0 <HAL_SD_WriteBlocks>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	75fb      	strb	r3, [r7, #23]
 8006c2e:	e001      	b.n	8006c34 <BSP_SD_WriteBlocks+0x30>
  }
  else
  {
    sd_state = MSD_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	75fb      	strb	r3, [r7, #23]
  }
  return sd_state;  
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000510 	.word	0x20000510

08006c44 <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
  return(HAL_SD_GetStatus(&hsd));
 8006c48:	4802      	ldr	r0, [pc, #8]	; (8006c54 <BSP_SD_GetStatus+0x10>)
 8006c4a:	f7fb fca5 	bl	8002598 <HAL_SD_GetStatus>
 8006c4e:	4603      	mov	r3, r0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	20000510 	.word	0x20000510

08006c58 <BSP_SD_GetCardInfo>:
/**
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef* CardInfo)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&hsd, CardInfo);
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4803      	ldr	r0, [pc, #12]	; (8006c70 <BSP_SD_GetCardInfo+0x18>)
 8006c64:	f7fb f908 	bl	8001e78 <HAL_SD_Get_CardInfo>
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	20000510 	.word	0x20000510

08006c74 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8006c7e:	79fb      	ldrb	r3, [r7, #7]
 8006c80:	b2db      	uxtb	r3, r3
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop

08006c90 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  return 0;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <MX_GPIO_Init>:
#include "gpio.h"

void MX_GPIO_Init(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	4a1e      	ldr	r2, [pc, #120]	; (8006d24 <MX_GPIO_Init+0x84>)
 8006cac:	4b1d      	ldr	r3, [pc, #116]	; (8006d24 <MX_GPIO_Init+0x84>)
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8006cb6:	4b1b      	ldr	r3, [pc, #108]	; (8006d24 <MX_GPIO_Init+0x84>)
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60bb      	str	r3, [r7, #8]
 8006cc6:	4a17      	ldr	r2, [pc, #92]	; (8006d24 <MX_GPIO_Init+0x84>)
 8006cc8:	4b16      	ldr	r3, [pc, #88]	; (8006d24 <MX_GPIO_Init+0x84>)
 8006cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ccc:	f043 0304 	orr.w	r3, r3, #4
 8006cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8006cd2:	4b14      	ldr	r3, [pc, #80]	; (8006d24 <MX_GPIO_Init+0x84>)
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	60bb      	str	r3, [r7, #8]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cde:	2300      	movs	r3, #0
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	4a10      	ldr	r2, [pc, #64]	; (8006d24 <MX_GPIO_Init+0x84>)
 8006ce4:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <MX_GPIO_Init+0x84>)
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce8:	f043 0301 	orr.w	r3, r3, #1
 8006cec:	6313      	str	r3, [r2, #48]	; 0x30
 8006cee:	4b0d      	ldr	r3, [pc, #52]	; (8006d24 <MX_GPIO_Init+0x84>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	607b      	str	r3, [r7, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <MX_GPIO_Init+0x84>)
 8006d00:	4b08      	ldr	r3, [pc, #32]	; (8006d24 <MX_GPIO_Init+0x84>)
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	f043 0308 	orr.w	r3, r3, #8
 8006d08:	6313      	str	r3, [r2, #48]	; 0x30
 8006d0a:	4b06      	ldr	r3, [pc, #24]	; (8006d24 <MX_GPIO_Init+0x84>)
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	683b      	ldr	r3, [r7, #0]

}
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	40023800 	.word	0x40023800

08006d28 <main>:

FATFS SDFatFs; /* File system object for SD card logical drive */
FIL MyFile; /* File object */
char SDPath[4]; /* SD card logical drive path */

int main(void) {
 8006d28:	b5b0      	push	{r4, r5, r7, lr}
 8006d2a:	b0a6      	sub	sp, #152	; 0x98
 8006d2c:	af00      	add	r7, sp, #0
	HAL_Init();
 8006d2e:	f7f9 fa87 	bl	8000240 <HAL_Init>
	SystemClock_Config();
 8006d32:	f000 f881 	bl	8006e38 <SystemClock_Config>
	MX_GPIO_Init();
 8006d36:	f7ff ffb3 	bl	8006ca0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8006d3a:	f000 fa01 	bl	8007140 <MX_USART1_UART_Init>
	MX_SDIO_SD_Init();
 8006d3e:	f000 f8fb 	bl	8006f38 <MX_SDIO_SD_Init>
//	MX_FATFS_Init();

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 8006d42:	4b37      	ldr	r3, [pc, #220]	; (8006e20 <main+0xf8>)
 8006d44:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8006d48:	461d      	mov	r5, r3
 8006d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d52:	682b      	ldr	r3, [r5, #0]
 8006d54:	7023      	strb	r3, [r4, #0]
	uint8_t rtext[100];

	/*##-1- Link the micro SD disk I/O driver ##################################*/
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0) {
 8006d56:	4933      	ldr	r1, [pc, #204]	; (8006e24 <main+0xfc>)
 8006d58:	4833      	ldr	r0, [pc, #204]	; (8006e28 <main+0x100>)
 8006d5a:	f7ff feb1 	bl	8006ac0 <FATFS_LinkDriver>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d159      	bne.n	8006e18 <main+0xf0>
		/*##-2- Register the file system object to the FatFs module ##############*/
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 0) != FR_OK) {
 8006d64:	2200      	movs	r2, #0
 8006d66:	492f      	ldr	r1, [pc, #188]	; (8006e24 <main+0xfc>)
 8006d68:	4830      	ldr	r0, [pc, #192]	; (8006e2c <main+0x104>)
 8006d6a:	f7ff f813 	bl	8005d94 <f_mount>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <main+0x52>
			/* FatFs Initialization Error */
			Error_Handler();
 8006d74:	f000 f8d0 	bl	8006f18 <Error_Handler>
 8006d78:	e04e      	b.n	8006e18 <main+0xf0>
			if (0) {
				/* FatFs Format Error */
				Error_Handler();
			} else {
				/*##-4- Create and Open a new text file object with write access #####*/
				if (f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE)
 8006d7a:	220a      	movs	r2, #10
 8006d7c:	492c      	ldr	r1, [pc, #176]	; (8006e30 <main+0x108>)
 8006d7e:	482d      	ldr	r0, [pc, #180]	; (8006e34 <main+0x10c>)
 8006d80:	f7ff f850 	bl	8005e24 <f_open>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <main+0x68>
						!= FR_OK) {
					/* 'STM32.TXT' file Open for write Error */
					Error_Handler();
 8006d8a:	f000 f8c5 	bl	8006f18 <Error_Handler>
 8006d8e:	e043      	b.n	8006e18 <main+0xf0>
				} else {
					/*##-5- Write data to the text file ################################*/
					res = f_write(&MyFile, wtext, sizeof(wtext),
 8006d90:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006d94:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8006d98:	2221      	movs	r2, #33	; 0x21
 8006d9a:	4826      	ldr	r0, [pc, #152]	; (8006e34 <main+0x10c>)
 8006d9c:	f7ff fbb8 	bl	8006510 <f_write>
 8006da0:	4603      	mov	r3, r0
 8006da2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							(void *) &byteswritten);

					if ((byteswritten == 0) || (res != FR_OK)) {
 8006da6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <main+0x8e>
 8006dae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <main+0x94>
						/* 'STM32.TXT' file Write or EOF Error */
						Error_Handler();
 8006db6:	f000 f8af 	bl	8006f18 <Error_Handler>
 8006dba:	e02d      	b.n	8006e18 <main+0xf0>
					} else {
						/*##-6- Close the open text file #################################*/
						f_close(&MyFile);
 8006dbc:	481d      	ldr	r0, [pc, #116]	; (8006e34 <main+0x10c>)
 8006dbe:	f7ff fe0b 	bl	80069d8 <f_close>

						/*##-7- Open the text file object with read access ###############*/
						if (f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK) {
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	491a      	ldr	r1, [pc, #104]	; (8006e30 <main+0x108>)
 8006dc6:	481b      	ldr	r0, [pc, #108]	; (8006e34 <main+0x10c>)
 8006dc8:	f7ff f82c 	bl	8005e24 <f_open>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <main+0xb0>
							/* 'STM32.TXT' file Open for read Error */
							Error_Handler();
 8006dd2:	f000 f8a1 	bl	8006f18 <Error_Handler>
 8006dd6:	e01f      	b.n	8006e18 <main+0xf0>
						} else {
							/*##-8- Read data from the text file ###########################*/
							res = f_read(&MyFile, rtext, sizeof(rtext),
 8006dd8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006ddc:	1d39      	adds	r1, r7, #4
 8006dde:	2264      	movs	r2, #100	; 0x64
 8006de0:	4814      	ldr	r0, [pc, #80]	; (8006e34 <main+0x10c>)
 8006de2:	f7ff fa29 	bl	8006238 <f_read>
 8006de6:	4603      	mov	r3, r0
 8006de8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
									(UINT*) &bytesread);

							if ((bytesread == 0) || (res != FR_OK)) {
 8006dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <main+0xd4>
 8006df4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <main+0xda>
								/* 'STM32.TXT' file Read or EOF Error */
								Error_Handler();
 8006dfc:	f000 f88c 	bl	8006f18 <Error_Handler>
 8006e00:	e00a      	b.n	8006e18 <main+0xf0>
							} else {
								/*##-9- Close the open text file #############################*/
								f_close(&MyFile);
 8006e02:	480c      	ldr	r0, [pc, #48]	; (8006e34 <main+0x10c>)
 8006e04:	f7ff fde8 	bl	80069d8 <f_close>

								/*##-10- Compare read data with the expected data ############*/
								if ((bytesread != byteswritten)) {
 8006e08:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d001      	beq.n	8006e18 <main+0xf0>
									/* Read data is different from the expected data */
									Error_Handler();
 8006e14:	f000 f880 	bl	8006f18 <Error_Handler>
			}
		}
	}

	/*##-11- Unlink the RAM disk I/O driver ####################################*/
	FATFS_UnLinkDriver(SDPath);
 8006e18:	4802      	ldr	r0, [pc, #8]	; (8006e24 <main+0xfc>)
 8006e1a:	f7ff fe99 	bl	8006b50 <FATFS_UnLinkDriver>

	while (1) {
	}
 8006e1e:	e7fe      	b.n	8006e1e <main+0xf6>
 8006e20:	080073d4 	.word	0x080073d4
 8006e24:	20000054 	.word	0x20000054
 8006e28:	08007408 	.word	0x08007408
 8006e2c:	20000058 	.word	0x20000058
 8006e30:	080073c8 	.word	0x080073c8
 8006e34:	20000288 	.word	0x20000288

08006e38 <SystemClock_Config>:
}

void SystemClock_Config(void) {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b094      	sub	sp, #80	; 0x50
 8006e3c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60bb      	str	r3, [r7, #8]
 8006e42:	4a32      	ldr	r2, [pc, #200]	; (8006f0c <SystemClock_Config+0xd4>)
 8006e44:	4b31      	ldr	r3, [pc, #196]	; (8006f0c <SystemClock_Config+0xd4>)
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e4e:	4b2f      	ldr	r3, [pc, #188]	; (8006f0c <SystemClock_Config+0xd4>)
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e56:	60bb      	str	r3, [r7, #8]
 8006e58:	68bb      	ldr	r3, [r7, #8]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	607b      	str	r3, [r7, #4]
 8006e5e:	4a2c      	ldr	r2, [pc, #176]	; (8006f10 <SystemClock_Config+0xd8>)
 8006e60:	4b2b      	ldr	r3, [pc, #172]	; (8006f10 <SystemClock_Config+0xd8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	4b29      	ldr	r3, [pc, #164]	; (8006f10 <SystemClock_Config+0xd8>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e72:	607b      	str	r3, [r7, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006e76:	2301      	movs	r3, #1
 8006e78:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e80:	2302      	movs	r3, #2
 8006e82:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 24;
 8006e8a:	2318      	movs	r3, #24
 8006e8c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8006e8e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006e92:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006e94:	2302      	movs	r3, #2
 8006e96:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8006e98:	2308      	movs	r3, #8
 8006e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006e9c:	f107 0320 	add.w	r3, r7, #32
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7f9 fe99 	bl	8000bd8 <HAL_RCC_OscConfig>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <SystemClock_Config+0x78>
		Error_Handler();
 8006eac:	f000 f834 	bl	8006f18 <Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006eb0:	230f      	movs	r3, #15
 8006eb2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006ebc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006ec0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ec6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8006ec8:	f107 030c 	add.w	r3, r7, #12
 8006ecc:	2105      	movs	r1, #5
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fa f98e 	bl	80011f0 <HAL_RCC_ClockConfig>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <SystemClock_Config+0xa6>
		Error_Handler();
 8006eda:	f000 f81d 	bl	8006f18 <Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8006ede:	f7fa fbd9 	bl	8001694 <HAL_RCC_GetHCLKFreq>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <SystemClock_Config+0xdc>)
 8006ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eea:	099b      	lsrs	r3, r3, #6
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7f9 fb11 	bl	8000514 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8006ef2:	2004      	movs	r0, #4
 8006ef4:	f7f9 fb1a 	bl	800052c <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2100      	movs	r1, #0
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295
 8006f00:	f7f9 fadc 	bl	80004bc <HAL_NVIC_SetPriority>
}
 8006f04:	bf00      	nop
 8006f06:	3750      	adds	r7, #80	; 0x50
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	40007000 	.word	0x40007000
 8006f14:	10624dd3 	.word	0x10624dd3

08006f18 <Error_Handler>:

void Error_Handler(void) {
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0
	while (1) {
	}
 8006f1c:	e7fe      	b.n	8006f1c <Error_Handler+0x4>
 8006f1e:	bf00      	nop

08006f20 <assert_failed>:
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t* file, uint32_t line) {
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop

08006f38 <MX_SDIO_SD_Init>:
HAL_SD_CardInfoTypedef SDCardInfo;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8006f3c:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <MX_SDIO_SD_Init+0x38>)
 8006f3e:	4a0d      	ldr	r2, [pc, #52]	; (8006f74 <MX_SDIO_SD_Init+0x3c>)
 8006f40:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006f42:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <MX_SDIO_SD_Init+0x38>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006f48:	4b09      	ldr	r3, [pc, #36]	; (8006f70 <MX_SDIO_SD_Init+0x38>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006f4e:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <MX_SDIO_SD_Init+0x38>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006f54:	4b06      	ldr	r3, [pc, #24]	; (8006f70 <MX_SDIO_SD_Init+0x38>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006f5a:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <MX_SDIO_SD_Init+0x38>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8006f60:	4b03      	ldr	r3, [pc, #12]	; (8006f70 <MX_SDIO_SD_Init+0x38>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	619a      	str	r2, [r3, #24]

}
 8006f66:	bf00      	nop
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	20000510 	.word	0x20000510
 8006f74:	40012c00 	.word	0x40012c00

08006f78 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(sdHandle->Instance==SDIO)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1a      	ldr	r2, [pc, #104]	; (8006ff0 <HAL_SD_MspInit+0x78>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d12e      	bne.n	8006fe8 <HAL_SD_MspInit+0x70>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60bb      	str	r3, [r7, #8]
 8006f8e:	4a19      	ldr	r2, [pc, #100]	; (8006ff4 <HAL_SD_MspInit+0x7c>)
 8006f90:	4b18      	ldr	r3, [pc, #96]	; (8006ff4 <HAL_SD_MspInit+0x7c>)
 8006f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f98:	6453      	str	r3, [r2, #68]	; 0x44
 8006f9a:	4b16      	ldr	r3, [pc, #88]	; (8006ff4 <HAL_SD_MspInit+0x7c>)
 8006f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa2:	60bb      	str	r3, [r7, #8]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8006fa6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006faa:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fac:	2302      	movs	r3, #2
 8006fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006fb8:	230c      	movs	r3, #12
 8006fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fbc:	f107 030c 	add.w	r3, r7, #12
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	480d      	ldr	r0, [pc, #52]	; (8006ff8 <HAL_SD_MspInit+0x80>)
 8006fc4:	f7f9 fae8 	bl	8000598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006fc8:	2304      	movs	r3, #4
 8006fca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006fd8:	230c      	movs	r3, #12
 8006fda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fdc:	f107 030c 	add.w	r3, r7, #12
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4806      	ldr	r0, [pc, #24]	; (8006ffc <HAL_SD_MspInit+0x84>)
 8006fe4:	f7f9 fad8 	bl	8000598 <HAL_GPIO_Init>
  }
}
 8006fe8:	bf00      	nop
 8006fea:	3720      	adds	r7, #32
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40012c00 	.word	0x40012c00
 8006ff4:	40023800 	.word	0x40023800
 8006ff8:	40020800 	.word	0x40020800
 8006ffc:	40020c00 	.word	0x40020c00

08007000 <HAL_MspInit>:
#include "stm32f4xx_hal.h"

extern void Error_Handler(void);
void HAL_MspInit(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007004:	2003      	movs	r0, #3
 8007006:	f7f9 fa39 	bl	800047c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800700a:	2200      	movs	r2, #0
 800700c:	2100      	movs	r1, #0
 800700e:	f06f 000b 	mvn.w	r0, #11
 8007012:	f7f9 fa53 	bl	80004bc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8007016:	2200      	movs	r2, #0
 8007018:	2100      	movs	r1, #0
 800701a:	f06f 000a 	mvn.w	r0, #10
 800701e:	f7f9 fa4d 	bl	80004bc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8007022:	2200      	movs	r2, #0
 8007024:	2100      	movs	r1, #0
 8007026:	f06f 0009 	mvn.w	r0, #9
 800702a:	f7f9 fa47 	bl	80004bc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800702e:	2200      	movs	r2, #0
 8007030:	2100      	movs	r1, #0
 8007032:	f06f 0004 	mvn.w	r0, #4
 8007036:	f7f9 fa41 	bl	80004bc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800703a:	2200      	movs	r2, #0
 800703c:	2100      	movs	r1, #0
 800703e:	f06f 0003 	mvn.w	r0, #3
 8007042:	f7f9 fa3b 	bl	80004bc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8007046:	2200      	movs	r2, #0
 8007048:	2100      	movs	r1, #0
 800704a:	f06f 0001 	mvn.w	r0, #1
 800704e:	f7f9 fa35 	bl	80004bc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007052:	2200      	movs	r2, #0
 8007054:	2100      	movs	r1, #0
 8007056:	f04f 30ff 	mov.w	r0, #4294967295
 800705a:	f7f9 fa2f 	bl	80004bc <HAL_NVIC_SetPriority>

}
 800705e:	bf00      	nop
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop

08007064 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8007064:	b480      	push	{r7}
 8007066:	af00      	add	r7, sp, #0
}
 8007068:	bf00      	nop
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop

08007074 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
  while (1)
  {
  }
 8007078:	e7fe      	b.n	8007078 <HardFault_Handler+0x4>
 800707a:	bf00      	nop

0800707c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  while (1)
  {
  }
 8007080:	e7fe      	b.n	8007080 <MemManage_Handler+0x4>
 8007082:	bf00      	nop

08007084 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  while (1)
  {
  }
 8007088:	e7fe      	b.n	8007088 <BusFault_Handler+0x4>
 800708a:	bf00      	nop

0800708c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  while (1)
  {
  }
 8007090:	e7fe      	b.n	8007090 <UsageFault_Handler+0x4>
 8007092:	bf00      	nop

08007094 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
}
 8007098:	bf00      	nop
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop

080070a4 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80070a4:	b480      	push	{r7}
 80070a6:	af00      	add	r7, sp, #0
}
 80070a8:	bf00      	nop
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop

080070b4 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
}
 80070b8:	bf00      	nop
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop

080070c4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80070c8:	f7f9 f8f8 	bl	80002bc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80070cc:	f7f9 fa56 	bl	800057c <HAL_SYSTICK_IRQHandler>
}
 80070d0:	bf00      	nop
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80070d8:	4a16      	ldr	r2, [pc, #88]	; (8007134 <SystemInit+0x60>)
 80070da:	4b16      	ldr	r3, [pc, #88]	; (8007134 <SystemInit+0x60>)
 80070dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80070e8:	4a13      	ldr	r2, [pc, #76]	; (8007138 <SystemInit+0x64>)
 80070ea:	4b13      	ldr	r3, [pc, #76]	; (8007138 <SystemInit+0x64>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f043 0301 	orr.w	r3, r3, #1
 80070f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80070f4:	4b10      	ldr	r3, [pc, #64]	; (8007138 <SystemInit+0x64>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80070fa:	4a0f      	ldr	r2, [pc, #60]	; (8007138 <SystemInit+0x64>)
 80070fc:	4b0e      	ldr	r3, [pc, #56]	; (8007138 <SystemInit+0x64>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007108:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800710a:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <SystemInit+0x64>)
 800710c:	4a0b      	ldr	r2, [pc, #44]	; (800713c <SystemInit+0x68>)
 800710e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007110:	4a09      	ldr	r2, [pc, #36]	; (8007138 <SystemInit+0x64>)
 8007112:	4b09      	ldr	r3, [pc, #36]	; (8007138 <SystemInit+0x64>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800711a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800711c:	4b06      	ldr	r3, [pc, #24]	; (8007138 <SystemInit+0x64>)
 800711e:	2200      	movs	r2, #0
 8007120:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007122:	4b04      	ldr	r3, [pc, #16]	; (8007134 <SystemInit+0x60>)
 8007124:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007128:	609a      	str	r2, [r3, #8]
#endif
}
 800712a:	bf00      	nop
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	e000ed00 	.word	0xe000ed00
 8007138:	40023800 	.word	0x40023800
 800713c:	24003010 	.word	0x24003010

08007140 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007144:	4b11      	ldr	r3, [pc, #68]	; (800718c <MX_USART1_UART_Init+0x4c>)
 8007146:	4a12      	ldr	r2, [pc, #72]	; (8007190 <MX_USART1_UART_Init+0x50>)
 8007148:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800714a:	4b10      	ldr	r3, [pc, #64]	; (800718c <MX_USART1_UART_Init+0x4c>)
 800714c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007150:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007152:	4b0e      	ldr	r3, [pc, #56]	; (800718c <MX_USART1_UART_Init+0x4c>)
 8007154:	2200      	movs	r2, #0
 8007156:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <MX_USART1_UART_Init+0x4c>)
 800715a:	2200      	movs	r2, #0
 800715c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800715e:	4b0b      	ldr	r3, [pc, #44]	; (800718c <MX_USART1_UART_Init+0x4c>)
 8007160:	2200      	movs	r2, #0
 8007162:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007164:	4b09      	ldr	r3, [pc, #36]	; (800718c <MX_USART1_UART_Init+0x4c>)
 8007166:	220c      	movs	r2, #12
 8007168:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800716a:	4b08      	ldr	r3, [pc, #32]	; (800718c <MX_USART1_UART_Init+0x4c>)
 800716c:	2200      	movs	r2, #0
 800716e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007170:	4b06      	ldr	r3, [pc, #24]	; (800718c <MX_USART1_UART_Init+0x4c>)
 8007172:	2200      	movs	r2, #0
 8007174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007176:	4805      	ldr	r0, [pc, #20]	; (800718c <MX_USART1_UART_Init+0x4c>)
 8007178:	f7fc f980 	bl	800347c <HAL_UART_Init>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007182:	f7ff fec9 	bl	8006f18 <Error_Handler>
  }

}
 8007186:	bf00      	nop
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000570 	.word	0x20000570
 8007190:	40011000 	.word	0x40011000

08007194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a12      	ldr	r2, [pc, #72]	; (80071ec <HAL_UART_MspInit+0x58>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d11e      	bne.n	80071e4 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80071a6:	2300      	movs	r3, #0
 80071a8:	60bb      	str	r3, [r7, #8]
 80071aa:	4a11      	ldr	r2, [pc, #68]	; (80071f0 <HAL_UART_MspInit+0x5c>)
 80071ac:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <HAL_UART_MspInit+0x5c>)
 80071ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b0:	f043 0310 	orr.w	r3, r3, #16
 80071b4:	6453      	str	r3, [r2, #68]	; 0x44
 80071b6:	4b0e      	ldr	r3, [pc, #56]	; (80071f0 <HAL_UART_MspInit+0x5c>)
 80071b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ba:	f003 0310 	and.w	r3, r3, #16
 80071be:	60bb      	str	r3, [r7, #8]
 80071c0:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80071c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80071c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071c8:	2302      	movs	r3, #2
 80071ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80071cc:	2301      	movs	r3, #1
 80071ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071d0:	2303      	movs	r3, #3
 80071d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80071d4:	2307      	movs	r3, #7
 80071d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071d8:	f107 030c 	add.w	r3, r7, #12
 80071dc:	4619      	mov	r1, r3
 80071de:	4805      	ldr	r0, [pc, #20]	; (80071f4 <HAL_UART_MspInit+0x60>)
 80071e0:	f7f9 f9da 	bl	8000598 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80071e4:	bf00      	nop
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	40011000 	.word	0x40011000
 80071f0:	40023800 	.word	0x40023800
 80071f4:	40020000 	.word	0x40020000

080071f8 <__libc_init_array>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	4b0e      	ldr	r3, [pc, #56]	; (8007234 <__libc_init_array+0x3c>)
 80071fc:	4c0e      	ldr	r4, [pc, #56]	; (8007238 <__libc_init_array+0x40>)
 80071fe:	1ae4      	subs	r4, r4, r3
 8007200:	10a4      	asrs	r4, r4, #2
 8007202:	2500      	movs	r5, #0
 8007204:	461e      	mov	r6, r3
 8007206:	42a5      	cmp	r5, r4
 8007208:	d004      	beq.n	8007214 <__libc_init_array+0x1c>
 800720a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800720e:	4798      	blx	r3
 8007210:	3501      	adds	r5, #1
 8007212:	e7f8      	b.n	8007206 <__libc_init_array+0xe>
 8007214:	f000 f816 	bl	8007244 <_init>
 8007218:	4c08      	ldr	r4, [pc, #32]	; (800723c <__libc_init_array+0x44>)
 800721a:	4b09      	ldr	r3, [pc, #36]	; (8007240 <__libc_init_array+0x48>)
 800721c:	1ae4      	subs	r4, r4, r3
 800721e:	10a4      	asrs	r4, r4, #2
 8007220:	2500      	movs	r5, #0
 8007222:	461e      	mov	r6, r3
 8007224:	42a5      	cmp	r5, r4
 8007226:	d004      	beq.n	8007232 <__libc_init_array+0x3a>
 8007228:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800722c:	4798      	blx	r3
 800722e:	3501      	adds	r5, #1
 8007230:	e7f8      	b.n	8007224 <__libc_init_array+0x2c>
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	0800749c 	.word	0x0800749c
 8007238:	0800749c 	.word	0x0800749c
 800723c:	080074a0 	.word	0x080074a0
 8007240:	0800749c 	.word	0x0800749c

08007244 <_init>:
 8007244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007246:	bf00      	nop
 8007248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724a:	bc08      	pop	{r3}
 800724c:	469e      	mov	lr, r3
 800724e:	4770      	bx	lr

08007250 <_fini>:
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007252:	bf00      	nop
 8007254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007256:	bc08      	pop	{r3}
 8007258:	469e      	mov	lr, r3
 800725a:	4770      	bx	lr
